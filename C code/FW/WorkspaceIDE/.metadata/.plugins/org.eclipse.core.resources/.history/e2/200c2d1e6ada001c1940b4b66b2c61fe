
F4012RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051bc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055dc  080055dc  00020440  2**0
                  CONTENTS
  4 .ARM          00000008  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055e4  080055e4  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  080055ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000440  08005a2c  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08005a2c  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002536e  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000239c7  00000000  00000000  000457de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fc2  00000000  00000000  000691a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0006e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a6180  00000000  00000000  0006f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b98  00000000  00000000  001155b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ca7a  00000000  00000000  00118150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  00134c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001436c  00000000  00000000  0013826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800533c 	.word	0x0800533c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800533c 	.word	0x0800533c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b974 	b.w	8000af4 <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9d08      	ldr	r5, [sp, #32]
 800082a:	4604      	mov	r4, r0
 800082c:	468e      	mov	lr, r1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d14d      	bne.n	80008ce <__udivmoddi4+0xaa>
 8000832:	428a      	cmp	r2, r1
 8000834:	4694      	mov	ip, r2
 8000836:	d969      	bls.n	800090c <__udivmoddi4+0xe8>
 8000838:	fab2 f282 	clz	r2, r2
 800083c:	b152      	cbz	r2, 8000854 <__udivmoddi4+0x30>
 800083e:	fa01 f302 	lsl.w	r3, r1, r2
 8000842:	f1c2 0120 	rsb	r1, r2, #32
 8000846:	fa20 f101 	lsr.w	r1, r0, r1
 800084a:	fa0c fc02 	lsl.w	ip, ip, r2
 800084e:	ea41 0e03 	orr.w	lr, r1, r3
 8000852:	4094      	lsls	r4, r2
 8000854:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000858:	0c21      	lsrs	r1, r4, #16
 800085a:	fbbe f6f8 	udiv	r6, lr, r8
 800085e:	fa1f f78c 	uxth.w	r7, ip
 8000862:	fb08 e316 	mls	r3, r8, r6, lr
 8000866:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800086a:	fb06 f107 	mul.w	r1, r6, r7
 800086e:	4299      	cmp	r1, r3
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x64>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 30ff 	add.w	r0, r6, #4294967295
 800087a:	f080 811f 	bcs.w	8000abc <__udivmoddi4+0x298>
 800087e:	4299      	cmp	r1, r3
 8000880:	f240 811c 	bls.w	8000abc <__udivmoddi4+0x298>
 8000884:	3e02      	subs	r6, #2
 8000886:	4463      	add	r3, ip
 8000888:	1a5b      	subs	r3, r3, r1
 800088a:	b2a4      	uxth	r4, r4
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000898:	fb00 f707 	mul.w	r7, r0, r7
 800089c:	42a7      	cmp	r7, r4
 800089e:	d90a      	bls.n	80008b6 <__udivmoddi4+0x92>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	f080 810a 	bcs.w	8000ac0 <__udivmoddi4+0x29c>
 80008ac:	42a7      	cmp	r7, r4
 80008ae:	f240 8107 	bls.w	8000ac0 <__udivmoddi4+0x29c>
 80008b2:	4464      	add	r4, ip
 80008b4:	3802      	subs	r0, #2
 80008b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ba:	1be4      	subs	r4, r4, r7
 80008bc:	2600      	movs	r6, #0
 80008be:	b11d      	cbz	r5, 80008c8 <__udivmoddi4+0xa4>
 80008c0:	40d4      	lsrs	r4, r2
 80008c2:	2300      	movs	r3, #0
 80008c4:	e9c5 4300 	strd	r4, r3, [r5]
 80008c8:	4631      	mov	r1, r6
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d909      	bls.n	80008e6 <__udivmoddi4+0xc2>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	f000 80ef 	beq.w	8000ab6 <__udivmoddi4+0x292>
 80008d8:	2600      	movs	r6, #0
 80008da:	e9c5 0100 	strd	r0, r1, [r5]
 80008de:	4630      	mov	r0, r6
 80008e0:	4631      	mov	r1, r6
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e6:	fab3 f683 	clz	r6, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d14a      	bne.n	8000984 <__udivmoddi4+0x160>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xd4>
 80008f2:	4282      	cmp	r2, r0
 80008f4:	f200 80f9 	bhi.w	8000aea <__udivmoddi4+0x2c6>
 80008f8:	1a84      	subs	r4, r0, r2
 80008fa:	eb61 0303 	sbc.w	r3, r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	469e      	mov	lr, r3
 8000902:	2d00      	cmp	r5, #0
 8000904:	d0e0      	beq.n	80008c8 <__udivmoddi4+0xa4>
 8000906:	e9c5 4e00 	strd	r4, lr, [r5]
 800090a:	e7dd      	b.n	80008c8 <__udivmoddi4+0xa4>
 800090c:	b902      	cbnz	r2, 8000910 <__udivmoddi4+0xec>
 800090e:	deff      	udf	#255	; 0xff
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	2a00      	cmp	r2, #0
 8000916:	f040 8092 	bne.w	8000a3e <__udivmoddi4+0x21a>
 800091a:	eba1 010c 	sub.w	r1, r1, ip
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2601      	movs	r6, #1
 8000928:	0c20      	lsrs	r0, r4, #16
 800092a:	fbb1 f3f7 	udiv	r3, r1, r7
 800092e:	fb07 1113 	mls	r1, r7, r3, r1
 8000932:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000936:	fb0e f003 	mul.w	r0, lr, r3
 800093a:	4288      	cmp	r0, r1
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x12c>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f103 38ff 	add.w	r8, r3, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x12a>
 8000948:	4288      	cmp	r0, r1
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2c0>
 800094e:	4643      	mov	r3, r8
 8000950:	1a09      	subs	r1, r1, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1110 	mls	r1, r7, r0, r1
 800095c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x156>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x154>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2ca>
 8000978:	4608      	mov	r0, r1
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000982:	e79c      	b.n	80008be <__udivmoddi4+0x9a>
 8000984:	f1c6 0720 	rsb	r7, r6, #32
 8000988:	40b3      	lsls	r3, r6
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa20 f407 	lsr.w	r4, r0, r7
 8000996:	fa01 f306 	lsl.w	r3, r1, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	40f9      	lsrs	r1, r7
 800099e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a2:	fa00 f306 	lsl.w	r3, r0, r6
 80009a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009aa:	0c20      	lsrs	r0, r4, #16
 80009ac:	fa1f fe8c 	uxth.w	lr, ip
 80009b0:	fb09 1118 	mls	r1, r9, r8, r1
 80009b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b8:	fb08 f00e 	mul.w	r0, r8, lr
 80009bc:	4288      	cmp	r0, r1
 80009be:	fa02 f206 	lsl.w	r2, r2, r6
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b8>
 80009c4:	eb1c 0101 	adds.w	r1, ip, r1
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4461      	add	r1, ip
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009e4:	fb09 1110 	mls	r1, r9, r0, r1
 80009e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f0:	458e      	cmp	lr, r1
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1e2>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2b4>
 80009fe:	458e      	cmp	lr, r1
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2b4>
 8000a02:	3802      	subs	r0, #2
 8000a04:	4461      	add	r1, ip
 8000a06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a0e:	eba1 010e 	sub.w	r1, r1, lr
 8000a12:	42a1      	cmp	r1, r4
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46a6      	mov	lr, r4
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x2a4>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x2a0>
 8000a1c:	b15d      	cbz	r5, 8000a36 <__udivmoddi4+0x212>
 8000a1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a22:	eb61 010e 	sbc.w	r1, r1, lr
 8000a26:	fa01 f707 	lsl.w	r7, r1, r7
 8000a2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a2e:	40f1      	lsrs	r1, r6
 8000a30:	431f      	orrs	r7, r3
 8000a32:	e9c5 7100 	strd	r7, r1, [r5]
 8000a36:	2600      	movs	r6, #0
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	40d8      	lsrs	r0, r3
 8000a44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a48:	fa21 f303 	lsr.w	r3, r1, r3
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	4301      	orrs	r1, r0
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a60:	0c0b      	lsrs	r3, r1, #16
 8000a62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a66:	fb00 f60e 	mul.w	r6, r0, lr
 8000a6a:	429e      	cmp	r6, r3
 8000a6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x260>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b8>
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b8>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1b9b      	subs	r3, r3, r6
 8000a86:	b289      	uxth	r1, r1
 8000a88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a94:	fb06 f30e 	mul.w	r3, r6, lr
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x28a>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aaa:	3e02      	subs	r6, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	1ac9      	subs	r1, r1, r3
 8000ab0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0x104>
 8000ab6:	462e      	mov	r6, r5
 8000ab8:	4628      	mov	r0, r5
 8000aba:	e705      	b.n	80008c8 <__udivmoddi4+0xa4>
 8000abc:	4606      	mov	r6, r0
 8000abe:	e6e3      	b.n	8000888 <__udivmoddi4+0x64>
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	e6f8      	b.n	80008b6 <__udivmoddi4+0x92>
 8000ac4:	454b      	cmp	r3, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f8>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad0:	3801      	subs	r0, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f8>
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x28a>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1e2>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x260>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b8>
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	4461      	add	r1, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x12c>
 8000aea:	4630      	mov	r0, r6
 8000aec:	e709      	b.n	8000902 <__udivmoddi4+0xde>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x156>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b22:	f001 fc83 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f004 fbdd 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f000 f86d 	bl	8000c08 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8000b3c:	080055ec 	.word	0x080055ec
  ldr r2, =_sbss
 8000b40:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8000b44:	200005e8 	.word	0x200005e8

08000b48 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <BusFault_Handler>
 8000b4a:	0000      	movs	r0, r0
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	2300      	movs	r3, #0
{
 8000b54:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000b5a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b62:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4926      	ldr	r1, [pc, #152]	; (8000c00 <SystemClock_Config+0xb0>)
 8000b68:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b6e:	4a25      	ldr	r2, [pc, #148]	; (8000c04 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000b74:	6408      	str	r0, [r1, #64]	; 0x40
 8000b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b78:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000b7c:	9100      	str	r1, [sp, #0]
 8000b7e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b96:	2001      	movs	r0, #1
 8000b98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba2:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba4:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000baa:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb6:	e9cd 4212 	strd	r4, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f002 f84b 	bl	8002c54 <HAL_RCC_OscConfig>
 8000bbe:	b108      	cbz	r0, 8000bc4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000bf0 <SystemClock_Config+0xa0>
 8000bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000bcc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000bf8 <SystemClock_Config+0xa8>
 8000bd0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bdc:	f002 fa58 	bl	8003090 <HAL_RCC_ClockConfig>
 8000be0:	b108      	cbz	r0, 8000be6 <SystemClock_Config+0x96>
 8000be2:	b672      	cpsid	i
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 8000be6:	f002 fa19 	bl	800301c <HAL_RCC_EnableCSS>
}
 8000bea:	b014      	add	sp, #80	; 0x50
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	bf00      	nop
 8000bf0:	0000000f 	.word	0x0000000f
 8000bf4:	00000002 	.word	0x00000002
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	00001000 	.word	0x00001000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000

08000c08 <main>:
{
 8000c08:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	2400      	movs	r4, #0
{
 8000c0c:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8000c0e:	f001 fc3b 	bl	8002488 <HAL_Init>
  SystemClock_Config();
 8000c12:	f7ff ff9d 	bl	8000b50 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000c1a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4ba1      	ldr	r3, [pc, #644]	; (8000ea4 <main+0x29c>)
 8000c20:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c26:	48a0      	ldr	r0, [pc, #640]	; (8000ea8 <main+0x2a0>)
  hadc1.Instance = ADC1;
 8000c28:	4da0      	ldr	r5, [pc, #640]	; (8000eac <main+0x2a4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c2a:	4fa1      	ldr	r7, [pc, #644]	; (8000eb0 <main+0x2a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	f041 0104 	orr.w	r1, r1, #4
 8000c30:	6319      	str	r1, [r3, #48]	; 0x30
 8000c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c34:	f001 0104 	and.w	r1, r1, #4
 8000c38:	9100      	str	r1, [sp, #0]
 8000c3a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3c:	9401      	str	r4, [sp, #4]
 8000c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c40:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000c44:	6319      	str	r1, [r3, #48]	; 0x30
 8000c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c48:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000c4c:	9101      	str	r1, [sp, #4]
 8000c4e:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	9402      	str	r4, [sp, #8]
 8000c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c54:	f041 0101 	orr.w	r1, r1, #1
 8000c58:	6319      	str	r1, [r3, #48]	; 0x30
 8000c5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c5c:	f001 0101 	and.w	r1, r1, #1
 8000c60:	9102      	str	r1, [sp, #8]
 8000c62:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	9403      	str	r4, [sp, #12]
 8000c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c68:	f041 0102 	orr.w	r1, r1, #2
 8000c6c:	6319      	str	r1, [r3, #48]	; 0x30
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c74:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c78:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7c:	f001 ffe6 	bl	8002c4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c88:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000c8e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c92:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f001 fee7 	bl	8002a68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9a:	f04f 0900 	mov.w	r9, #0
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	4881      	ldr	r0, [pc, #516]	; (8000ea8 <main+0x2a0>)
 8000ca4:	a914      	add	r1, sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca6:	2620      	movs	r6, #32
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000cac:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f001 feda 	bl	8002a68 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cb4:	4632      	mov	r2, r6
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	a814      	add	r0, sp, #80	; 0x50
 8000cba:	f004 fb37 	bl	800532c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc2:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cca:	4a7b      	ldr	r2, [pc, #492]	; (8000eb8 <main+0x2b0>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000ccc:	60eb      	str	r3, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd2:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000cd8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cdc:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cde:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ce0:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce4:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce8:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8000cec:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cee:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf4:	f001 fc06 	bl	8002504 <HAL_ADC_Init>
 8000cf8:	b108      	cbz	r0, 8000cfe <main+0xf6>
 8000cfa:	b672      	cpsid	i
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0xf4>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cfe:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 8000d00:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d04:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 8000d08:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d0a:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d12:	a914      	add	r1, sp, #80	; 0x50
 8000d14:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d16:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d1a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d1c:	f001 fd4e 	bl	80027bc <HAL_ADCEx_InjectedConfigChannel>
 8000d20:	b108      	cbz	r0, 8000d26 <main+0x11e>
 8000d22:	b672      	cpsid	i
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <main+0x11c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000d26:	220b      	movs	r2, #11
 8000d28:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d2a:	a914      	add	r1, sp, #80	; 0x50
 8000d2c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000d2e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d32:	f001 fd43 	bl	80027bc <HAL_ADCEx_InjectedConfigChannel>
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x134>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x132>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d40:	a914      	add	r1, sp, #80	; 0x50
 8000d42:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000d44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d48:	f001 fd38 	bl	80027bc <HAL_ADCEx_InjectedConfigChannel>
 8000d4c:	b108      	cbz	r0, 8000d52 <main+0x14a>
 8000d4e:	b672      	cpsid	i
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0x148>
  sConfig.Channel = ADC_CHANNEL_1;
 8000d52:	2201      	movs	r2, #1
 8000d54:	2301      	movs	r3, #1
 8000d56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5a:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d60:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000d62:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d66:	f001 fc7b 	bl	8002660 <HAL_ADC_ConfigChannel>
 8000d6a:	b108      	cbz	r0, 8000d70 <main+0x168>
 8000d6c:	b672      	cpsid	i
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <main+0x166>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 8000d72:	220c      	movs	r2, #12
 8000d74:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d76:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 8000d78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7c:	f001 fc70 	bl	8002660 <HAL_ADC_ConfigChannel>
 8000d80:	4605      	mov	r5, r0
 8000d82:	b108      	cbz	r0, 8000d88 <main+0x180>
 8000d84:	b672      	cpsid	i
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <main+0x17e>
  htim1.Instance = TIM1;
 8000d88:	4f4c      	ldr	r7, [pc, #304]	; (8000ebc <main+0x2b4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d8a:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000d90:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000d94:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d98:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8000d9c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	4601      	mov	r1, r0
 8000da8:	4632      	mov	r2, r6
 8000daa:	a814      	add	r0, sp, #80	; 0x50
 8000dac:	f004 fabe 	bl	800532c <memset>
  htim1.Instance = TIM1;
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <main+0x2b8>)
 8000db2:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000db4:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbc:	e9c7 0303 	strd	r0, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc0:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dc2:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000dc4:	617c      	str	r4, [r7, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000dc6:	607d      	str	r5, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dca:	f002 fa05 	bl	80031d8 <HAL_TIM_Base_Init>
 8000dce:	b108      	cbz	r0, 8000dd4 <main+0x1cc>
 8000dd0:	b672      	cpsid	i
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <main+0x1ca>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	f002 fa7f 	bl	80032d8 <HAL_TIM_PWM_Init>
 8000dda:	b108      	cbz	r0, 8000de0 <main+0x1d8>
 8000ddc:	b672      	cpsid	i
  while (1)
 8000dde:	e7fe      	b.n	8000dde <main+0x1d6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000de0:	2206      	movs	r2, #6
 8000de2:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000de4:	a906      	add	r1, sp, #24
 8000de6:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000dec:	f002 fca8 	bl	8003740 <HAL_TIM_SlaveConfigSynchro>
 8000df0:	b108      	cbz	r0, 8000df6 <main+0x1ee>
 8000df2:	b672      	cpsid	i
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x1ec>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df6:	a904      	add	r1, sp, #16
 8000df8:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	e9cd 8904 	strd	r8, r9, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfe:	f002 fe4b 	bl	8003a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	b108      	cbz	r0, 8000e08 <main+0x200>
 8000e04:	b672      	cpsid	i
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <main+0x1fe>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2260      	movs	r2, #96	; 0x60
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000e10:	2200      	movs	r2, #0
 8000e12:	2308      	movs	r3, #8
 8000e14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000e18:	2600      	movs	r6, #0
 8000e1a:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	4826      	ldr	r0, [pc, #152]	; (8000ebc <main+0x2b4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000e22:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	2200      	movs	r2, #0
 8000e26:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2c:	f002 fad2 	bl	80033d4 <HAL_TIM_PWM_ConfigChannel>
 8000e30:	b108      	cbz	r0, 8000e36 <main+0x22e>
 8000e32:	b672      	cpsid	i
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <main+0x22c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e36:	4821      	ldr	r0, [pc, #132]	; (8000ebc <main+0x2b4>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	a90c      	add	r1, sp, #48	; 0x30
 8000e3c:	f002 faca 	bl	80033d4 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	b108      	cbz	r0, 8000e46 <main+0x23e>
 8000e42:	b672      	cpsid	i
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <main+0x23c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e46:	481d      	ldr	r0, [pc, #116]	; (8000ebc <main+0x2b4>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	a90c      	add	r1, sp, #48	; 0x30
 8000e4c:	f002 fac2 	bl	80033d4 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	b108      	cbz	r0, 8000e56 <main+0x24e>
 8000e52:	b672      	cpsid	i
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <main+0x24c>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e56:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e58:	2470      	movs	r4, #112	; 0x70
 8000e5a:	f240 5577 	movw	r5, #1399	; 0x577
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e5e:	4817      	ldr	r0, [pc, #92]	; (8000ebc <main+0x2b4>)
 8000e60:	220c      	movs	r2, #12
 8000e62:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e64:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e68:	f002 fab4 	bl	80033d4 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	b108      	cbz	r0, 8000e72 <main+0x26a>
 8000e6e:	b672      	cpsid	i
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <main+0x268>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e82:	2321      	movs	r3, #33	; 0x21
 8000e84:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8e:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <main+0x2b4>)
 8000e92:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000e94:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e98:	f002 fe36 	bl	8003b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	b188      	cbz	r0, 8000ec4 <main+0x2bc>
 8000ea0:	b672      	cpsid	i
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0x29a>
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	20000468 	.word	0x20000468
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	0f000001 	.word	0x0f000001
 8000ebc:	200004b0 	.word	0x200004b0
 8000ec0:	40010000 	.word	0x40010000
  htim2.Instance = TIM2;
 8000ec4:	4d57      	ldr	r5, [pc, #348]	; (8001024 <main+0x41c>)
  HAL_TIM_MspPostInit(&htim1);
 8000ec6:	4858      	ldr	r0, [pc, #352]	; (8001028 <main+0x420>)
 8000ec8:	f001 f9ea 	bl	80022a0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed2:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000edc:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000ee0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000ee4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000ef4:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef6:	f002 f96f 	bl	80031d8 <HAL_TIM_Base_Init>
 8000efa:	b108      	cbz	r0, 8000f00 <main+0x2f8>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <main+0x2f6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f04:	a914      	add	r1, sp, #80	; 0x50
 8000f06:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f002 fb69 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 8000f0e:	b108      	cbz	r0, 8000f14 <main+0x30c>
 8000f10:	b672      	cpsid	i
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <main+0x30a>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f14:	220b      	movs	r2, #11
 8000f16:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000f18:	a90c      	add	r1, sp, #48	; 0x30
 8000f1a:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f1c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8000f20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000f24:	f002 fd54 	bl	80039d0 <HAL_TIMEx_HallSensor_Init>
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x326>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x324>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f2e:	2250      	movs	r2, #80	; 0x50
 8000f30:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f32:	a906      	add	r1, sp, #24
 8000f34:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f36:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3a:	f002 fdad 	bl	8003a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4604      	mov	r4, r0
 8000f40:	b108      	cbz	r0, 8000f46 <main+0x33e>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x33c>
  MX_MotorControl_Init();
 8000f46:	f000 fdef 	bl	8001b28 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	2012      	movs	r0, #18
 8000f50:	f001 fd1e 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f54:	2012      	movs	r0, #18
 8000f56:	f001 fd59 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f001 fd16 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f64:	2019      	movs	r0, #25
 8000f66:	f001 fd51 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2018      	movs	r0, #24
 8000f70:	f001 fd0e 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f74:	2018      	movs	r0, #24
 8000f76:	f001 fd49 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	201c      	movs	r0, #28
 8000f80:	f001 fd06 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f84:	201c      	movs	r0, #28
 8000f86:	f001 fd41 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f001 fcfe 	bl	8002990 <HAL_NVIC_SetPriority>
  current.d = 0;
 8000f94:	4c25      	ldr	r4, [pc, #148]	; (800102c <main+0x424>)
		  current.q = 0.8;
 8000f96:	4e26      	ldr	r6, [pc, #152]	; (8001030 <main+0x428>)
		  current.q = 1.2;
 8000f98:	4d26      	ldr	r5, [pc, #152]	; (8001034 <main+0x42c>)
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9a:	2028      	movs	r0, #40	; 0x28
 8000f9c:	f001 fd36 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  current.d = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6063      	str	r3, [r4, #4]
  current.q = 0;
 8000fa4:	6023      	str	r3, [r4, #0]
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fa6:	ed94 0a00 	vldr	s0, [r4]
 8000faa:	edd4 0a01 	vldr	s1, [r4, #4]
 8000fae:	f000 f855 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
		  MC_StartMotor1();
 8000fb2:	f000 f847 	bl	8001044 <MC_StartMotor1>
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fb6:	edd4 0a01 	vldr	s1, [r4, #4]
		  current.q = 0.5;
 8000fba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000fbe:	ed84 0a00 	vstr	s0, [r4]
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fc2:	f000 f84b 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
		  HAL_Delay(8000);
 8000fc6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000fca:	f001 fa89 	bl	80024e0 <HAL_Delay>
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fce:	edd4 0a01 	vldr	s1, [r4, #4]
 8000fd2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001038 <main+0x430>
		  current.q = 0.8;
 8000fd6:	6026      	str	r6, [r4, #0]
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fd8:	f000 f840 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
		  HAL_Delay(8000);
 8000fdc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000fe0:	f001 fa7e 	bl	80024e0 <HAL_Delay>
		  MC_SetCurrentReferenceMotor1_F(current);
 8000fe4:	edd4 0a01 	vldr	s1, [r4, #4]
		  current.q = 1;
 8000fe8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fec:	ed84 0a00 	vstr	s0, [r4]
		  MC_SetCurrentReferenceMotor1_F(current);
 8000ff0:	f000 f834 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
		  HAL_Delay(8000);
 8000ff4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ff8:	f001 fa72 	bl	80024e0 <HAL_Delay>
		  MC_SetCurrentReferenceMotor1_F(current);
 8000ffc:	edd4 0a01 	vldr	s1, [r4, #4]
 8001000:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800103c <main+0x434>
		  current.q = 1.2;
 8001004:	6025      	str	r5, [r4, #0]
		  MC_SetCurrentReferenceMotor1_F(current);
 8001006:	f000 f829 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
		  HAL_Delay(8000);
 800100a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800100e:	f001 fa67 	bl	80024e0 <HAL_Delay>
		  current.q = 1.4;
 8001012:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001040 <main+0x438>
		  MC_SetCurrentReferenceMotor1_F(current);
 8001016:	edd4 0a01 	vldr	s1, [r4, #4]
		  current.q = 1.4;
 800101a:	ed84 0a00 	vstr	s0, [r4]
		  MC_SetCurrentReferenceMotor1_F(current);
 800101e:	f000 f81d 	bl	800105c <MC_SetCurrentReferenceMotor1_F>
  while (1)
 8001022:	e7c0      	b.n	8000fa6 <main+0x39e>
 8001024:	200004f8 	.word	0x200004f8
 8001028:	200004b0 	.word	0x200004b0
 800102c:	2000045c 	.word	0x2000045c
 8001030:	3f4ccccd 	.word	0x3f4ccccd
 8001034:	3f99999a 	.word	0x3f99999a
 8001038:	3f4ccccd 	.word	0x3f4ccccd
 800103c:	3f99999a 	.word	0x3f99999a
 8001040:	3fb33333 	.word	0x3fb33333

08001044 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <MC_StartMotor1+0x8>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f000 b8b4 	b.w	80011b4 <MCI_StartMotor>
 800104c:	200005ac 	.word	0x200005ac

08001050 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <MC_StopMotor1+0x8>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f000 b8c4 	b.w	80011e0 <MCI_StopMotor>
 8001058:	200005ac 	.word	0x200005ac

0800105c <MC_SetCurrentReferenceMotor1_F>:
  * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
  *         in the qd_f_t format.
  */
__weak void MC_SetCurrentReferenceMotor1_F( qd_f_t IqdRef )
{
	MCI_SetCurrentReferences_F( pMCI[M1], IqdRef );
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <MC_SetCurrentReferenceMotor1_F+0xc>)
 800105e:	6818      	ldr	r0, [r3, #0]
{
 8001060:	b082      	sub	sp, #8
}
 8001062:	b002      	add	sp, #8
	MCI_SetCurrentReferences_F( pMCI[M1], IqdRef );
 8001064:	f000 b830 	b.w	80010c8 <MCI_SetCurrentReferences_F>
 8001068:	200005ac 	.word	0x200005ac

0800106c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 800106c:	4b01      	ldr	r3, [pc, #4]	; (8001074 <MC_GetSTMStateMotor1+0x8>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	f000 b89a 	b.w	80011a8 <MCI_GetSTMState>
 8001074:	200005ac 	.word	0x200005ac

08001078 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001078:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 800107c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001080:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001082:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001086:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 800108a:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800108e:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001092:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001096:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800109a:	4770      	bx	lr

0800109c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800109c:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010a0:	f240 1301 	movw	r3, #257	; 0x101
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80010a4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80010a8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80010aa:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010ac:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_SPEED_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80010ae:	4770      	bx	lr

080010b0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80010b0:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80010b2:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010b4:	2301      	movs	r3, #1
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80010b6:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80010b8:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010bc:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80010be:	b002      	add	sp, #8
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	0000      	movs	r0, r0
	...

080010c8 <MCI_SetCurrentReferences_F>:
  * @param  Iqdref current (A) references on qd reference frame in qd_f_t format.
  *
  * @retval none.
  */
__weak void MCI_SetCurrentReferences_F( MCI_Handle_t * pHandle, qd_f_t IqdRef )
{
 80010c8:	b530      	push	{r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	b085      	sub	sp, #20
  }
  else
  {
#endif
    qd_t Iqdref;
    Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 80010ce:	ee10 0a90 	vmov	r0, s1
{
 80010d2:	ee10 5a10 	vmov	r5, s0
    Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 80010d6:	f7ff fb0d 	bl	80006f4 <__aeabi_f2d>
 80010da:	a30f      	add	r3, pc, #60	; (adr r3, 8001118 <MCI_SetCurrentReferences_F+0x50>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff f87a 	bl	80001d8 <__aeabi_dmul>
 80010e4:	f7ff fb5e 	bl	80007a4 <__aeabi_d2iz>
 80010e8:	4603      	mov	r3, r0
    Iqdref.q = (int16_t) (IqdRef.q * CURRENT_CONV_FACTOR);
 80010ea:	4628      	mov	r0, r5
    Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 80010ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    Iqdref.q = (int16_t) (IqdRef.q * CURRENT_CONV_FACTOR);
 80010f0:	f7ff fb00 	bl	80006f4 <__aeabi_f2d>
 80010f4:	a308      	add	r3, pc, #32	; (adr r3, 8001118 <MCI_SetCurrentReferences_F+0x50>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f86d 	bl	80001d8 <__aeabi_dmul>
 80010fe:	f7ff fb51 	bl	80007a4 <__aeabi_d2iz>
 8001102:	f8ad 000c 	strh.w	r0, [sp, #12]
    MCI_SetCurrentReferences(pHandle, Iqdref);
 8001106:	9903      	ldr	r1, [sp, #12]
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff ffd1 	bl	80010b0 <MCI_SetCurrentReferences>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800110e:	b005      	add	sp, #20
 8001110:	bd30      	pop	{r4, r5, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	cdfaa9ad 	.word	0xcdfaa9ad
 800111c:	409012dd 	.word	0x409012dd

08001120 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001120:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001122:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001126:	430b      	orrs	r3, r1
 8001128:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 800112c:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001130:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001132:	8381      	strh	r1, [r0, #28]

  return;
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001138:	7f83      	ldrb	r3, [r0, #30]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d000      	beq.n	8001140 <MCI_ExecBufferedCommands+0x8>
 800113e:	4770      	bx	lr
{
 8001140:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001142:	7b01      	ldrb	r1, [r0, #12]
 8001144:	2902      	cmp	r1, #2
 8001146:	4604      	mov	r4, r0
 8001148:	d006      	beq.n	8001158 <MCI_ExecBufferedCommands+0x20>
 800114a:	2903      	cmp	r1, #3
 800114c:	d024      	beq.n	8001198 <MCI_ExecBufferedCommands+0x60>
 800114e:	2901      	cmp	r1, #1
 8001150:	d014      	beq.n	800117c <MCI_ExecBufferedCommands+0x44>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001152:	2303      	movs	r3, #3
 8001154:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001156:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001158:	6843      	ldr	r3, [r0, #4]
 800115a:	2100      	movs	r1, #0
 800115c:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_TORQUE_MODE);
 8001160:	6800      	ldr	r0, [r0, #0]
 8001162:	f004 f835 	bl	80051d0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001166:	8ae2      	ldrh	r2, [r4, #22]
 8001168:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800116c:	6820      	ldr	r0, [r4, #0]
 800116e:	f004 f833 	bl	80051d8 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001172:	2800      	cmp	r0, #0
 8001174:	d0ed      	beq.n	8001152 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001176:	2302      	movs	r3, #2
 8001178:	77a3      	strb	r3, [r4, #30]
}
 800117a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800117c:	6843      	ldr	r3, [r0, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_SPEED_MODE);
 8001184:	6800      	ldr	r0, [r0, #0]
 8001186:	f004 f823 	bl	80051d0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800118a:	8ae2      	ldrh	r2, [r4, #22]
 800118c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f004 f821 	bl	80051d8 <STC_ExecRamp>
          break;
 8001196:	e7ec      	b.n	8001172 <MCI_ExecBufferedCommands+0x3a>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001198:	6842      	ldr	r2, [r0, #4]
 800119a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800119e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80011a2:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80011a4:	e7e7      	b.n	8001176 <MCI_ExecBufferedCommands+0x3e>
 80011a6:	bf00      	nop

080011a8 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 80011a8:	7e40      	ldrb	r0, [r0, #25]
 80011aa:	4770      	bx	lr

080011ac <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 80011ac:	8b80      	ldrh	r0, [r0, #28]
 80011ae:	4770      	bx	lr

080011b0 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 80011b0:	8b40      	ldrh	r0, [r0, #26]
 80011b2:	4770      	bx	lr

080011b4 <MCI_StartMotor>:
{
 80011b4:	b510      	push	{r4, lr}
 80011b6:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80011b8:	f7ff fff6 	bl	80011a8 <MCI_GetSTMState>
 80011bc:	b108      	cbz	r0, 80011c2 <MCI_StartMotor+0xe>
    RetVal = false;
 80011be:	2000      	movs	r0, #0
}
 80011c0:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff fff2 	bl	80011ac <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1f8      	bne.n	80011be <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ffef 	bl	80011b0 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d1f3      	bne.n	80011be <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80011d6:	2001      	movs	r0, #1
 80011d8:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011da:	77a0      	strb	r0, [r4, #30]
}
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	bf00      	nop

080011e0 <MCI_StopMotor>:
{
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80011e4:	f7ff ffe0 	bl	80011a8 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80011e8:	b150      	cbz	r0, 8001200 <MCI_StopMotor+0x20>
 80011ea:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011ee:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80011f0:	bf18      	it	ne
 80011f2:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011f4:	f7ff ffda 	bl	80011ac <MCI_GetOccurredFaults>
 80011f8:	b140      	cbz	r0, 800120c <MCI_StopMotor+0x2c>
    RetVal = false;
 80011fa:	2400      	movs	r4, #0
}
 80011fc:	4620      	mov	r0, r4
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 8001200:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001202:	4628      	mov	r0, r5
 8001204:	f7ff ffd2 	bl	80011ac <MCI_GetOccurredFaults>
 8001208:	2800      	cmp	r0, #0
 800120a:	d1f6      	bne.n	80011fa <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800120c:	4628      	mov	r0, r5
 800120e:	f7ff ffcf 	bl	80011b0 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001212:	2800      	cmp	r0, #0
 8001214:	d1f1      	bne.n	80011fa <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001216:	2c00      	cmp	r4, #0
 8001218:	d0ef      	beq.n	80011fa <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 800121a:	2305      	movs	r3, #5
 800121c:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 800121e:	e7ed      	b.n	80011fc <MCI_StopMotor+0x1c>

08001220 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001220:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001222:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001224:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800122c:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001230:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001232:	fb13 f201 	smulbb	r2, r3, r1
{
 8001236:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800123a:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800123e:	4250      	negs	r0, r2
 8001240:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001244:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001248:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 800124a:	da05      	bge.n	8001258 <MCM_Clarke+0x2c>
 800124c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800124e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001252:	da0c      	bge.n	800126e <MCM_Clarke+0x42>
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <MCM_Clarke+0x50>)
 8001256:	e001      	b.n	800125c <MCM_Clarke+0x30>
 8001258:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 800125c:	b29b      	uxth	r3, r3
 800125e:	2000      	movs	r0, #0
 8001260:	f363 000f 	bfi	r0, r3, #0, #16
 8001264:	b293      	uxth	r3, r2
 8001266:	f363 401f 	bfi	r0, r3, #16, #16
}
 800126a:	b004      	add	sp, #16
 800126c:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <MCM_Clarke+0x50>)
 8001270:	b20a      	sxth	r2, r1
 8001272:	4282      	cmp	r2, r0
 8001274:	bfb8      	it	lt
 8001276:	4602      	movlt	r2, r0
 8001278:	e7f0      	b.n	800125c <MCM_Clarke+0x30>
 800127a:	bf00      	nop
 800127c:	ffff8001 	.word	0xffff8001

08001280 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001280:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8001284:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001288:	f400 7140 	and.w	r1, r0, #768	; 0x300
 800128c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8001290:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001292:	d028      	beq.n	80012e6 <MCM_Trig_Functions+0x66>
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	461a      	mov	r2, r3
 800129a:	d816      	bhi.n	80012ca <MCM_Trig_Functions+0x4a>
 800129c:	b361      	cbz	r1, 80012f8 <MCM_Trig_Functions+0x78>
 800129e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80012a2:	d109      	bne.n	80012b8 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012a4:	b2c0      	uxtb	r0, r0
 80012a6:	43c2      	mvns	r2, r0
 80012a8:	491a      	ldr	r1, [pc, #104]	; (8001314 <MCM_Trig_Functions+0x94>)
 80012aa:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80012ac:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012b0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012b4:	4252      	negs	r2, r2
 80012b6:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2000      	movs	r0, #0
 80012bc:	f363 000f 	bfi	r0, r3, #0, #16
 80012c0:	b292      	uxth	r2, r2
 80012c2:	f362 401f 	bfi	r0, r2, #16, #16
}
 80012c6:	b002      	add	sp, #8
 80012c8:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 80012ca:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80012ce:	d1f3      	bne.n	80012b8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012d0:	4910      	ldr	r1, [pc, #64]	; (8001314 <MCM_Trig_Functions+0x94>)
 80012d2:	b2c0      	uxtb	r0, r0
 80012d4:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80012d6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012da:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80012dc:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012de:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80012e2:	b21b      	sxth	r3, r3
      break;
 80012e4:	e7e8      	b.n	80012b8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80012e6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012e8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012ec:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80012ee:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012f2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 80012f6:	e7df      	b.n	80012b8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80012f8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012fa:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80012fc:	4905      	ldr	r1, [pc, #20]	; (8001314 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80012fe:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001300:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001304:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001308:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800130a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800130c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800130e:	b21b      	sxth	r3, r3
      break;
 8001310:	e7d2      	b.n	80012b8 <MCM_Trig_Functions+0x38>
 8001312:	bf00      	nop
 8001314:	08005354 	.word	0x08005354

08001318 <MCM_Park>:
{
 8001318:	b530      	push	{r4, r5, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	4603      	mov	r3, r0
 800131e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001320:	4608      	mov	r0, r1
 8001322:	141c      	asrs	r4, r3, #16
{
 8001324:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001326:	f7ff ffab 	bl	8001280 <MCM_Trig_Functions>
 800132a:	b22d      	sxth	r5, r5
 800132c:	fa0f fc80 	sxth.w	ip, r0
 8001330:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001332:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001336:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 800133a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800133e:	da05      	bge.n	800134c <MCM_Park+0x34>
 8001340:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 8001342:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001346:	da22      	bge.n	800138e <MCM_Park+0x76>
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <MCM_Park+0x84>)
 800134a:	e001      	b.n	8001350 <MCM_Park+0x38>
 800134c:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001350:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001354:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8001358:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800135c:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001360:	da04      	bge.n	800136c <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8001362:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001366:	da0c      	bge.n	8001382 <MCM_Park+0x6a>
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MCM_Park+0x84>)
 800136a:	e001      	b.n	8001370 <MCM_Park+0x58>
 800136c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001370:	b28a      	uxth	r2, r1
 8001372:	2000      	movs	r0, #0
 8001374:	f362 000f 	bfi	r0, r2, #0, #16
 8001378:	b29b      	uxth	r3, r3
 800137a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800137e:	b005      	add	sp, #20
 8001380:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MCM_Park+0x84>)
 8001384:	b213      	sxth	r3, r2
 8001386:	4283      	cmp	r3, r0
 8001388:	bfb8      	it	lt
 800138a:	4603      	movlt	r3, r0
 800138c:	e7f0      	b.n	8001370 <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 800138e:	4903      	ldr	r1, [pc, #12]	; (800139c <MCM_Park+0x84>)
 8001390:	b212      	sxth	r2, r2
 8001392:	4291      	cmp	r1, r2
 8001394:	bfb8      	it	lt
 8001396:	4611      	movlt	r1, r2
 8001398:	e7da      	b.n	8001350 <MCM_Park+0x38>
 800139a:	bf00      	nop
 800139c:	ffff8001 	.word	0xffff8001

080013a0 <MCM_Rev_Park>:
{
 80013a0:	b530      	push	{r4, r5, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	4604      	mov	r4, r0
 80013a6:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80013a8:	4608      	mov	r0, r1
{
 80013aa:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80013ac:	f7ff ff68 	bl	8001280 <MCM_Trig_Functions>
 80013b0:	1424      	asrs	r4, r4, #16
 80013b2:	1402      	asrs	r2, r0, #16
 80013b4:	b22d      	sxth	r5, r5
 80013b6:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80013b8:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80013bc:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80013c0:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80013c4:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80013c8:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80013cc:	2000      	movs	r0, #0
 80013ce:	f363 000f 	bfi	r0, r3, #0, #16
 80013d2:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80013d6:	f364 401f 	bfi	r0, r4, #16, #16
}
 80013da:	b005      	add	sp, #20
 80013dc:	bd30      	pop	{r4, r5, pc}
 80013de:	bf00      	nop

080013e0 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	dd35      	ble.n	8001450 <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 80013e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013e8:	dd2b      	ble.n	8001442 <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80013ea:	135a      	asrs	r2, r3, #13
 80013ec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80013f0:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80013f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80013f6:	d029      	beq.n	800144c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80013f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80013fc:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80013fe:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001402:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001406:	d024      	beq.n	8001452 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001408:	fb93 f2f0 	sdiv	r2, r3, r0
 800140c:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800140e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001412:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001416:	d01c      	beq.n	8001452 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001418:	fb93 f2f1 	sdiv	r2, r3, r1
 800141c:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800141e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001422:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001426:	d014      	beq.n	8001452 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001428:	fb93 f2f0 	sdiv	r2, r3, r0
 800142c:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800142e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001432:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001436:	d00c      	beq.n	8001452 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001438:	fb93 f0f1 	sdiv	r0, r3, r1
 800143c:	4408      	add	r0, r1
 800143e:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001440:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001442:	11da      	asrs	r2, r3, #7
 8001444:	3280      	adds	r2, #128	; 0x80
 8001446:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001448:	2a80      	cmp	r2, #128	; 0x80
 800144a:	d1d5      	bne.n	80013f8 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800144c:	4610      	mov	r0, r2
 800144e:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001450:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001452:	4770      	bx	lr

08001454 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001454:	2226      	movs	r2, #38	; 0x26
{
 8001456:	b538      	push	{r3, r4, r5, lr}
 8001458:	fb00 f202 	mul.w	r2, r0, r2
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800145e:	2400      	movs	r4, #0
 8001460:	509c      	str	r4, [r3, r2]
{
 8001462:	4605      	mov	r5, r0
 8001464:	f102 0108 	add.w	r1, r2, #8
 8001468:	1898      	adds	r0, r3, r2
 800146a:	3210      	adds	r2, #16
 800146c:	4419      	add	r1, r3
 800146e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001470:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001472:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001474:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001478:	604c      	str	r4, [r1, #4]
 800147a:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 800147c:	f8c3 4006 	str.w	r4, [r3, #6]
 8001480:	f8c3 400a 	str.w	r4, [r3, #10]
 8001484:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001488:	4621      	mov	r1, r4
 800148a:	f002 ffd1 	bl	8004430 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <FOC_Clear+0x68>)
 8001490:	4621      	mov	r1, r4
 8001492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001496:	f002 ffcb 	bl	8004430 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <FOC_Clear+0x6c>)
 800149c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80014a0:	f003 fe8a 	bl	80051b8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <FOC_Clear+0x70>)
 80014a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80014aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014ae:	f000 bca5 	b.w	8001dfc <PWMC_SwitchOffPWM>
 80014b2:	bf00      	nop
 80014b4:	20000574 	.word	0x20000574
 80014b8:	20000428 	.word	0x20000428
 80014bc:	20000424 	.word	0x20000424
 80014c0:	2000042c 	.word	0x2000042c
 80014c4:	200005a8 	.word	0x200005a8

080014c8 <MCboot>:
  if (MC_NULL == pMCIList)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d05c      	beq.n	8001586 <MCboot+0xbe>
{
 80014cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pCLM[M1] = &CircleLimitationM1;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MCboot+0xc0>)
 80014d2:	4a2e      	ldr	r2, [pc, #184]	; (800158c <MCboot+0xc4>)
    bMCBootCompleted = (uint8_t )0;
 80014d4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80015bc <MCboot+0xf4>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80014d8:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80015c0 <MCboot+0xf8>
    pCLM[M1] = &CircleLimitationM1;
 80014dc:	601a      	str	r2, [r3, #0]
{
 80014de:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 80014e0:	f04f 0800 	mov.w	r8, #0
 80014e4:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <MCboot+0xc8>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 80014e8:	4d2a      	ldr	r5, [pc, #168]	; (8001594 <MCboot+0xcc>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80014ea:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80014ee:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 80014f2:	f003 facd 	bl	8004a90 <R3_1_Init>
    startTimers();
 80014f6:	f003 f819 	bl	800452c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <MCboot+0xd0>)
    RVBS_Init(&BusVoltageSensor_M1);
 80014fc:	4e27      	ldr	r6, [pc, #156]	; (800159c <MCboot+0xd4>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80014fe:	4f28      	ldr	r7, [pc, #160]	; (80015a0 <MCboot+0xd8>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001500:	f002 ff8e 	bl	8004420 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <MCboot+0xdc>)
 8001506:	f002 fb5f 	bl	8003bc8 <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <MCboot+0xdc>)
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <MCboot+0xd0>)
 800150e:	6828      	ldr	r0, [r5, #0]
 8001510:	f003 fe3a 	bl	8005188 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001514:	4824      	ldr	r0, [pc, #144]	; (80015a8 <MCboot+0xe0>)
 8001516:	f002 ff83 	bl	8004420 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800151a:	4824      	ldr	r0, [pc, #144]	; (80015ac <MCboot+0xe4>)
 800151c:	f002 ff80 	bl	8004420 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001520:	4630      	mov	r0, r6
 8001522:	f003 fd9b 	bl	800505c <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <MCboot+0xe8>)
    REMNG_Init(pREMNG[M1]);
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <MCboot+0xec>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001530:	4e21      	ldr	r6, [pc, #132]	; (80015b8 <MCboot+0xf0>)
 8001532:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
    REMNG_Init(pREMNG[M1]);
 8001536:	f003 fddd 	bl	80050f4 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800153a:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 800153e:	4640      	mov	r0, r8
 8001540:	f7ff ff88 	bl	8001454 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001544:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001546:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800154a:	f003 feb5 	bl	80052b8 <STC_GetDefaultIqdref>
 800154e:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001550:	6828      	ldr	r0, [r5, #0]
 8001552:	f003 feb1 	bl	80052b8 <STC_GetDefaultIqdref>
 8001556:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800155a:	f8db 3000 	ldr.w	r3, [fp]
 800155e:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001560:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001562:	4632      	mov	r2, r6
 8001564:	4638      	mov	r0, r7
 8001566:	f7ff fd87 	bl	8001078 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1], STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
 800156a:	6828      	ldr	r0, [r5, #0]
 800156c:	f003 fea0 	bl	80052b0 <STC_GetMecSpeedRefUnitDefault>
 8001570:	4642      	mov	r2, r8
 8001572:	4601      	mov	r1, r0
 8001574:	4638      	mov	r0, r7
 8001576:	f7ff fd91 	bl	800109c <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 800157a:	6027      	str	r7, [r4, #0]
    bMCBootCompleted = 1U;
 800157c:	f889 a000 	strb.w	sl, [r9]
}
 8001580:	b003      	add	sp, #12
 8001582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001586:	4770      	bx	lr
 8001588:	200005a4 	.word	0x200005a4
 800158c:	20000028 	.word	0x20000028
 8001590:	2000033c 	.word	0x2000033c
 8001594:	2000042c 	.word	0x2000042c
 8001598:	200001fc 	.word	0x200001fc
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000540 	.word	0x20000540
 80015a4:	200000dc 	.word	0x200000dc
 80015a8:	200001d0 	.word	0x200001d0
 80015ac:	200001a4 	.word	0x200001a4
 80015b0:	20000420 	.word	0x20000420
 80015b4:	200003d4 	.word	0x200003d4
 80015b8:	20000574 	.word	0x20000574
 80015bc:	2000059a 	.word	0x2000059a
 80015c0:	200005a8 	.word	0x200005a8

080015c4 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80015c8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80015ca:	4c08      	ldr	r4, [pc, #32]	; (80015ec <FOC_CalcCurrRef+0x24>)
 80015cc:	2326      	movs	r3, #38	; 0x26
 80015ce:	fb03 4400 	mla	r4, r3, r0, r4
 80015d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80015d6:	b103      	cbz	r3, 80015da <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80015d8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <FOC_CalcCurrRef+0x28>)
 80015dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80015e0:	f003 fe3c 	bl	800525c <STC_CalcTorqueReference>
 80015e4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80015e6:	8220      	strh	r0, [r4, #16]
}
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	bf00      	nop
 80015ec:	20000574 	.word	0x20000574
 80015f0:	2000042c 	.word	0x2000042c

080015f4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80015f4:	4b01      	ldr	r3, [pc, #4]	; (80015fc <TSK_SetChargeBootCapDelayM1+0x8>)
 80015f6:	8018      	strh	r0, [r3, #0]
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000059c 	.word	0x2000059c

08001600 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001602:	8818      	ldrh	r0, [r3, #0]
 8001604:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001606:	fab0 f080 	clz	r0, r0
 800160a:	0940      	lsrs	r0, r0, #5
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000059c 	.word	0x2000059c

08001614 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001614:	4b01      	ldr	r3, [pc, #4]	; (800161c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001616:	8018      	strh	r0, [r3, #0]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200005a0 	.word	0x200005a0

08001620 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001622:	8818      	ldrh	r0, [r3, #0]
 8001624:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001626:	fab0 f080 	clz	r0, r0
 800162a:	0940      	lsrs	r0, r0, #5
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200005a0 	.word	0x200005a0

08001634 <TSK_MediumFrequencyTaskM1>:
{
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001638:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800163a:	f10d 0106 	add.w	r1, sp, #6
 800163e:	4866      	ldr	r0, [pc, #408]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x1a4>)
  int16_t wAux = 0;
 8001640:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001644:	f002 fc14 	bl	8003e70 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001648:	4e64      	ldr	r6, [pc, #400]	; (80017dc <TSK_MediumFrequencyTaskM1+0x1a8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800164a:	4c65      	ldr	r4, [pc, #404]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x1ac>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800164c:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 800164e:	6830      	ldr	r0, [r6, #0]
 8001650:	f002 ff36 	bl	80044c0 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fdab 	bl	80011b0 <MCI_GetCurrentFaults>
 800165a:	b118      	cbz	r0, 8001664 <TSK_MediumFrequencyTaskM1+0x30>
    Mci[M1].State = FAULT_NOW;
 800165c:	230a      	movs	r3, #10
 800165e:	7663      	strb	r3, [r4, #25]
}
 8001660:	b002      	add	sp, #8
 8001662:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fda1 	bl	80011ac <MCI_GetOccurredFaults>
 800166a:	bb48      	cbnz	r0, 80016c0 <TSK_MediumFrequencyTaskM1+0x8c>
      switch (Mci[M1].State)
 800166c:	7e63      	ldrb	r3, [r4, #25]
 800166e:	2b11      	cmp	r3, #17
 8001670:	d8f6      	bhi.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <TSK_MediumFrequencyTaskM1+0x44>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001777 	.word	0x08001777
 800167c:	08001661 	.word	0x08001661
 8001680:	08001661 	.word	0x08001661
 8001684:	08001661 	.word	0x08001661
 8001688:	08001661 	.word	0x08001661
 800168c:	08001661 	.word	0x08001661
 8001690:	08001753 	.word	0x08001753
 8001694:	08001661 	.word	0x08001661
 8001698:	08001749 	.word	0x08001749
 800169c:	08001661 	.word	0x08001661
 80016a0:	080016c1 	.word	0x080016c1
 80016a4:	0800173d 	.word	0x0800173d
 80016a8:	08001661 	.word	0x08001661
 80016ac:	08001661 	.word	0x08001661
 80016b0:	08001661 	.word	0x08001661
 80016b4:	08001661 	.word	0x08001661
 80016b8:	080016f5 	.word	0x080016f5
 80016bc:	080016c9 	.word	0x080016c9
      Mci[M1].State = FAULT_OVER;
 80016c0:	230b      	movs	r3, #11
 80016c2:	7663      	strb	r3, [r4, #25]
}
 80016c4:	b002      	add	sp, #8
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
            if (MCI_STOP == Mci[M1].DirectCommand)
 80016c8:	7e23      	ldrb	r3, [r4, #24]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d063      	beq.n	8001796 <TSK_MediumFrequencyTaskM1+0x162>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80016ce:	4d45      	ldr	r5, [pc, #276]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x1b0>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	6828      	ldr	r0, [r5, #0]
 80016d4:	f000 fb96 	bl	8001e04 <PWMC_CurrentReadingCalibr>
 80016d8:	2800      	cmp	r0, #0
 80016da:	d0c1      	beq.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80016dc:	7e23      	ldrb	r3, [r4, #24]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d070      	beq.n	80017c4 <TSK_MediumFrequencyTaskM1+0x190>
                  R3_1_TurnOnLowSides(pwmcHandle[M1]);
 80016e2:	6828      	ldr	r0, [r5, #0]
 80016e4:	f003 f884 	bl	80047f0 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 80016e8:	2014      	movs	r0, #20
 80016ea:	f7ff ff83 	bl	80015f4 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 80016ee:	2310      	movs	r3, #16
 80016f0:	7663      	strb	r3, [r4, #25]
 80016f2:	e7b5      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80016f4:	7e23      	ldrb	r3, [r4, #24]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d04d      	beq.n	8001796 <TSK_MediumFrequencyTaskM1+0x162>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80016fa:	f7ff ff81 	bl	8001600 <TSK_ChargeBootCapDelayHasElapsedM1>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d0ae      	beq.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001702:	4d38      	ldr	r5, [pc, #224]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8001704:	6828      	ldr	r0, [r5, #0]
 8001706:	f003 f8e7 	bl	80048d8 <R3_1_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 800170a:	4833      	ldr	r0, [pc, #204]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x1a4>)
 800170c:	f002 fae8 	bl	8003ce0 <HALL_Clear>
              FOC_Clear( M1 );
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe9f 	bl	8001454 <FOC_Clear>
              FOC_InitAdditionalMethods(M1);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff ff54 	bl	80015c4 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ff53 	bl	80015c8 <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <TSK_MediumFrequencyTaskM1+0x1b4>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	f003 fdd5 	bl	80052d4 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800172a:	482d      	ldr	r0, [pc, #180]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x1ac>)
 800172c:	f7ff fd04 	bl	8001138 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8001730:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001732:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 8001734:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001736:	f000 fb63 	bl	8001e00 <PWMC_SwitchOnPWM>
 800173a:	e791      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800173c:	7e23      	ldrb	r3, [r4, #24]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d18e      	bne.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001742:	2300      	movs	r3, #0
 8001744:	8323      	strh	r3, [r4, #24]
 8001746:	e78b      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001748:	f7ff ff6a 	bl	8001620 <TSK_StopPermanencyTimeHasElapsedM1>
 800174c:	2800      	cmp	r0, #0
 800174e:	d087      	beq.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
 8001750:	e7f7      	b.n	8001742 <TSK_MediumFrequencyTaskM1+0x10e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001752:	7e23      	ldrb	r3, [r4, #24]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d01e      	beq.n	8001796 <TSK_MediumFrequencyTaskM1+0x162>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001758:	4821      	ldr	r0, [pc, #132]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x1ac>)
 800175a:	f7ff fced 	bl	8001138 <MCI_ExecBufferedCommands>
            FOC_CalcCurrRef(M1);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff ff32 	bl	80015c8 <FOC_CalcCurrRef>
            if(!IsSpeedReliable)
 8001764:	2d00      	cmp	r5, #0
 8001766:	f47f af7b 	bne.w	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x1ac>)
 800176c:	462a      	mov	r2, r5
 800176e:	2120      	movs	r1, #32
 8001770:	f7ff fcd6 	bl	8001120 <MCI_FaultProcessing>
 8001774:	e774      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001776:	7e23      	ldrb	r3, [r4, #24]
 8001778:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800177c:	2b01      	cmp	r3, #1
 800177e:	f47f af6f 	bne.w	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001782:	4d18      	ldr	r5, [pc, #96]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8001784:	6828      	ldr	r0, [r5, #0]
 8001786:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 800178a:	b9a9      	cbnz	r1, 80017b8 <TSK_MediumFrequencyTaskM1+0x184>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800178c:	f000 fb3a 	bl	8001e04 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001790:	2311      	movs	r3, #17
 8001792:	7663      	strb	r3, [r4, #25]
 8001794:	e764      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	f003 f89d 	bl	80048d8 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fe58 	bl	8001454 <FOC_Clear>
  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[motor]);
 80017a4:	6830      	ldr	r0, [r6, #0]
 80017a6:	f002 fe0f 	bl	80043c8 <MPM_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80017aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017ae:	f7ff ff31 	bl	8001614 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80017b2:	2308      	movs	r3, #8
 80017b4:	7663      	strb	r3, [r4, #25]
  return;
 80017b6:	e753      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80017b8:	4619      	mov	r1, r3
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80017ba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80017be:	f000 fb21 	bl	8001e04 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1]);
 80017c2:	e78e      	b.n	80016e2 <TSK_MediumFrequencyTaskM1+0xae>
                  FOC_Clear(M1);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fe45 	bl	8001454 <FOC_Clear>
                  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[M1]);
 80017ca:	6830      	ldr	r0, [r6, #0]
 80017cc:	f002 fdfc 	bl	80043c8 <MPM_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80017d0:	2300      	movs	r3, #0
 80017d2:	8323      	strh	r3, [r4, #24]
 80017d4:	e744      	b.n	8001660 <TSK_MediumFrequencyTaskM1+0x2c>
 80017d6:	bf00      	nop
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	20000420 	.word	0x20000420
 80017e0:	20000540 	.word	0x20000540
 80017e4:	200005a8 	.word	0x200005a8
 80017e8:	2000042c 	.word	0x2000042c

080017ec <MC_Scheduler>:
{
 80017ec:	b538      	push	{r3, r4, r5, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MC_Scheduler+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d000      	beq.n	80017f8 <MC_Scheduler+0xc>
}
 80017f6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80017f8:	4d0e      	ldr	r5, [pc, #56]	; (8001834 <MC_Scheduler+0x48>)
 80017fa:	b2dc      	uxtb	r4, r3
 80017fc:	882b      	ldrh	r3, [r5, #0]
 80017fe:	b19b      	cbz	r3, 8001828 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001800:	3b01      	subs	r3, #1
 8001802:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <MC_Scheduler+0x4c>)
 8001806:	8813      	ldrh	r3, [r2, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	b11b      	cbz	r3, 8001814 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 800180c:	8813      	ldrh	r3, [r2, #0]
 800180e:	3b01      	subs	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <MC_Scheduler+0x50>)
 8001816:	8813      	ldrh	r3, [r2, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0eb      	beq.n	80017f6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800181e:	8813      	ldrh	r3, [r2, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	8013      	strh	r3, [r2, #0]
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001828:	f7ff ff04 	bl	8001634 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 800182c:	802c      	strh	r4, [r5, #0]
 800182e:	e7e9      	b.n	8001804 <MC_Scheduler+0x18>
 8001830:	2000059a 	.word	0x2000059a
 8001834:	2000059e 	.word	0x2000059e
 8001838:	2000059c 	.word	0x2000059c
 800183c:	200005a0 	.word	0x200005a0

08001840 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)HALL_CalcElAngle(&HALL_M1);
 8001844:	4830      	ldr	r0, [pc, #192]	; (8001908 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001846:	4f31      	ldr	r7, [pc, #196]	; (800190c <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001848:	4c31      	ldr	r4, [pc, #196]	; (8001910 <TSK_HighFrequencyTask+0xd0>)
{
 800184a:	b086      	sub	sp, #24
  (void)HALL_CalcElAngle(&HALL_M1);
 800184c:	f002 faf2 	bl	8003e34 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <TSK_HighFrequencyTask+0xd4>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f003 fcae 	bl	80051b4 <STC_GetSpeedSensor>
 8001858:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800185a:	f003 fc53 	bl	8005104 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800185e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001860:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f000 f97e 	bl	8001b64 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001868:	9803      	ldr	r0, [sp, #12]
 800186a:	f7ff fcdf 	bl	800122c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800186e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001870:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001872:	f7ff fd51 	bl	8001318 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001876:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800187a:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800187c:	b203      	sxth	r3, r0
 800187e:	1ac9      	subs	r1, r1, r3
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <TSK_HighFrequencyTask+0xd8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f002 fdd6 	bl	8004434 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001888:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800188c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001890:	1ac9      	subs	r1, r1, r3
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001894:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f002 fdcc 	bl	8004434 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <TSK_HighFrequencyTask+0xe0>)
 800189e:	f8ad 8008 	strh.w	r8, [sp, #8]
 80018a2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80018a6:	9902      	ldr	r1, [sp, #8]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	f002 f95d 	bl	8003b68 <Circle_Limitation>
 80018ae:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80018b0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80018b2:	fa0f f883 	sxth.w	r8, r3
 80018b6:	141d      	asrs	r5, r3, #16
 80018b8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80018ba:	f003 fc2b 	bl	8005114 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80018be:	4631      	mov	r1, r6
 80018c0:	9802      	ldr	r0, [sp, #8]
 80018c2:	f7ff fd6d 	bl	80013a0 <MCM_Rev_Park>
 80018c6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80018c8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80018ca:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80018cc:	f000 f94c 	bl	8001b68 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80018d0:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80018d2:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80018d4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80018d6:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80018d8:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80018da:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80018dc:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 80018e0:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 80018e2:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80018e4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80018e6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80018e8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80018ec:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80018ee:	d003      	beq.n	80018f8 <TSK_HighFrequencyTask+0xb8>
}
 80018f0:	2000      	movs	r0, #0
 80018f2:	b006      	add	sp, #24
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_FOC_DURATION, 0);
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <TSK_HighFrequencyTask+0xe4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f7ff fc10 	bl	8001120 <MCI_FaultProcessing>
}
 8001900:	2000      	movs	r0, #0
 8001902:	b006      	add	sp, #24
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	200000dc 	.word	0x200000dc
 800190c:	200005a8 	.word	0x200005a8
 8001910:	20000574 	.word	0x20000574
 8001914:	2000042c 	.word	0x2000042c
 8001918:	20000428 	.word	0x20000428
 800191c:	20000424 	.word	0x20000424
 8001920:	200005a4 	.word	0x200005a4
 8001924:	20000540 	.word	0x20000540

08001928 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001928:	b570      	push	{r4, r5, r6, lr}
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
#ifdef NTC_SENSOR
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
#endif
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800192a:	4e17      	ldr	r6, [pc, #92]	; (8001988 <TSK_SafetyTask_PWMOFF+0x60>)
{
 800192c:	b082      	sub	sp, #8
 800192e:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001930:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001934:	f000 fa90 	bl	8001e58 <PWMC_CheckOverCurrent>
 8001938:	4605      	mov	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 800193a:	b174      	cbz	r4, 800195a <TSK_SafetyTask_PWMOFF+0x32>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800193c:	4813      	ldr	r0, [pc, #76]	; (800198c <TSK_SafetyTask_PWMOFF+0x64>)
 800193e:	43ea      	mvns	r2, r5
 8001940:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8001944:	b292      	uxth	r2, r2
 8001946:	4629      	mov	r1, r5
 8001948:	9001      	str	r0, [sp, #4]
 800194a:	f7ff fbe9 	bl	8001120 <MCI_FaultProcessing>
  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 800194e:	9801      	ldr	r0, [sp, #4]
 8001950:	f7ff fc66 	bl	8001220 <MCI_GetFaultState>
 8001954:	b948      	cbnz	r0, 800196a <TSK_SafetyTask_PWMOFF+0x42>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001956:	b002      	add	sp, #8
 8001958:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <TSK_SafetyTask_PWMOFF+0x68>)
 800195c:	f003 fb96 	bl	800508c <RVBS_CalcAvVbus>
 8001960:	f000 000e 	and.w	r0, r0, #14
 8001964:	4305      	orrs	r5, r0
 8001966:	b2ad      	uxth	r5, r5
 8001968:	e7e8      	b.n	800193c <TSK_SafetyTask_PWMOFF+0x14>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800196a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800196e:	f000 fa45 	bl	8001dfc <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fd6e 	bl	8001454 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <TSK_SafetyTask_PWMOFF+0x6c>)
 800197a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800197e:	b002      	add	sp, #8
 8001980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001984:	f002 bd20 	b.w	80043c8 <MPM_Clear>
 8001988:	200005a8 	.word	0x200005a8
 800198c:	20000540 	.word	0x20000540
 8001990:	20000000 	.word	0x20000000
 8001994:	20000420 	.word	0x20000420

08001998 <TSK_SafetyTask>:
{
 8001998:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <TSK_SafetyTask+0x1c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d000      	beq.n	80019a4 <TSK_SafetyTask+0xc>
}
 80019a2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ffbf 	bl	8001928 <TSK_SafetyTask_PWMOFF>
}
 80019aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80019ae:	f000 bb6b 	b.w	8002088 <RCM_ExecUserConv>
 80019b2:	bf00      	nop
 80019b4:	2000059a 	.word	0x2000059a

080019b8 <MC_RunMotorControlTasks>:
{
 80019b8:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <MC_RunMotorControlTasks+0x14>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b903      	cbnz	r3, 80019c2 <MC_RunMotorControlTasks+0xa>
}
 80019c0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80019c2:	f7ff ff13 	bl	80017ec <MC_Scheduler>
    TSK_SafetyTask();
 80019c6:	f7ff ffe7 	bl	8001998 <TSK_SafetyTask>
}
 80019ca:	bd08      	pop	{r3, pc}
 80019cc:	2000059a 	.word	0x2000059a

080019d0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80019d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <TSK_HardwareFaultTask+0x18>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	f002 ff7f 	bl	80048d8 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80019da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <TSK_HardwareFaultTask+0x1c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	f7ff bb9c 	b.w	8001120 <MCI_FaultProcessing>
 80019e8:	200005a8 	.word	0x200005a8
 80019ec:	20000540 	.word	0x20000540

080019f0 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80019f0:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80019f2:	f7ff fb3b 	bl	800106c <MC_GetSTMStateMotor1>
 80019f6:	b918      	cbnz	r0, 8001a00 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80019f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80019fc:	f7ff bb22 	b.w	8001044 <MC_StartMotor1>
}
 8001a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001a04:	f7ff bb24 	b.w	8001050 <MC_StopMotor1>

08001a08 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001a08:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <mc_lock_pins+0xfc>)
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <mc_lock_pins+0x100>)
 8001a0e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a10:	2108      	movs	r1, #8
 8001a12:	b091      	sub	sp, #68	; 0x44
 8001a14:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a16:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a18:	69d3      	ldr	r3, [r2, #28]
 8001a1a:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a1c:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a20:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 8001a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a26:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a28:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a2a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a2c:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <mc_lock_pins+0x104>)
  temp = READ_REG(GPIOx->LCKR);
 8001a30:	910e      	str	r1, [sp, #56]	; 0x38
  (void) temp;
 8001a32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a34:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a38:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a3e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a40:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a42:	69d9      	ldr	r1, [r3, #28]
 8001a44:	910d      	str	r1, [sp, #52]	; 0x34
  (void) temp;
 8001a46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a48:	4931      	ldr	r1, [pc, #196]	; (8001b10 <mc_lock_pins+0x108>)
 8001a4a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a4c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001a50:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a52:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a54:	69d9      	ldr	r1, [r3, #28]
 8001a56:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8001a58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a5a:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a5e:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a62:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a64:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a66:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a68:	69d9      	ldr	r1, [r3, #28]
 8001a6a:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 8001a6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a6e:	4929      	ldr	r1, [pc, #164]	; (8001b14 <mc_lock_pins+0x10c>)
 8001a70:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a76:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a78:	69d9      	ldr	r1, [r3, #28]
 8001a7a:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 8001a7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a82:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a84:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a86:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a88:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a8a:	69d6      	ldr	r6, [r2, #28]
 8001a8c:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 8001a8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a90:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a92:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a94:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a96:	69d8      	ldr	r0, [r3, #28]
 8001a98:	9008      	str	r0, [sp, #32]
  (void) temp;
 8001a9a:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <mc_lock_pins+0x110>)
 8001a9e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aa0:	2502      	movs	r5, #2
 8001aa2:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa4:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001aa6:	69d2      	ldr	r2, [r2, #28]
 8001aa8:	9207      	str	r2, [sp, #28]
  (void) temp;
 8001aaa:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <mc_lock_pins+0x114>)
 8001aae:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ab0:	2680      	movs	r6, #128	; 0x80
 8001ab2:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ab4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	9206      	str	r2, [sp, #24]
  (void) temp;
 8001aba:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001abc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001abe:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	9205      	str	r2, [sp, #20]
  (void) temp;
 8001ac6:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aca:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001acc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	9304      	str	r3, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <mc_lock_pins+0x118>)
  (void) temp;
 8001ad4:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ad8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ada:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ae0:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <mc_lock_pins+0x11c>)
  (void) temp;
 8001ae4:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ae6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ae8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aea:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001af0:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001af2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001af4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001af6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001afc:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001afe:	b011      	add	sp, #68	; 0x44
 8001b00:	bc70      	pop	{r4, r5, r6}
 8001b02:	4770      	bx	lr
 8001b04:	40020400 	.word	0x40020400
 8001b08:	00010008 	.word	0x00010008
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	00010100 	.word	0x00010100
 8001b14:	00010040 	.word	0x00010040
 8001b18:	00010002 	.word	0x00010002
 8001b1c:	00010080 	.word	0x00010080
 8001b20:	40020800 	.word	0x40020800
 8001b24:	00010004 	.word	0x00010004

08001b28 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001b28:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001b2a:	f001 fb4f 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_MotorControl_Init+0x30>)
 8001b30:	fba3 3000 	umull	r3, r0, r3, r0
 8001b34:	09c0      	lsrs	r0, r0, #7
 8001b36:	f000 ff77 	bl	8002a28 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_MotorControl_Init+0x34>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 ff24 	bl	8002990 <HAL_NVIC_SetPriority>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_MotorControl_Init+0x38>)
 8001b4a:	f7ff fcbd 	bl	80014c8 <MCboot>
  mc_lock_pins();

}
 8001b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001b52:	f7ff bf59 	b.w	8001a08 <mc_lock_pins>
 8001b56:	bf00      	nop
 8001b58:	10624dd3 	.word	0x10624dd3
 8001b5c:	2000043c 	.word	0x2000043c
 8001b60:	200005ac 	.word	0x200005ac

08001b64 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001b64:	6843      	ldr	r3, [r0, #4]
 8001b66:	4718      	bx	r3

08001b68 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8001b68:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001b6a:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001b6e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
{
 8001b72:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001b74:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8001b78:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001b7a:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001b7e:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001b80:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001b84:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8001b88:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001b8c:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001b90:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001b94:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001b9c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001ba0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001ba4:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 8001ba8:	f2c0 8088 	blt.w	8001cbc <PWMC_SetPhaseVoltage+0x154>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8001bac:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001bb0:	db59      	blt.n	8001c66 <PWMC_SetPhaseVoltage+0xfe>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001bb2:	ebbe 0e02 	subs.w	lr, lr, r2
 8001bb6:	bf44      	itt	mi
 8001bb8:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001bbc:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001bc0:	2900      	cmp	r1, #0
 8001bc2:	bfbc      	itt	lt
 8001bc4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001bc8:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfb8      	it	lt
 8001bd0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001bd4:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001bd8:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001bdc:	bfb8      	it	lt
 8001bde:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8001be2:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 8001be6:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001bea:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 8001bee:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001bf2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001bf6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhC;
 8001bfa:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8001bfe:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8001c02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001c06:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001c0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	b289      	uxth	r1, r1
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001c16:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001c1a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001c1e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (1U == pHandle->DTTest)
 8001c22:	d11b      	bne.n	8001c5c <PWMC_SetPhaseVoltage+0xf4>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8001c24:	f9b0 4054 	ldrsh.w	r4, [r0, #84]	; 0x54
 8001c28:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001c2a:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 8001c2e:	bfcc      	ite	gt
 8001c30:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8001c32:	1b12      	suble	r2, r2, r4
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
      }

      if (pHandle->Ib > 0)
 8001c3a:	f9b0 2056 	ldrsh.w	r2, [r0, #86]	; 0x56
 8001c3e:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8001c40:	f9b0 2058 	ldrsh.w	r2, [r0, #88]	; 0x58
        pHandle->CntPhB += pHandle->DTCompCnt;
 8001c44:	bfcc      	ite	gt
 8001c46:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8001c48:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8001c4a:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8001c4c:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8001c4e:	bfcc      	ite	gt
 8001c50:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8001c52:	1b1b      	suble	r3, r3, r4
 8001c54:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
 8001c58:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001c5c:	6983      	ldr	r3, [r0, #24]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8001c5e:	b002      	add	sp, #8
 8001c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001c64:	4718      	bx	r3
        if ( wX <= 0 )
 8001c66:	f1bc 0f00 	cmp.w	ip, #0
 8001c6a:	dd4f      	ble.n	8001d0c <PWMC_SetPhaseVoltage+0x1a4>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001c6c:	ebbc 0e02 	subs.w	lr, ip, r2
 8001c70:	bf44      	itt	mi
 8001c72:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001c76:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	bfb8      	it	lt
 8001c7e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8001c82:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8001c86:	bfb8      	it	lt
 8001c88:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8001c8c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001c90:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8001c92:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001c96:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001c9a:	bfb8      	it	lt
 8001c9c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8001ca0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001ca4:	bfb8      	it	lt
 8001ca6:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001caa:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8001cae:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 8001cb2:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhC;
 8001cb6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8001cba:	e7a0      	b.n	8001bfe <PWMC_SetPhaseVoltage+0x96>
      if (wZ < 0)
 8001cbc:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001cc0:	db75      	blt.n	8001dae <PWMC_SetPhaseVoltage+0x246>
        if (wX <= 0)
 8001cc2:	f1bc 0f00 	cmp.w	ip, #0
 8001cc6:	dd4a      	ble.n	8001d5e <PWMC_SetPhaseVoltage+0x1f6>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001cc8:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001ccc:	bf48      	it	mi
 8001cce:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8001cd2:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001cd6:	bf48      	it	mi
 8001cd8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bfb8      	it	lt
 8001ce0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8001ce4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001ce8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001cec:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8001cf0:	bfb8      	it	lt
 8001cf2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8001cf6:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001cfa:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8001cfe:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 8001d02:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 8001d06:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 8001d0a:	e778      	b.n	8001bfe <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001d0c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001d10:	bf44      	itt	mi
 8001d12:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001d16:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bfb8      	it	lt
 8001d1e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8001d22:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8001d26:	bfb8      	it	lt
 8001d28:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 8001d2c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhB = wTimePhC + (wX / 131072);
 8001d30:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001d34:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001d38:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001d3c:	bfb8      	it	lt
 8001d3e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8001d42:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001d46:	bfb8      	it	lt
 8001d48:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8001d4c:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8001d50:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 8001d54:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhB;
 8001d58:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8001d5c:	e74f      	b.n	8001bfe <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001d5e:	ebbc 0e02 	subs.w	lr, ip, r2
 8001d62:	bf44      	itt	mi
 8001d64:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001d68:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	bfb8      	it	lt
 8001d70:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8001d74:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8001d78:	bfb8      	it	lt
 8001d7a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 8001d7e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001d82:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8001d84:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001d88:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001d8c:	bfb8      	it	lt
 8001d8e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8001d92:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001d96:	bfb8      	it	lt
 8001d98:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001d9c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8001da0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 8001da4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 8001da8:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 8001dac:	e727      	b.n	8001bfe <PWMC_SetPhaseVoltage+0x96>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001dae:	ebbe 0e02 	subs.w	lr, lr, r2
 8001db2:	bf44      	itt	mi
 8001db4:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001db8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001dbc:	2900      	cmp	r1, #0
 8001dbe:	bfbc      	itt	lt
 8001dc0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001dc4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001dd0:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001dd4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001dd8:	bfb8      	it	lt
 8001dda:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8001dde:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 8001de2:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001de6:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 8001dea:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8001dee:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001df2:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhB;
 8001df6:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8001dfa:	e700      	b.n	8001bfe <PWMC_SetPhaseVoltage+0x96>

08001dfc <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8001dfc:	6883      	ldr	r3, [r0, #8]
 8001dfe:	4718      	bx	r3

08001e00 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8001e00:	68c3      	ldr	r3, [r0, #12]
 8001e02:	4718      	bx	r3

08001e04 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4604      	mov	r4, r0
 8001e08:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8001e0a:	b199      	cbz	r1, 8001e34 <PWMC_CurrentReadingCalibr+0x30>
      {
        pHandle->pFctCurrReadingCalib(pHandle);
        retVal = true;
      }
    }
    else if (CRC_EXEC == action)
 8001e0c:	2901      	cmp	r1, #1
 8001e0e:	d002      	beq.n	8001e16 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8001e10:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8001e12:	b002      	add	sp, #8
 8001e14:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8001e16:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001e1a:	b1cb      	cbz	r3, 8001e50 <PWMC_CurrentReadingCalibr+0x4c>
        pHandle->OffCalibrWaitTimeCounter--;
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	9101      	str	r1, [sp, #4]
 8001e22:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f2      	bne.n	8001e10 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8001e2a:	6903      	ldr	r3, [r0, #16]
 8001e2c:	4798      	blx	r3
          retVal = true;
 8001e2e:	9901      	ldr	r1, [sp, #4]
 8001e30:	4608      	mov	r0, r1
 8001e32:	e7ee      	b.n	8001e12 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8001e34:	f7ff ffe2 	bl	8001dfc <PWMC_SwitchOffPWM>
      pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8001e38:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8001e3c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if (0U == pHandle->OffCalibrWaitTicks)
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e5      	bne.n	8001e10 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib(pHandle);
 8001e44:	4620      	mov	r0, r4
 8001e46:	6923      	ldr	r3, [r4, #16]
 8001e48:	4798      	blx	r3
        retVal = true;
 8001e4a:	2001      	movs	r0, #1
}
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd10      	pop	{r4, pc}
        retVal = true;
 8001e50:	4608      	mov	r0, r1
}
 8001e52:	b002      	add	sp, #8
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	bf00      	nop

08001e58 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8001e58:	69c3      	ldr	r3, [r0, #28]
 8001e5a:	4718      	bx	r3

08001e5c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001e5c:	4b6b      	ldr	r3, [pc, #428]	; (800200c <RCM_RegisterRegConv+0x1b0>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d02f      	beq.n	8001ec8 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001e68:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001e6c:	7910      	ldrb	r0, [r2, #4]
 8001e6e:	4584      	cmp	ip, r0
 8001e70:	d01d      	beq.n	8001eae <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001e72:	685c      	ldr	r4, [r3, #4]
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	f000 80ac 	beq.w	8001fd2 <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001e7a:	7922      	ldrb	r2, [r4, #4]
 8001e7c:	4562      	cmp	r2, ip
  uint8_t handle = 255U;
 8001e7e:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001e82:	d02b      	beq.n	8001edc <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001e84:	689c      	ldr	r4, [r3, #8]
 8001e86:	2c00      	cmp	r4, #0
 8001e88:	f000 808f 	beq.w	8001faa <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001e8c:	7922      	ldrb	r2, [r4, #4]
 8001e8e:	4562      	cmp	r2, ip
 8001e90:	d02a      	beq.n	8001ee8 <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001e92:	68dc      	ldr	r4, [r3, #12]
 8001e94:	2c00      	cmp	r4, #0
 8001e96:	f000 8091 	beq.w	8001fbc <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001e9a:	7922      	ldrb	r2, [r4, #4]
 8001e9c:	4562      	cmp	r2, ip
 8001e9e:	f000 8092 	beq.w	8001fc6 <RCM_RegisterRegConv+0x16a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8001ea2:	2803      	cmp	r0, #3
 8001ea4:	bf88      	it	hi
 8001ea6:	20ff      	movhi	r0, #255	; 0xff
 8001ea8:	f240 80a1 	bls.w	8001fee <RCM_RegisterRegConv+0x192>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8001eae:	6810      	ldr	r0, [r2, #0]
 8001eb0:	680a      	ldr	r2, [r1, #0]
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d01e      	beq.n	8001ef4 <RCM_RegisterRegConv+0x98>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001eb6:	685c      	ldr	r4, [r3, #4]
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d1de      	bne.n	8001e7a <RCM_RegisterRegConv+0x1e>
 8001ebc:	689c      	ldr	r4, [r3, #8]
 8001ebe:	2c00      	cmp	r4, #0
 8001ec0:	f000 809a 	beq.w	8001ff8 <RCM_RegisterRegConv+0x19c>
      i++;
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	e7e1      	b.n	8001e8c <RCM_RegisterRegConv+0x30>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001ec8:	685c      	ldr	r4, [r3, #4]
 8001eca:	2c00      	cmp	r4, #0
 8001ecc:	f000 808d 	beq.w	8001fea <RCM_RegisterRegConv+0x18e>
 8001ed0:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8001ed4:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001ed6:	7922      	ldrb	r2, [r4, #4]
 8001ed8:	4562      	cmp	r2, ip
 8001eda:	d1d3      	bne.n	8001e84 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8001edc:	6824      	ldr	r4, [r4, #0]
 8001ede:	680a      	ldr	r2, [r1, #0]
 8001ee0:	4294      	cmp	r4, r2
 8001ee2:	d1cf      	bne.n	8001e84 <RCM_RegisterRegConv+0x28>
      i++;
 8001ee4:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 8001ee6:	e006      	b.n	8001ef6 <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8001ee8:	6824      	ldr	r4, [r4, #0]
 8001eea:	680a      	ldr	r2, [r1, #0]
 8001eec:	4294      	cmp	r4, r2
 8001eee:	d1d0      	bne.n	8001e92 <RCM_RegisterRegConv+0x36>
      i++;
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	e000      	b.n	8001ef6 <RCM_RegisterRegConv+0x9a>
    uint8_t i = 0;
 8001ef4:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8001ef6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001efa:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001efc:	4c44      	ldr	r4, [pc, #272]	; (8002010 <RCM_RegisterRegConv+0x1b4>)
 8001efe:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8001f00:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001f02:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8001f06:	d411      	bmi.n	8001f2c <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001f08:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001f0a:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001f0e:	f023 0320 	bic.w	r3, r3, #32
 8001f12:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001f14:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001f16:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001f18:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f20:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001f22:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001f24:	6893      	ldr	r3, [r2, #8]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001f2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f32:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8001f34:	790b      	ldrb	r3, [r1, #4]
 8001f36:	2b09      	cmp	r3, #9
 8001f38:	d82d      	bhi.n	8001f96 <RCM_RegisterRegConv+0x13a>
 8001f3a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001f3e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f46:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001f4e:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001f52:	fab4 f484 	clz	r4, r4
 8001f56:	fa2e fe04 	lsr.w	lr, lr, r4
 8001f5a:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8001f5c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001f60:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8001f64:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8001f68:	fa9c f5ac 	rbit	r5, ip
 8001f6c:	fab5 f585 	clz	r5, r5
 8001f70:	fa9c fcac 	rbit	ip, ip
 8001f74:	688e      	ldr	r6, [r1, #8]
 8001f76:	fabc fc8c 	clz	ip, ip
 8001f7a:	fa23 f105 	lsr.w	r1, r3, r5
 8001f7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8001f82:	fa06 f503 	lsl.w	r5, r6, r3
 8001f86:	2307      	movs	r3, #7
 8001f88:	408b      	lsls	r3, r1
 8001f8a:	ea24 0303 	bic.w	r3, r4, r3
 8001f8e:	432b      	orrs	r3, r5
 8001f90:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8001f96:	2403      	movs	r4, #3
 8001f98:	f06f 051d 	mvn.w	r5, #29
 8001f9c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8001fa0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001fa4:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8001fa8:	e7cf      	b.n	8001f4a <RCM_RegisterRegConv+0xee>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001faa:	2804      	cmp	r0, #4
 8001fac:	d917      	bls.n	8001fde <RCM_RegisterRegConv+0x182>
 8001fae:	68dc      	ldr	r4, [r3, #12]
 8001fb0:	b114      	cbz	r4, 8001fb8 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8001fb2:	7922      	ldrb	r2, [r4, #4]
 8001fb4:	4594      	cmp	ip, r2
 8001fb6:	d01c      	beq.n	8001ff2 <RCM_RegisterRegConv+0x196>
 8001fb8:	680a      	ldr	r2, [r1, #0]
 8001fba:	e799      	b.n	8001ef0 <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001fbc:	2804      	cmp	r0, #4
 8001fbe:	680a      	ldr	r2, [r1, #0]
 8001fc0:	d999      	bls.n	8001ef6 <RCM_RegisterRegConv+0x9a>
      i++;
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	e797      	b.n	8001ef6 <RCM_RegisterRegConv+0x9a>
 8001fc6:	680a      	ldr	r2, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8001fc8:	6824      	ldr	r4, [r4, #0]
 8001fca:	4294      	cmp	r4, r2
 8001fcc:	f47f af69 	bne.w	8001ea2 <RCM_RegisterRegConv+0x46>
 8001fd0:	e7f7      	b.n	8001fc2 <RCM_RegisterRegConv+0x166>
      i++;
 8001fd2:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001fd4:	689c      	ldr	r4, [r3, #8]
 8001fd6:	b11c      	cbz	r4, 8001fe0 <RCM_RegisterRegConv+0x184>
 8001fd8:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001fdc:	e756      	b.n	8001e8c <RCM_RegisterRegConv+0x30>
 8001fde:	4620      	mov	r0, r4
 8001fe0:	68dc      	ldr	r4, [r3, #12]
 8001fe2:	b124      	cbz	r4, 8001fee <RCM_RegisterRegConv+0x192>
 8001fe4:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001fe8:	e757      	b.n	8001e9a <RCM_RegisterRegConv+0x3e>
    uint8_t i = 0;
 8001fea:	4620      	mov	r0, r4
 8001fec:	e7f2      	b.n	8001fd4 <RCM_RegisterRegConv+0x178>
 8001fee:	680a      	ldr	r2, [r1, #0]
 8001ff0:	e781      	b.n	8001ef6 <RCM_RegisterRegConv+0x9a>
 8001ff2:	680a      	ldr	r2, [r1, #0]
      i++;
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	e7e7      	b.n	8001fc8 <RCM_RegisterRegConv+0x16c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8001ff8:	68dc      	ldr	r4, [r3, #12]
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	f43f af72 	beq.w	8001ee4 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002000:	7920      	ldrb	r0, [r4, #4]
 8002002:	4560      	cmp	r0, ip
 8002004:	f47f af6e 	bne.w	8001ee4 <RCM_RegisterRegConv+0x88>
      i++;
 8002008:	2001      	movs	r0, #1
 800200a:	e7dd      	b.n	8001fc8 <RCM_RegisterRegConv+0x16c>
 800200c:	200005d4 	.word	0x200005d4
 8002010:	200005b0 	.word	0x200005b0

08002014 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <RCM_ExecRegularConv+0x70>)
 8002016:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800201a:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	2b09      	cmp	r3, #9
 8002020:	d827      	bhi.n	8002072 <RCM_ExecRegularConv+0x5e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002022:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002026:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800202a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002032:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002036:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800203a:	fab1 f181 	clz	r1, r1
 800203e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8002042:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 800204e:	f021 011f 	bic.w	r1, r1, #31
 8002052:	430b      	orrs	r3, r1

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8002054:	0151      	lsls	r1, r2, #5
 8002056:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 800205a:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800205e:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002060:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002062:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002066:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 8002068:	079b      	lsls	r3, r3, #30
 800206a:	d5fc      	bpl.n	8002066 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800206c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 800206e:	b280      	uxth	r0, r0
 8002070:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002072:	2103      	movs	r1, #3
 8002074:	f06f 001d 	mvn.w	r0, #29
 8002078:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800207c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002080:	e7d5      	b.n	800202e <RCM_ExecRegularConv+0x1a>
 8002082:	bf00      	nop
 8002084:	200005d4 	.word	0x200005d4

08002088 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8002088:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800208a:	4c0f      	ldr	r4, [pc, #60]	; (80020c8 <RCM_ExecUserConv+0x40>)
 800208c:	7823      	ldrb	r3, [r4, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d000      	beq.n	8002094 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8002092:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <RCM_ExecUserConv+0x44>)
 8002096:	781d      	ldrb	r5, [r3, #0]
 8002098:	4628      	mov	r0, r5
 800209a:	f7ff ffbb 	bl	8002014 <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80020a2:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80020a6:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80020a8:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80020aa:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 80020ac:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80020ae:	2e00      	cmp	r6, #0
 80020b0:	d0ef      	beq.n	8002092 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80020b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80020b6:	4628      	mov	r0, r5
 80020b8:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80020be:	4633      	mov	r3, r6
}
 80020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80020c4:	4718      	bx	r3
 80020c6:	bf00      	nop
 80020c8:	200005d1 	.word	0x200005d1
 80020cc:	200005d0 	.word	0x200005d0
 80020d0:	200005b0 	.word	0x200005b0
 80020d4:	200005d2 	.word	0x200005d2

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_MspInit+0x38>)
 80020dc:	2100      	movs	r1, #0
 80020de:	9100      	str	r1, [sp, #0]
 80020e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
 80020e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	9101      	str	r1, [sp, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002106:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002108:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800210a:	f000 bc2f 	b.w	800296c <HAL_NVIC_SetPriorityGrouping>
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_ADC_MspInit+0x84>)
 8002118:	6802      	ldr	r2, [r0, #0]
{
 800211a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800211e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002124:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002128:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800212a:	d001      	beq.n	8002130 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800212c:	b00a      	add	sp, #40	; 0x28
 800212e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002130:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002134:	9401      	str	r4, [sp, #4]
 8002136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	4818      	ldr	r0, [pc, #96]	; (800219c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
 8002140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002142:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	9402      	str	r4, [sp, #8]
 800214c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214e:	f042 0204 	orr.w	r2, r2, #4
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
 8002154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002156:	f002 0204 	and.w	r2, r2, #4
 800215a:	9202      	str	r2, [sp, #8]
 800215c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	9403      	str	r4, [sp, #12]
 8002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002172:	2207      	movs	r2, #7
 8002174:	2303      	movs	r3, #3
 8002176:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f000 fc74 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002180:	2203      	movs	r2, #3
 8002182:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	4806      	ldr	r0, [pc, #24]	; (80021a0 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800218a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f000 fc6b 	bl	8002a68 <HAL_GPIO_Init>
}
 8002192:	b00a      	add	sp, #40	; 0x28
 8002194:	bd10      	pop	{r4, pc}
 8002196:	bf00      	nop
 8002198:	40012000 	.word	0x40012000
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	00000000 	.word	0x00000000

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80021aa:	6802      	ldr	r2, [r0, #0]
 80021ac:	4938      	ldr	r1, [pc, #224]	; (8002290 <HAL_TIM_Base_MspInit+0xe8>)
{
 80021ae:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80021b2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80021b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80021bc:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 80021be:	d004      	beq.n	80021ca <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80021c0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80021c4:	d021      	beq.n	800220a <HAL_TIM_Base_MspInit+0x62>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021c6:	b00c      	add	sp, #48	; 0x30
 80021c8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ca:	4a32      	ldr	r2, [pc, #200]	; (8002294 <HAL_TIM_Base_MspInit+0xec>)
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80021d0:	f040 0001 	orr.w	r0, r0, #1
 80021d4:	6450      	str	r0, [r2, #68]	; 0x44
 80021d6:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80021d8:	f000 0001 	and.w	r0, r0, #1
 80021dc:	9001      	str	r0, [sp, #4]
 80021de:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80021e4:	482c      	ldr	r0, [pc, #176]	; (8002298 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e6:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4323      	orrs	r3, r4
 80021ea:	6313      	str	r3, [r2, #48]	; 0x30
 80021ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ee:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80021f0:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8002288 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4023      	ands	r3, r4
 80021f6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80021f8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80021fa:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002200:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002202:	f000 fc31 	bl	8002a68 <HAL_GPIO_Init>
}
 8002206:	b00c      	add	sp, #48	; 0x30
 8002208:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800220e:	9303      	str	r3, [sp, #12]
 8002210:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	4822      	ldr	r0, [pc, #136]	; (800229c <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002214:	f041 0101 	orr.w	r1, r1, #1
 8002218:	6411      	str	r1, [r2, #64]	; 0x40
 800221a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800221c:	f001 0101 	and.w	r1, r1, #1
 8002220:	9103      	str	r1, [sp, #12]
 8002222:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	9304      	str	r3, [sp, #16]
 8002226:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002228:	f041 0102 	orr.w	r1, r1, #2
 800222c:	6311      	str	r1, [r2, #48]	; 0x30
 800222e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002230:	f001 0102 	and.w	r1, r1, #2
 8002234:	9104      	str	r1, [sp, #16]
 8002236:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	9305      	str	r3, [sp, #20]
 800223a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002244:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	4023      	ands	r3, r4
 8002248:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 800224a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800224e:	2302      	movs	r3, #2
 8002250:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002256:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002258:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f000 fc03 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002262:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002266:	2302      	movs	r3, #2
 8002268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002270:	2200      	movs	r2, #0
 8002272:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002274:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002276:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 800227a:	f000 fbf5 	bl	8002a68 <HAL_GPIO_Init>
}
 800227e:	b00c      	add	sp, #48	; 0x30
 8002280:	bd10      	pop	{r4, pc}
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	00000040 	.word	0x00000040
 800228c:	00000002 	.word	0x00000002
 8002290:	40010000 	.word	0x40010000
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400

080022a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022a0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80022a2:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_TIM_MspPostInit+0x9c>)
 80022a4:	6801      	ldr	r1, [r0, #0]
{
 80022a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80022aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80022b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80022b4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80022b6:	d001      	beq.n	80022bc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022b8:	b008      	add	sp, #32
 80022ba:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80022c4:	481e      	ldr	r0, [pc, #120]	; (8002340 <HAL_TIM_MspPostInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	f041 0101 	orr.w	r1, r1, #1
 80022ca:	6311      	str	r1, [r2, #48]	; 0x30
 80022cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022ce:	f001 0101 	and.w	r1, r1, #1
 80022d2:	9100      	str	r1, [sp, #0]
 80022d4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e8:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ec:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80022ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	2302      	movs	r3, #2
 80022f4:	2601      	movs	r6, #1
 80022f6:	2702      	movs	r7, #2
 80022f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002300:	f000 fbb2 	bl	8002a68 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002306:	2203      	movs	r2, #3
 8002308:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	480e      	ldr	r0, [pc, #56]	; (8002344 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800230e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002312:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f000 fba7 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800231a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800231e:	2302      	movs	r3, #2
 8002320:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002326:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002328:	2202      	movs	r2, #2
 800232a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800232e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f000 fb99 	bl	8002a68 <HAL_GPIO_Init>
}
 8002336:	b008      	add	sp, #32
 8002338:	bdd0      	pop	{r4, r6, r7, pc}
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400

08002348 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <ADC_IRQHandler+0x18>)
 800234a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800234c:	0752      	lsls	r2, r2, #29
 800234e:	d400      	bmi.n	8002352 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002350:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f022 020c 	bic.w	r2, r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800235a:	f7ff ba71 	b.w	8001840 <TSK_HighFrequencyTask>
 800235e:	bf00      	nop
 8002360:	40012000 	.word	0x40012000

08002364 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002366:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800236a:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002372:	f002 bce5 	b.w	8004d40 <R3_1_TIMx_UP_IRQHandler>
 8002376:	bf00      	nop
 8002378:	2000033c 	.word	0x2000033c

0800237c <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800237c:	4808      	ldr	r0, [pc, #32]	; (80023a0 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 800237e:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002380:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8002384:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	0612      	lsls	r2, r2, #24
 800238a:	d504      	bpl.n	8002396 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002390:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8002392:	f002 fcf7 	bl	8004d84 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800239a:	f7ff ba27 	b.w	80017ec <MC_Scheduler>
 800239e:	bf00      	nop
 80023a0:	2000033c 	.word	0x2000033c

080023a4 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80023a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80023a6:	4c0c      	ldr	r4, [pc, #48]	; (80023d8 <TIM2_IRQHandler+0x34>)
 80023a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	07d1      	lsls	r1, r2, #31
 80023ae:	d40b      	bmi.n	80023c8 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	0792      	lsls	r2, r2, #30
 80023b4:	d507      	bpl.n	80023c6 <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80023b6:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80023ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <TIM2_IRQHandler+0x34>)
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	f001 bd9f 	b.w	8003f04 <HALL_TIMx_CC_IRQHandler>
}
 80023c6:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80023c8:	f06f 0201 	mvn.w	r2, #1
 80023cc:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80023ce:	4620      	mov	r0, r4
 80023d0:	f001 ff40 	bl	8004254 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80023d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023d6:	e7eb      	b.n	80023b0 <TIM2_IRQHandler+0xc>
 80023d8:	200000dc 	.word	0x200000dc

080023dc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80023dc:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80023de:	f7ff faf7 	bl	80019d0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x6>

080023e4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80023e4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80023e6:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <SysTick_Handler+0x2c>)
 80023e8:	7823      	ldrb	r3, [r4, #0]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d006      	beq.n	80023fc <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80023f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80023f8:	f7ff bade 	b.w	80019b8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80023fc:	f000 f85e 	bl	80024bc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002400:	f000 fb2e 	bl	8002a60 <HAL_SYSTICK_IRQHandler>
 8002404:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002406:	7023      	strb	r3, [r4, #0]
}
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800240c:	f7ff bad4 	b.w	80019b8 <MC_RunMotorControlTasks>
 8002410:	20000430 	.word	0x20000430

08002414 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <EXTI15_10_IRQHandler+0x14>)
 8002416:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8002418:	0492      	lsls	r2, r2, #18
 800241a:	d400      	bmi.n	800241e <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 800241c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800241e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002422:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002424:	f7ff bae4 	b.w	80019f0 <UI_HandleStartStopButton_cb>
 8002428:	40013c00 	.word	0x40013c00

0800242c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <SystemInit+0x10>)
 800242e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002432:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002436:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_InitTick+0x3c>)
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_InitTick+0x40>)
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
{
 800244a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800244c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002450:	fbb0 f0f2 	udiv	r0, r0, r2
 8002454:	fbb3 f0f0 	udiv	r0, r3, r0
 8002458:	f000 fae6 	bl	8002a28 <HAL_SYSTICK_Config>
 800245c:	b908      	cbnz	r0, 8002462 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	2d0f      	cmp	r5, #15
 8002460:	d901      	bls.n	8002466 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002464:	bd38      	pop	{r3, r4, r5, pc}
 8002466:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	4602      	mov	r2, r0
 800246a:	4629      	mov	r1, r5
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 fa8e 	bl	8002990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_InitTick+0x44>)
 8002476:	4620      	mov	r0, r4
 8002478:	601d      	str	r5, [r3, #0]
}
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	20000438 	.word	0x20000438
 8002480:	20000434 	.word	0x20000434
 8002484:	2000043c 	.word	0x2000043c

08002488 <HAL_Init>:
{
 8002488:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x30>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 fa61 	bl	800296c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	2004      	movs	r0, #4
 80024ac:	f7ff ffc8 	bl	8002440 <HAL_InitTick>
  HAL_MspInit();
 80024b0:	f7ff fe12 	bl	80020d8 <HAL_MspInit>
}
 80024b4:	2000      	movs	r0, #0
 80024b6:	bd08      	pop	{r3, pc}
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_IncTick+0x10>)
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_IncTick+0x14>)
 80024c0:	6811      	ldr	r1, [r2, #0]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	440b      	add	r3, r1
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200005e4 	.word	0x200005e4
 80024d0:	20000438 	.word	0x20000438

080024d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <HAL_GetTick+0x8>)
 80024d6:	6818      	ldr	r0, [r3, #0]
}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200005e4 	.word	0x200005e4

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff fff6 	bl	80024d4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80024ea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80024ec:	d002      	beq.n	80024f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_Delay+0x20>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	1b43      	subs	r3, r0, r5
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	d3fa      	bcc.n	80024f4 <HAL_Delay+0x14>
  {
  }
}
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	20000438 	.word	0x20000438

08002504 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002504:	2800      	cmp	r0, #0
 8002506:	f000 809f 	beq.w	8002648 <HAL_ADC_Init+0x144>
{
 800250a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800250c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800250e:	4604      	mov	r4, r0
 8002510:	b13d      	cbz	r5, 8002522 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002514:	06db      	lsls	r3, r3, #27
 8002516:	d50c      	bpl.n	8002532 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002518:	2300      	movs	r3, #0
 800251a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800251e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002520:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002522:	f7ff fdf7 	bl	8002114 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002526:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002528:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800252a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800252e:	06db      	lsls	r3, r3, #27
 8002530:	d4f2      	bmi.n	8002518 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002532:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8002536:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800253a:	f023 0302 	bic.w	r3, r3, #2
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002544:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002546:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002548:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800254c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800254e:	6851      	ldr	r1, [r2, #4]
 8002550:	6860      	ldr	r0, [r4, #4]
 8002552:	4301      	orrs	r1, r0
 8002554:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002556:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002558:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800255a:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002568:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8002570:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4302      	orrs	r2, r0
 8002576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002578:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800257a:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800257c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002580:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002582:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002584:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002586:	4302      	orrs	r2, r0
 8002588:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258a:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_ADC_Init+0x158>)
 800258c:	4291      	cmp	r1, r2
 800258e:	d052      	beq.n	8002636 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002590:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002592:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002594:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8002598:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4311      	orrs	r1, r2
 800259e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80025a6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	432a      	orrs	r2, r5
 80025ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	7e21      	ldrb	r1, [r4, #24]
 80025ba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80025be:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025c0:	f894 2020 	ldrb.w	r2, [r4, #32]
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	d041      	beq.n	800264c <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c8:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80025d0:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d2:	6858      	ldr	r0, [r3, #4]
 80025d4:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80025d8:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025da:	1e51      	subs	r1, r2, #1
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80025e2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e8:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	3901      	subs	r1, #1
 80025f4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002600:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002608:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800260c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002614:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002616:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002618:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800261a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800261e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800262e:	2300      	movs	r3, #0
 8002630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002634:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e7b2      	b.n	80025ae <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8002648:	2001      	movs	r0, #1
}
 800264a:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	e7c6      	b.n	80025e4 <HAL_ADC_Init+0xe0>
 8002656:	bf00      	nop
 8002658:	40012300 	.word	0x40012300
 800265c:	0f000001 	.word	0x0f000001

08002660 <HAL_ADC_ConfigChannel>:
{
 8002660:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8002662:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002666:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002668:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800266a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800266c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800266e:	f000 809c 	beq.w	80027aa <HAL_ADC_ConfigChannel+0x14a>
 8002672:	2301      	movs	r3, #1
 8002674:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002678:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800267a:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800267c:	2c09      	cmp	r4, #9
 800267e:	d82d      	bhi.n	80026dc <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002680:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002682:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002684:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8002688:	f04f 0c07 	mov.w	ip, #7
 800268c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002690:	ea25 050c 	bic.w	r5, r5, ip
 8002694:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002696:	691d      	ldr	r5, [r3, #16]
 8002698:	fa02 f20e 	lsl.w	r2, r2, lr
 800269c:	432a      	orrs	r2, r5
 800269e:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80026a0:	684a      	ldr	r2, [r1, #4]
 80026a2:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a4:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80026a6:	d82f      	bhi.n	8002708 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80026ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ae:	3a05      	subs	r2, #5
 80026b0:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b4:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026b8:	fa0e f202 	lsl.w	r2, lr, r2
 80026bc:	ea21 0202 	bic.w	r2, r1, r2
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c4:	ea4c 0202 	orr.w	r2, ip, r2
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	4a39      	ldr	r2, [pc, #228]	; (80027b0 <HAL_ADC_ConfigChannel+0x150>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d030      	beq.n	8002732 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80026d0:	2300      	movs	r3, #0
 80026d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80026d6:	4618      	mov	r0, r3
}
 80026d8:	b003      	add	sp, #12
 80026da:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	fa1f fc84 	uxth.w	ip, r4
 80026e0:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80026e4:	68dd      	ldr	r5, [r3, #12]
 80026e6:	f1a2 0e1e 	sub.w	lr, r2, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f20e 	lsl.w	r2, r2, lr
 80026f0:	ea25 0202 	bic.w	r2, r5, r2
 80026f4:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f6:	688a      	ldr	r2, [r1, #8]
 80026f8:	68dd      	ldr	r5, [r3, #12]
 80026fa:	fa02 f20e 	lsl.w	r2, r2, lr
 80026fe:	432a      	orrs	r2, r5
 8002700:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002702:	684a      	ldr	r2, [r1, #4]
 8002704:	2a06      	cmp	r2, #6
 8002706:	d9cf      	bls.n	80026a8 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8002708:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800270a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800270e:	d836      	bhi.n	800277e <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002712:	3a23      	subs	r2, #35	; 0x23
 8002714:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002716:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800271a:	fa05 f202 	lsl.w	r2, r5, r2
 800271e:	ea21 0202 	bic.w	r2, r1, r2
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002726:	ea4c 0202 	orr.w	r2, ip, r2
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_ADC_ConfigChannel+0x150>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d1ce      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
 8002732:	2c12      	cmp	r4, #18
 8002734:	d032      	beq.n	800279c <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002736:	f1a4 0310 	sub.w	r3, r4, #16
 800273a:	2b01      	cmp	r3, #1
 800273c:	d8c8      	bhi.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_ADC_ConfigChannel+0x154>)
 8002740:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002748:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274a:	d1c1      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_ADC_ConfigChannel+0x158>)
 800274e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002758:	f202 3283 	addw	r2, r2, #899	; 0x383
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800276a:	9b01      	ldr	r3, [sp, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0af      	beq.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x110>
 800277c:	e7a8      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002780:	3a41      	subs	r2, #65	; 0x41
 8002782:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002784:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002788:	fa05 f202 	lsl.w	r2, r5, r2
 800278c:	ea21 0202 	bic.w	r2, r1, r2
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	ea4c 0202 	orr.w	r2, ip, r2
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
 800279a:	e796      	b.n	80026ca <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800279c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80027a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027a8:	e792      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80027aa:	2002      	movs	r0, #2
}
 80027ac:	b003      	add	sp, #12
 80027ae:	bd30      	pop	{r4, r5, pc}
 80027b0:	40012000 	.word	0x40012000
 80027b4:	40012300 	.word	0x40012300
 80027b8:	20000434 	.word	0x20000434

080027bc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80027c2:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f000 80c8 	beq.w	800295a <HAL_ADCEx_InjectedConfigChannel+0x19e>
 80027ca:	2301      	movs	r3, #1
 80027cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80027d0:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80027d2:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80027d4:	2d09      	cmp	r5, #9
 80027d6:	d868      	bhi.n	80028aa <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80027d8:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80027da:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80027dc:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80027e0:	2707      	movs	r7, #7
 80027e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80027e6:	ea24 0407 	bic.w	r4, r4, r7
 80027ea:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80027ec:	691c      	ldr	r4, [r3, #16]
 80027ee:	fa02 f20c 	lsl.w	r2, r2, ip
 80027f2:	4322      	orrs	r2, r4
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80027f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80027fa:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80027fe:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002800:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002806:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002808:	f10e 32ff 	add.w	r2, lr, #4294967295
 800280c:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002810:	1ce2      	adds	r2, r4, #3
 8002812:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002816:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800281c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002820:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002824:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002828:	fa0e f202 	lsl.w	r2, lr, r2
 800282c:	ea27 0202 	bic.w	r2, r7, r2
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002834:	ea4c 0202 	orr.w	r2, ip, r2
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800283a:	4a49      	ldr	r2, [pc, #292]	; (8002960 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 800283c:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002846:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002848:	d066      	beq.n	8002918 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800284a:	4316      	orrs	r6, r2
 800284c:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800284e:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002850:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002852:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	4332      	orrs	r2, r6
 800285c:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800285e:	7d4a      	ldrb	r2, [r1, #21]
 8002860:	2a00      	cmp	r2, #0
 8002862:	d034      	beq.n	80028ce <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286a:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800286c:	7d0a      	ldrb	r2, [r1, #20]
 800286e:	2a00      	cmp	r2, #0
 8002870:	d034      	beq.n	80028dc <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002872:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8002874:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800287a:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800287c:	d034      	beq.n	80028e8 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 800287e:	2c03      	cmp	r4, #3
 8002880:	d059      	beq.n	8002936 <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8002882:	2c01      	cmp	r4, #1
 8002884:	d04c      	beq.n	8002920 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002886:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002888:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800288a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800288e:	f022 020f 	bic.w	r2, r2, #15
 8002892:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	430a      	orrs	r2, r1
 8002898:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800289a:	4a32      	ldr	r2, [pc, #200]	; (8002964 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d030      	beq.n	8002902 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028a6:	4618      	mov	r0, r3
}
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80028aa:	fa1f fc85 	uxth.w	ip, r5
 80028ae:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80028b2:	f1a2 041e 	sub.w	r4, r2, #30
 80028b6:	2707      	movs	r7, #7
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	40a7      	lsls	r7, r4
 80028bc:	ea22 0207 	bic.w	r2, r2, r7
 80028c0:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80028c2:	688a      	ldr	r2, [r1, #8]
 80028c4:	40a2      	lsls	r2, r4
 80028c6:	68dc      	ldr	r4, [r3, #12]
 80028c8:	4322      	orrs	r2, r4
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	e794      	b.n	80027f8 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d4:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80028d6:	7d0a      	ldrb	r2, [r1, #20]
 80028d8:	2a00      	cmp	r2, #0
 80028da:	d1ca      	bne.n	8002872 <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80028dc:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80028de:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80028e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e4:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80028e6:	d1ca      	bne.n	800287e <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80028e8:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80028ea:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80028ec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80028f0:	f022 020f 	bic.w	r2, r2, #15
 80028f4:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d1ce      	bne.n	80028a0 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8002902:	2d12      	cmp	r5, #18
 8002904:	d022      	beq.n	800294c <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002906:	3d10      	subs	r5, #16
 8002908:	2d01      	cmp	r5, #1
 800290a:	d8c9      	bhi.n	80028a0 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800290c:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 800290e:	6853      	ldr	r3, [r2, #4]
 8002910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002914:	6053      	str	r3, [r2, #4]
 8002916:	e7c3      	b.n	80028a0 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002918:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	e79e      	b.n	800285e <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002920:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002922:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002924:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002928:	f022 020f 	bic.w	r2, r2, #15
 800292c:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]
      break;
 8002934:	e7b1      	b.n	800289a <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002936:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002938:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800293a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800293e:	f022 020f 	bic.w	r2, r2, #15
 8002942:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	430a      	orrs	r2, r1
 8002948:	61da      	str	r2, [r3, #28]
      break;
 800294a:	e7a6      	b.n	800289a <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002954:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002958:	e7a2      	b.n	80028a0 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 800295a:	2002      	movs	r0, #2
}
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	bf00      	nop
 8002960:	000f0001 	.word	0x000f0001
 8002964:	40012000 	.word	0x40012000
 8002968:	40012300 	.word	0x40012300

0800296c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4907      	ldr	r1, [pc, #28]	; (800298c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800296e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002986:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_NVIC_SetPriority+0x74>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002998:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299a:	f1c3 0e07 	rsb	lr, r3, #7
 800299e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a6:	bf28      	it	cs
 80029a8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ac:	f1bc 0f06 	cmp.w	ip, #6
 80029b0:	d91b      	bls.n	80029ea <HAL_NVIC_SetPriority+0x5a>
 80029b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 3cff 	mov.w	ip, #4294967295
 80029b8:	fa0c fc03 	lsl.w	ip, ip, r3
 80029bc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 3cff 	mov.w	ip, #4294967295
 80029c4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80029c8:	ea21 010c 	bic.w	r1, r1, ip
 80029cc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80029ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80029d4:	db0c      	blt.n	80029f0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80029da:	0109      	lsls	r1, r1, #4
 80029dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80029e0:	b2c9      	uxtb	r1, r1
 80029e2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80029e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ea:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ec:	4613      	mov	r3, r2
 80029ee:	e7e7      	b.n	80029c0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_NVIC_SetPriority+0x78>)
 80029f2:	f000 000f 	and.w	r0, r0, #15
 80029f6:	0109      	lsls	r1, r1, #4
 80029f8:	4403      	add	r3, r0
 80029fa:	b2c9      	uxtb	r1, r1
 80029fc:	7619      	strb	r1, [r3, #24]
 80029fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	e000ecfc 	.word	0xe000ecfc

08002a0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	db08      	blt.n	8002a22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a10:	0941      	lsrs	r1, r0, #5
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_NVIC_EnableIRQ+0x18>)
 8002a14:	f000 001f 	and.w	r0, r0, #31
 8002a18:	2301      	movs	r3, #1
 8002a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8002a1e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	3801      	subs	r0, #1
 8002a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a2e:	d210      	bcs.n	8002a52 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a30:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	4c08      	ldr	r4, [pc, #32]	; (8002a58 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a38:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002a3e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a42:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a44:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a46:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	6119      	str	r1, [r3, #16]
 8002a50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2001      	movs	r0, #1
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <HAL_SYSTICK_IRQHandler>:
{
 8002a60:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002a62:	f7ff fffb 	bl	8002a5c <HAL_SYSTICK_Callback>
}
 8002a66:	bd08      	pop	{r3, pc}

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a70:	4e70      	ldr	r6, [pc, #448]	; (8002c34 <HAL_GPIO_Init+0x1cc>)
{
 8002a72:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a74:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8002a76:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	3301      	adds	r3, #1
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	f102 0202 	add.w	r2, r2, #2
 8002a86:	d078      	beq.n	8002b7a <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002a88:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8c:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8002a90:	43a1      	bics	r1, r4
 8002a92:	d1f4      	bne.n	8002a7e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a94:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8002a98:	f00c 0103 	and.w	r1, ip, #3
 8002a9c:	1e4d      	subs	r5, r1, #1
 8002a9e:	2d01      	cmp	r5, #1
 8002aa0:	d96e      	bls.n	8002b80 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa2:	2903      	cmp	r1, #3
 8002aa4:	f040 80ae 	bne.w	8002c04 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	4091      	lsls	r1, r2
 8002aaa:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002aac:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab0:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab2:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ab6:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	d0e1      	beq.n	8002a7e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	4d5f      	ldr	r5, [pc, #380]	; (8002c38 <HAL_GPIO_Init+0x1d0>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	9103      	str	r1, [sp, #12]
 8002ac0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002ac2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002ac6:	6469      	str	r1, [r5, #68]	; 0x44
 8002ac8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002aca:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002ace:	9103      	str	r1, [sp, #12]
 8002ad0:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	f023 0103 	bic.w	r1, r3, #3
 8002ad6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002ada:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ade:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae6:	00bf      	lsls	r7, r7, #2
 8002ae8:	250f      	movs	r5, #15
 8002aea:	40bd      	lsls	r5, r7
 8002aec:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af0:	4d52      	ldr	r5, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x1d4>)
 8002af2:	42a8      	cmp	r0, r5
 8002af4:	d017      	beq.n	8002b26 <HAL_GPIO_Init+0xbe>
 8002af6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002afa:	42a8      	cmp	r0, r5
 8002afc:	f000 8086 	beq.w	8002c0c <HAL_GPIO_Init+0x1a4>
 8002b00:	4d4f      	ldr	r5, [pc, #316]	; (8002c40 <HAL_GPIO_Init+0x1d8>)
 8002b02:	42a8      	cmp	r0, r5
 8002b04:	f000 8087 	beq.w	8002c16 <HAL_GPIO_Init+0x1ae>
 8002b08:	4d4e      	ldr	r5, [pc, #312]	; (8002c44 <HAL_GPIO_Init+0x1dc>)
 8002b0a:	42a8      	cmp	r0, r5
 8002b0c:	f000 808a 	beq.w	8002c24 <HAL_GPIO_Init+0x1bc>
 8002b10:	4d4d      	ldr	r5, [pc, #308]	; (8002c48 <HAL_GPIO_Init+0x1e0>)
 8002b12:	42a8      	cmp	r0, r5
 8002b14:	bf0c      	ite	eq
 8002b16:	f04f 0e04 	moveq.w	lr, #4
 8002b1a:	f04f 0e07 	movne.w	lr, #7
 8002b1e:	fa0e f707 	lsl.w	r7, lr, r7
 8002b22:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b26:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->IMR;
 8002b2a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b30:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002b34:	bf0c      	ite	eq
 8002b36:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002b38:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->IMR = temp;
 8002b3c:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8002b3e:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b40:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002b44:	bf0c      	ite	eq
 8002b46:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002b48:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002b4c:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b50:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002b54:	bf0c      	ite	eq
 8002b56:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002b58:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->RTSR = temp;
 8002b5c:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR;
 8002b5e:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b64:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002b68:	bf0c      	ite	eq
 8002b6a:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002b6c:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b70:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8002b72:	60f1      	str	r1, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b74:	f102 0202 	add.w	r2, r2, #2
 8002b78:	d186      	bne.n	8002a88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b7a:	b005      	add	sp, #20
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b80:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8002b84:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b8a:	2503      	movs	r5, #3
 8002b8c:	fa05 fe02 	lsl.w	lr, r5, r2
 8002b90:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b94:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002b98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b9a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b9c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba0:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002ba8:	409f      	lsls	r7, r3
 8002baa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002bae:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002bb0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002bba:	4097      	lsls	r7, r2
 8002bbc:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8002bc2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc4:	fa01 f102 	lsl.w	r1, r1, r2
 8002bc8:	f47f af70 	bne.w	8002aac <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002bd0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd4:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002bdc:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bde:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be6:	fa07 f708 	lsl.w	r7, r7, r8
 8002bea:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bec:	270f      	movs	r7, #15
 8002bee:	fa07 f808 	lsl.w	r8, r7, r8
 8002bf2:	9f00      	ldr	r7, [sp, #0]
 8002bf4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	9f01      	ldr	r7, [sp, #4]
 8002bfa:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8002bfe:	f8ce 7020 	str.w	r7, [lr, #32]
 8002c02:	e753      	b.n	8002aac <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c04:	2503      	movs	r5, #3
 8002c06:	4095      	lsls	r5, r2
 8002c08:	43ed      	mvns	r5, r5
 8002c0a:	e7d1      	b.n	8002bb0 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0c:	fa0a f707 	lsl.w	r7, sl, r7
 8002c10:	ea48 0807 	orr.w	r8, r8, r7
 8002c14:	e787      	b.n	8002b26 <HAL_GPIO_Init+0xbe>
 8002c16:	f04f 0e02 	mov.w	lr, #2
 8002c1a:	fa0e f707 	lsl.w	r7, lr, r7
 8002c1e:	ea48 0807 	orr.w	r8, r8, r7
 8002c22:	e780      	b.n	8002b26 <HAL_GPIO_Init+0xbe>
 8002c24:	f04f 0e03 	mov.w	lr, #3
 8002c28:	fa0e f707 	lsl.w	r7, lr, r7
 8002c2c:	ea48 0807 	orr.w	r8, r8, r7
 8002c30:	e779      	b.n	8002b26 <HAL_GPIO_Init+0xbe>
 8002c32:	bf00      	nop
 8002c34:	40013c00 	.word	0x40013c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020c00 	.word	0x40020c00
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	b902      	cbnz	r2, 8002c50 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4e:	0409      	lsls	r1, r1, #16
 8002c50:	6181      	str	r1, [r0, #24]
  }
}
 8002c52:	4770      	bx	lr

08002c54 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f000 81a2 	beq.w	8002f9e <HAL_RCC_OscConfig+0x34a>
{
 8002c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	6803      	ldr	r3, [r0, #0]
 8002c60:	07dd      	lsls	r5, r3, #31
{
 8002c62:	b082      	sub	sp, #8
 8002c64:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	d52f      	bpl.n	8002cc8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c68:	499e      	ldr	r1, [pc, #632]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002c6a:	688a      	ldr	r2, [r1, #8]
 8002c6c:	f002 020c 	and.w	r2, r2, #12
 8002c70:	2a04      	cmp	r2, #4
 8002c72:	f000 80ed 	beq.w	8002e50 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	688a      	ldr	r2, [r1, #8]
 8002c78:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7c:	2a08      	cmp	r2, #8
 8002c7e:	f000 80e3 	beq.w	8002e48 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c82:	6863      	ldr	r3, [r4, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	f000 80ec 	beq.w	8002e64 <HAL_RCC_OscConfig+0x210>
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	f000 8175 	beq.w	8002f7e <HAL_RCC_OscConfig+0x32a>
 8002c94:	4d93      	ldr	r5, [pc, #588]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002c96:	682a      	ldr	r2, [r5, #0]
 8002c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	682a      	ldr	r2, [r5, #0]
 8002ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ca4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 80e1 	bne.w	8002e6e <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fc12 	bl	80024d4 <HAL_GetTick>
 8002cb0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fc0e 	bl	80024d4 <HAL_GetTick>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	2864      	cmp	r0, #100	; 0x64
 8002cbc:	f200 8101 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	d4f6      	bmi.n	8002cb4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	079f      	lsls	r7, r3, #30
 8002cca:	d528      	bpl.n	8002d1e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ccc:	4a85      	ldr	r2, [pc, #532]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002cce:	6891      	ldr	r1, [r2, #8]
 8002cd0:	f011 0f0c 	tst.w	r1, #12
 8002cd4:	f000 8090 	beq.w	8002df8 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd8:	6891      	ldr	r1, [r2, #8]
 8002cda:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	2908      	cmp	r1, #8
 8002ce0:	f000 8086 	beq.w	8002df0 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce4:	68e3      	ldr	r3, [r4, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 810e 	beq.w	8002f08 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4e7d      	ldr	r6, [pc, #500]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fbee 	bl	80024d4 <HAL_GetTick>
 8002cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fbea 	bl	80024d4 <HAL_GetTick>
 8002d00:	1b40      	subs	r0, r0, r5
 8002d02:	2802      	cmp	r0, #2
 8002d04:	f200 80dd 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	6833      	ldr	r3, [r6, #0]
 8002d0a:	0798      	lsls	r0, r3, #30
 8002d0c:	d5f6      	bpl.n	8002cfc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	6833      	ldr	r3, [r6, #0]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d1a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	071a      	lsls	r2, r3, #28
 8002d20:	d451      	bmi.n	8002dc6 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d22:	0758      	lsls	r0, r3, #29
 8002d24:	d52f      	bpl.n	8002d86 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d26:	4a6f      	ldr	r2, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002d28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d2a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	d07f      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002d30:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4e6e      	ldr	r6, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d34:	6833      	ldr	r3, [r6, #0]
 8002d36:	05d9      	lsls	r1, r3, #23
 8002d38:	f140 80b3 	bpl.w	8002ea2 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	68a3      	ldr	r3, [r4, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f000 80c3 	beq.w	8002eca <HAL_RCC_OscConfig+0x276>
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	f000 812c 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x34e>
 8002d4a:	4e66      	ldr	r6, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002d4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	6732      	str	r2, [r6, #112]	; 0x70
 8002d54:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 80b9 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7ff fbb7 	bl	80024d4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d6a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	e005      	b.n	8002d7a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7ff fbb1 	bl	80024d4 <HAL_GetTick>
 8002d72:	1bc0      	subs	r0, r0, r7
 8002d74:	4540      	cmp	r0, r8
 8002d76:	f200 80a4 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d7c:	0798      	lsls	r0, r3, #30
 8002d7e:	d4f6      	bmi.n	8002d6e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	2d00      	cmp	r5, #0
 8002d82:	f040 8106 	bne.w	8002f92 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d86:	69a0      	ldr	r0, [r4, #24]
 8002d88:	b1c8      	cbz	r0, 8002dbe <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8a:	4d56      	ldr	r5, [pc, #344]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002d8c:	68ab      	ldr	r3, [r5, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	f000 80c9 	beq.w	8002f2a <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_OscConfig+0x294>)
 8002d9a:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	f000 8109 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fb96 	bl	80024d4 <HAL_GetTick>
 8002da8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	e005      	b.n	8002db8 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7ff fb92 	bl	80024d4 <HAL_GetTick>
 8002db0:	1b00      	subs	r0, r0, r4
 8002db2:	2802      	cmp	r0, #2
 8002db4:	f200 8085 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	d4f6      	bmi.n	8002dac <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2000      	movs	r0, #0
}
 8002dc0:	b002      	add	sp, #8
 8002dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	b30b      	cbz	r3, 8002e0e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	4e45      	ldr	r6, [pc, #276]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002dd4:	f7ff fb7e 	bl	80024d4 <HAL_GetTick>
 8002dd8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e004      	b.n	8002de6 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fb7a 	bl	80024d4 <HAL_GetTick>
 8002de0:	1b40      	subs	r0, r0, r5
 8002de2:	2802      	cmp	r0, #2
 8002de4:	d86d      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002de8:	079b      	lsls	r3, r3, #30
 8002dea:	d5f7      	bpl.n	8002ddc <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	e798      	b.n	8002d22 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	0256      	lsls	r6, r2, #9
 8002df4:	f53f af76 	bmi.w	8002ce4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df8:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	0795      	lsls	r5, r2, #30
 8002dfe:	d544      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x236>
 8002e00:	68e2      	ldr	r2, [r4, #12]
 8002e02:	2a01      	cmp	r2, #1
 8002e04:	d041      	beq.n	8002e8a <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
}
 8002e08:	b002      	add	sp, #8
 8002e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4a36      	ldr	r2, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4e34      	ldr	r6, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002e12:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002e16:	f7ff fb5d 	bl	80024d4 <HAL_GetTick>
 8002e1a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	e004      	b.n	8002e28 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7ff fb59 	bl	80024d4 <HAL_GetTick>
 8002e22:	1b40      	subs	r0, r0, r5
 8002e24:	2802      	cmp	r0, #2
 8002e26:	d84c      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002e2a:	079f      	lsls	r7, r3, #30
 8002e2c:	d4f7      	bmi.n	8002e1e <HAL_RCC_OscConfig+0x1ca>
 8002e2e:	e7dd      	b.n	8002dec <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e44:	2501      	movs	r5, #1
 8002e46:	e774      	b.n	8002d32 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e48:	684a      	ldr	r2, [r1, #4]
 8002e4a:	0250      	lsls	r0, r2, #9
 8002e4c:	f57f af19 	bpl.w	8002c82 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	0391      	lsls	r1, r2, #14
 8002e56:	f57f af37 	bpl.w	8002cc8 <HAL_RCC_OscConfig+0x74>
 8002e5a:	6862      	ldr	r2, [r4, #4]
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	f47f af33 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x74>
 8002e62:	e7d0      	b.n	8002e06 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e6e:	f7ff fb31 	bl	80024d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4e1c      	ldr	r6, [pc, #112]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002e74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e004      	b.n	8002e82 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff fb2c 	bl	80024d4 <HAL_GetTick>
 8002e7c:	1b40      	subs	r0, r0, r5
 8002e7e:	2864      	cmp	r0, #100	; 0x64
 8002e80:	d81f      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	6833      	ldr	r3, [r6, #0]
 8002e84:	039a      	lsls	r2, r3, #14
 8002e86:	d5f7      	bpl.n	8002e78 <HAL_RCC_OscConfig+0x224>
 8002e88:	e71d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4916      	ldr	r1, [pc, #88]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002e8c:	6920      	ldr	r0, [r4, #16]
 8002e8e:	680a      	ldr	r2, [r1, #0]
 8002e90:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002e94:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002e98:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	071a      	lsls	r2, r3, #28
 8002e9c:	f57f af41 	bpl.w	8002d22 <HAL_RCC_OscConfig+0xce>
 8002ea0:	e791      	b.n	8002dc6 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	6833      	ldr	r3, [r6, #0]
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fb13 	bl	80024d4 <HAL_GetTick>
 8002eae:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	6833      	ldr	r3, [r6, #0]
 8002eb2:	05da      	lsls	r2, r3, #23
 8002eb4:	f53f af42 	bmi.w	8002d3c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7ff fb0c 	bl	80024d4 <HAL_GetTick>
 8002ebc:	1bc0      	subs	r0, r0, r7
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d9f6      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
}
 8002ec4:	b002      	add	sp, #8
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eca:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
 8002ecc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002ed4:	f7ff fafe 	bl	80024d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4f02      	ldr	r7, [pc, #8]	; (8002ee4 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002eda:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x2a6>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7ff faf0 	bl	80024d4 <HAL_GetTick>
 8002ef4:	1b80      	subs	r0, r0, r6
 8002ef6:	4540      	cmp	r0, r8
 8002ef8:	d8e3      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d5f7      	bpl.n	8002ef0 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	f43f af40 	beq.w	8002d86 <HAL_RCC_OscConfig+0x132>
 8002f06:	e044      	b.n	8002f92 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4e43      	ldr	r6, [pc, #268]	; (8003018 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002f0c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f0e:	f7ff fae1 	bl	80024d4 <HAL_GetTick>
 8002f12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f14:	e004      	b.n	8002f20 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7ff fadd 	bl	80024d4 <HAL_GetTick>
 8002f1a:	1b40      	subs	r0, r0, r5
 8002f1c:	2802      	cmp	r0, #2
 8002f1e:	d8d0      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f20:	6833      	ldr	r3, [r6, #0]
 8002f22:	0799      	lsls	r1, r3, #30
 8002f24:	d4f7      	bmi.n	8002f16 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	e6f9      	b.n	8002d1e <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2a:	2801      	cmp	r0, #1
 8002f2c:	f43f af48 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002f30:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f34:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f38:	4291      	cmp	r1, r2
 8002f3a:	f47f af64 	bne.w	8002e06 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	4291      	cmp	r1, r2
 8002f46:	f47f af5e 	bne.w	8002e06 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f4c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002f50:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f52:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002f56:	f47f af56 	bne.w	8002e06 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002f62:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f64:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002f68:	f47f af4d 	bne.w	8002e06 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f6e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f72:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002f76:	bf14      	ite	ne
 8002f78:	2001      	movne	r0, #1
 8002f7a:	2000      	moveq	r0, #0
 8002f7c:	e720      	b.n	8002dc0 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_OscConfig+0x3c4>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f8e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	e76d      	b.n	8002e6e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4a21      	ldr	r2, [pc, #132]	; (8003018 <HAL_RCC_OscConfig+0x3c4>)
 8002f94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9c:	e6f3      	b.n	8002d86 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_OscConfig+0x3c4>)
 8002fa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	671a      	str	r2, [r3, #112]	; 0x70
 8002fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb4:	e78e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002fb6:	f7ff fa8d 	bl	80024d4 <HAL_GetTick>
 8002fba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbc:	e005      	b.n	8002fca <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7ff fa89 	bl	80024d4 <HAL_GetTick>
 8002fc2:	1b80      	subs	r0, r0, r6
 8002fc4:	2802      	cmp	r0, #2
 8002fc6:	f63f af7c 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	682b      	ldr	r3, [r5, #0]
 8002fcc:	0199      	lsls	r1, r3, #6
 8002fce:	d4f6      	bmi.n	8002fbe <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fdc:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002fe6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002fee:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ff2:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fa6e 	bl	80024d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	4d07      	ldr	r5, [pc, #28]	; (8003018 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002ffa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e005      	b.n	800300a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7ff fa69 	bl	80024d4 <HAL_GetTick>
 8003002:	1b00      	subs	r0, r0, r4
 8003004:	2802      	cmp	r0, #2
 8003006:	f63f af5c 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	019a      	lsls	r2, r3, #6
 800300e:	d5f6      	bpl.n	8002ffe <HAL_RCC_OscConfig+0x3aa>
 8003010:	e6d5      	b.n	8002dbe <HAL_RCC_OscConfig+0x16a>
 8003012:	bf00      	nop
 8003014:	42470000 	.word	0x42470000
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <HAL_RCC_EnableCSS+0x8>)
 800301e:	2201      	movs	r2, #1
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003022:	4770      	bx	lr
 8003024:	42470000 	.word	0x42470000

08003028 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003028:	4916      	ldr	r1, [pc, #88]	; (8003084 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800302a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302c:	688b      	ldr	r3, [r1, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d01b      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x46>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d117      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003040:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003048:	d113      	bne.n	8003072 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	480f      	ldr	r0, [pc, #60]	; (8003088 <HAL_RCC_GetSysClockFreq+0x60>)
 800304c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003050:	fba1 0100 	umull	r0, r1, r1, r0
 8003054:	f7fd fbce 	bl	80007f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_GetSysClockFreq+0x5c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003060:	3301      	adds	r3, #1
 8003062:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003064:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003068:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800306a:	4807      	ldr	r0, [pc, #28]	; (8003088 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800306c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003070:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4806      	ldr	r0, [pc, #24]	; (800308c <HAL_RCC_GetSysClockFreq+0x64>)
 8003074:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003078:	2300      	movs	r3, #0
 800307a:	fba1 0100 	umull	r0, r1, r1, r0
 800307e:	f7fd fbb9 	bl	80007f4 <__aeabi_uldivmod>
 8003082:	e7e9      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x30>
 8003084:	40023800 	.word	0x40023800
 8003088:	00f42400 	.word	0x00f42400
 800308c:	007a1200 	.word	0x007a1200

08003090 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003090:	2800      	cmp	r0, #0
 8003092:	f000 8087 	beq.w	80031a4 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003096:	4a48      	ldr	r2, [pc, #288]	; (80031b8 <HAL_RCC_ClockConfig+0x128>)
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	428b      	cmp	r3, r1
{
 80030a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a4:	460d      	mov	r5, r1
 80030a6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	d209      	bcs.n	80030be <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	b2cb      	uxtb	r3, r1
 80030ac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d002      	beq.n	80030be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
}
 80030ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	0798      	lsls	r0, r3, #30
 80030c2:	d514      	bpl.n	80030ee <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	0759      	lsls	r1, r3, #29
 80030c6:	d504      	bpl.n	80030d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	493c      	ldr	r1, [pc, #240]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 80030ca:	688a      	ldr	r2, [r1, #8]
 80030cc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80030d0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	071a      	lsls	r2, r3, #28
 80030d4:	d504      	bpl.n	80030e0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d6:	4939      	ldr	r1, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 80030d8:	688a      	ldr	r2, [r1, #8]
 80030da:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80030de:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 80030e2:	68a0      	ldr	r0, [r4, #8]
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030ea:	4302      	orrs	r2, r0
 80030ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	07df      	lsls	r7, r3, #31
 80030f0:	d521      	bpl.n	8003136 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	6862      	ldr	r2, [r4, #4]
 80030f4:	2a01      	cmp	r2, #1
 80030f6:	d057      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f8:	1e93      	subs	r3, r2, #2
 80030fa:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003100:	d94d      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	0799      	lsls	r1, r3, #30
 8003104:	d5d8      	bpl.n	80030b8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003106:	4e2d      	ldr	r6, [pc, #180]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 8003108:	68b3      	ldr	r3, [r6, #8]
 800310a:	f023 0303 	bic.w	r3, r3, #3
 800310e:	4313      	orrs	r3, r2
 8003110:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003112:	f7ff f9df 	bl	80024d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800311a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e004      	b.n	8003128 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7ff f9d9 	bl	80024d4 <HAL_GetTick>
 8003122:	1bc0      	subs	r0, r0, r7
 8003124:	4540      	cmp	r0, r8
 8003126:	d844      	bhi.n	80031b2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003128:	68b3      	ldr	r3, [r6, #8]
 800312a:	6862      	ldr	r2, [r4, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003134:	d1f3      	bne.n	800311e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x128>)
 8003138:	6813      	ldr	r3, [r2, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	42ab      	cmp	r3, r5
 8003140:	d906      	bls.n	8003150 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	b2eb      	uxtb	r3, r5
 8003144:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	42ab      	cmp	r3, r5
 800314e:	d1b3      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	075a      	lsls	r2, r3, #29
 8003154:	d506      	bpl.n	8003164 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003156:	4919      	ldr	r1, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 8003158:	68e0      	ldr	r0, [r4, #12]
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003160:	4302      	orrs	r2, r0
 8003162:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	d507      	bpl.n	8003178 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 800316a:	6921      	ldr	r1, [r4, #16]
 800316c:	6893      	ldr	r3, [r2, #8]
 800316e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003172:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003176:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003178:	f7ff ff56 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 800317e:	4c10      	ldr	r4, [pc, #64]	; (80031c0 <HAL_RCC_ClockConfig+0x130>)
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	4910      	ldr	r1, [pc, #64]	; (80031c4 <HAL_RCC_ClockConfig+0x134>)
 8003184:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003188:	4603      	mov	r3, r0
 800318a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800318c:	480e      	ldr	r0, [pc, #56]	; (80031c8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003190:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003192:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003194:	f7ff f954 	bl	8002440 <HAL_InitTick>
  return HAL_OK;
 8003198:	2000      	movs	r0, #0
}
 800319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	0198      	lsls	r0, r3, #6
 80031a0:	d4b1      	bmi.n	8003106 <HAL_RCC_ClockConfig+0x76>
 80031a2:	e789      	b.n	80030b8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
}
 80031a6:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCC_ClockConfig+0x12c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	039e      	lsls	r6, r3, #14
 80031ae:	d4aa      	bmi.n	8003106 <HAL_RCC_ClockConfig+0x76>
 80031b0:	e782      	b.n	80030b8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80031b2:	2003      	movs	r0, #3
 80031b4:	e781      	b.n	80030ba <HAL_RCC_ClockConfig+0x2a>
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	080055cc 	.word	0x080055cc
 80031c4:	20000434 	.word	0x20000434
 80031c8:	2000043c 	.word	0x2000043c

080031cc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80031cc:	4b01      	ldr	r3, [pc, #4]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000434 	.word	0x20000434

080031d8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	2800      	cmp	r0, #0
 80031da:	d076      	beq.n	80032ca <HAL_TIM_Base_Init+0xf2>
{
 80031dc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031e2:	4604      	mov	r4, r0
 80031e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d055      	beq.n	8003298 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80031f8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fa:	d052      	beq.n	80032a2 <HAL_TIM_Base_Init+0xca>
 80031fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003200:	d021      	beq.n	8003246 <HAL_TIM_Base_Init+0x6e>
 8003202:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003206:	428a      	cmp	r2, r1
 8003208:	d01d      	beq.n	8003246 <HAL_TIM_Base_Init+0x6e>
 800320a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800320e:	428a      	cmp	r2, r1
 8003210:	d019      	beq.n	8003246 <HAL_TIM_Base_Init+0x6e>
 8003212:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003216:	428a      	cmp	r2, r1
 8003218:	d015      	beq.n	8003246 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800321e:	428a      	cmp	r2, r1
 8003220:	d015      	beq.n	800324e <HAL_TIM_Base_Init+0x76>
 8003222:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003226:	428a      	cmp	r2, r1
 8003228:	d011      	beq.n	800324e <HAL_TIM_Base_Init+0x76>
 800322a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800322e:	428a      	cmp	r2, r1
 8003230:	d00d      	beq.n	800324e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003232:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003234:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800323c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800323e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003240:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003242:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003244:	e010      	b.n	8003268 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003246:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800324c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003250:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800325e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003260:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003262:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003264:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003266:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	2301      	movs	r3, #1
 800326a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003274:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003278:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800327c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003288:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800328c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003290:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003294:	2000      	movs	r0, #0
}
 8003296:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800329c:	f7fe ff84 	bl	80021a8 <HAL_TIM_Base_MspInit>
 80032a0:	e7a4      	b.n	80031ec <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80032a2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032aa:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b2:	69a1      	ldr	r1, [r4, #24]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80032ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80032c0:	6863      	ldr	r3, [r4, #4]
 80032c2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80032c4:	6963      	ldr	r3, [r4, #20]
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	e7ce      	b.n	8003268 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000

080032d4 <HAL_TIM_PWM_MspInit>:
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80032d8:	2800      	cmp	r0, #0
 80032da:	d076      	beq.n	80033ca <HAL_TIM_PWM_Init+0xf2>
{
 80032dc:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032e2:	4604      	mov	r4, r0
 80032e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d055      	beq.n	8003398 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ee:	4938      	ldr	r1, [pc, #224]	; (80033d0 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80032f8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032fa:	d052      	beq.n	80033a2 <HAL_TIM_PWM_Init+0xca>
 80032fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003300:	d021      	beq.n	8003346 <HAL_TIM_PWM_Init+0x6e>
 8003302:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003306:	428a      	cmp	r2, r1
 8003308:	d01d      	beq.n	8003346 <HAL_TIM_PWM_Init+0x6e>
 800330a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800330e:	428a      	cmp	r2, r1
 8003310:	d019      	beq.n	8003346 <HAL_TIM_PWM_Init+0x6e>
 8003312:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003316:	428a      	cmp	r2, r1
 8003318:	d015      	beq.n	8003346 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800331e:	428a      	cmp	r2, r1
 8003320:	d015      	beq.n	800334e <HAL_TIM_PWM_Init+0x76>
 8003322:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003326:	428a      	cmp	r2, r1
 8003328:	d011      	beq.n	800334e <HAL_TIM_PWM_Init+0x76>
 800332a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800332e:	428a      	cmp	r2, r1
 8003330:	d00d      	beq.n	800334e <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003332:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800333a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800333c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800333e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003340:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003342:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	e010      	b.n	8003368 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003346:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800334c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003350:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003360:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003362:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003364:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003366:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003368:	2301      	movs	r3, #1
 800336a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003374:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003378:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800337c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003388:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800338c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003390:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003394:	2000      	movs	r0, #0
}
 8003396:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003398:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800339c:	f7ff ff9a 	bl	80032d4 <HAL_TIM_PWM_MspInit>
 80033a0:	e7a4      	b.n	80032ec <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80033a2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033aa:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b2:	69a1      	ldr	r1, [r4, #24]
 80033b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80033ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033bc:	68e3      	ldr	r3, [r4, #12]
 80033be:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	6963      	ldr	r3, [r4, #20]
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
 80033c8:	e7ce      	b.n	8003368 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80033ca:	2001      	movs	r0, #1
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000

080033d4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80033d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f000 80ca 	beq.w	8003572 <HAL_TIM_PWM_ConfigChannel+0x19e>
 80033de:	2301      	movs	r3, #1
{
 80033e0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80033e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80033e6:	2a0c      	cmp	r2, #12
 80033e8:	d808      	bhi.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x28>
 80033ea:	e8df f002 	tbb	[pc, r2]
 80033ee:	073d      	.short	0x073d
 80033f0:	07680707 	.word	0x07680707
 80033f4:	07960707 	.word	0x07960707
 80033f8:	0707      	.short	0x0707
 80033fa:	0e          	.byte	0x0e
 80033fb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80033fc:	2300      	movs	r3, #0
 80033fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003402:	2201      	movs	r2, #1
}
 8003404:	4610      	mov	r0, r2
 8003406:	bcf0      	pop	{r4, r5, r6, r7}
 8003408:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800340a:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003414:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003416:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003418:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800341a:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800341c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003420:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003424:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800342a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342e:	4e6b      	ldr	r6, [pc, #428]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x208>)
 8003430:	42b3      	cmp	r3, r6
 8003432:	f000 80bd 	beq.w	80035b0 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003438:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800343a:	684c      	ldr	r4, [r1, #4]
 800343c:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003440:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003442:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344a:	69dc      	ldr	r4, [r3, #28]
 800344c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003450:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003458:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 800345a:	2300      	movs	r3, #0
 800345c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2200      	movs	r2, #0
}
 8003462:	4610      	mov	r0, r2
 8003464:	bcf0      	pop	{r4, r5, r6, r7}
 8003466:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003468:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800346a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346c:	6a1a      	ldr	r2, [r3, #32]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003474:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003476:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003478:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800347a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800347e:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8003480:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003482:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8003486:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003488:	4e54      	ldr	r6, [pc, #336]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800348a:	42b3      	cmp	r3, r6
 800348c:	d074      	beq.n	8003578 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 800348e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003490:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003492:	684c      	ldr	r4, [r1, #4]
 8003494:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003496:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800349a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800349c:	f042 0208 	orr.w	r2, r2, #8
 80034a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a2:	699c      	ldr	r4, [r3, #24]
 80034a4:	f024 0404 	bic.w	r4, r4, #4
 80034a8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034aa:	6999      	ldr	r1, [r3, #24]
 80034ac:	4329      	orrs	r1, r5
 80034ae:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80034b0:	2300      	movs	r3, #0
 80034b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2200      	movs	r2, #0
}
 80034b8:	4610      	mov	r0, r2
 80034ba:	bcf0      	pop	{r4, r5, r6, r7}
 80034bc:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034be:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80034ca:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80034cc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80034ce:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80034da:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e2:	4e3e      	ldr	r6, [pc, #248]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x208>)
 80034e4:	42b3      	cmp	r3, r6
 80034e6:	d054      	beq.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80034e8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034ea:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034ec:	684c      	ldr	r4, [r1, #4]
 80034ee:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034f0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f2:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034fc:	699c      	ldr	r4, [r3, #24]
 80034fe:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003502:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003504:	6999      	ldr	r1, [r3, #24]
 8003506:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800350a:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 800350c:	2300      	movs	r3, #0
 800350e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2200      	movs	r2, #0
}
 8003514:	4610      	mov	r0, r2
 8003516:	bcf0      	pop	{r4, r5, r6, r7}
 8003518:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800351a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800351c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003524:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003526:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003528:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800352a:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800352c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003530:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003532:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003538:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353c:	4e27      	ldr	r6, [pc, #156]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800353e:	42b3      	cmp	r3, r6
 8003540:	d03c      	beq.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 8003542:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003544:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003546:	684c      	ldr	r4, [r1, #4]
 8003548:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800354a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800354e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003550:	f042 0208 	orr.w	r2, r2, #8
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003556:	69dc      	ldr	r4, [r3, #28]
 8003558:	f024 0404 	bic.w	r4, r4, #4
 800355c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	4329      	orrs	r1, r5
 8003562:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8003564:	2300      	movs	r3, #0
 8003566:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2200      	movs	r2, #0
}
 800356c:	4610      	mov	r0, r2
 800356e:	bcf0      	pop	{r4, r5, r6, r7}
 8003570:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003572:	2202      	movs	r2, #2
}
 8003574:	4610      	mov	r0, r2
 8003576:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003578:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800357a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800357e:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003580:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003584:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003588:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800358a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800358e:	4335      	orrs	r5, r6
 8003590:	e77d      	b.n	800348e <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003592:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003598:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800359c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035a0:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035aa:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80035ae:	e79b      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b2:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b6:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80035ba:	e73c      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035bc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ca:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ce:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d4:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80035d8:	e7b3      	b.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x16e>
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000

080035e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80035e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d075      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xf4>
 80035e8:	4602      	mov	r2, r0
{
 80035ea:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80035ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80035fa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003604:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003606:	680b      	ldr	r3, [r1, #0]
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d065      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0xf8>
 800360c:	d824      	bhi.n	8003658 <HAL_TIM_ConfigClockSource+0x78>
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d07c      	beq.n	800370c <HAL_TIM_ConfigClockSource+0x12c>
 8003612:	d94b      	bls.n	80036ac <HAL_TIM_ConfigClockSource+0xcc>
 8003614:	2b50      	cmp	r3, #80	; 0x50
 8003616:	d117      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003618:	6848      	ldr	r0, [r1, #4]
 800361a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361e:	6a23      	ldr	r3, [r4, #32]
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003628:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800362c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003630:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003632:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003636:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003638:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800363a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003640:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003648:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800364a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800364c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003650:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003654:	bc30      	pop	{r4, r5}
 8003656:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d038      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0xf0>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d110      	bne.n	8003686 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003664:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003668:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800366a:	432b      	orrs	r3, r5
 800366c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003672:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003676:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003678:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003682:	60a3      	str	r3, [r4, #8]
      break;
 8003684:	e7e0      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003686:	2b70      	cmp	r3, #112	; 0x70
 8003688:	d1de      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800368e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003690:	432b      	orrs	r3, r5
 8003692:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003698:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800369c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800369e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80036a0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80036a8:	60a3      	str	r3, [r4, #8]
      break;
 80036aa:	e7cd      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d002      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xd6>
 80036b0:	d90a      	bls.n	80036c8 <HAL_TIM_ConfigClockSource+0xe8>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d1c8      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80036b6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036bc:	430b      	orrs	r3, r1
 80036be:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80036c4:	60a3      	str	r3, [r4, #8]
}
 80036c6:	e7bf      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80036c8:	f033 0110 	bics.w	r1, r3, #16
 80036cc:	d1bc      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
 80036ce:	e7f2      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2000      	movs	r0, #0
 80036d2:	e7b9      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80036d4:	2002      	movs	r0, #2
}
 80036d6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036da:	68cb      	ldr	r3, [r1, #12]
 80036dc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	f020 0010 	bic.w	r0, r0, #16
 80036e2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ea:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80036ee:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80036f0:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80036fa:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80036fc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003702:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003708:	60a3      	str	r3, [r4, #8]
}
 800370a:	e79d      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370c:	6848      	ldr	r0, [r1, #4]
 800370e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003710:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	6a23      	ldr	r3, [r4, #32]
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003724:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003726:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800372a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800372c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800372e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003734:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800373a:	60a3      	str	r3, [r4, #8]
}
 800373c:	e784      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x68>
 800373e:	bf00      	nop

08003740 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003740:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003744:	2a01      	cmp	r2, #1
 8003746:	d050      	beq.n	80037ea <HAL_TIM_SlaveConfigSynchro+0xaa>
 8003748:	4603      	mov	r3, r0
{
 800374a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800374e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003754:	2001      	movs	r0, #1
 8003756:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800375a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800375c:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800375e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003760:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003764:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003766:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800376a:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 800376c:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800376e:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003770:	d060      	beq.n	8003834 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8003772:	d90f      	bls.n	8003794 <HAL_TIM_SlaveConfigSynchro+0x54>
 8003774:	2860      	cmp	r0, #96	; 0x60
 8003776:	d03a      	beq.n	80037ee <HAL_TIM_SlaveConfigSynchro+0xae>
 8003778:	2870      	cmp	r0, #112	; 0x70
 800377a:	d10e      	bne.n	800379a <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800377c:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8003780:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003782:	432a      	orrs	r2, r5
 8003784:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003786:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800378a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800378e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003790:	60a2      	str	r2, [r4, #8]
 8003792:	e00f      	b.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8003794:	2840      	cmp	r0, #64	; 0x40
 8003796:	d03d      	beq.n	8003814 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8003798:	d907      	bls.n	80037aa <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800379a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800379c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800379e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80037a6:	bc70      	pop	{r4, r5, r6}
 80037a8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80037aa:	2820      	cmp	r0, #32
 80037ac:	d002      	beq.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>
 80037ae:	d912      	bls.n	80037d6 <HAL_TIM_SlaveConfigSynchro+0x96>
 80037b0:	2830      	cmp	r0, #48	; 0x30
 80037b2:	d1f2      	bne.n	800379a <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037b4:	68e2      	ldr	r2, [r4, #12]
 80037b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ba:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037bc:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80037be:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037c6:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80037cc:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 80037d0:	4608      	mov	r0, r1
}
 80037d2:	bc70      	pop	{r4, r5, r6}
 80037d4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80037d6:	f030 0210 	bics.w	r2, r0, #16
 80037da:	d0eb      	beq.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80037dc:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80037de:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80037e0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80037e8:	e7dd      	b.n	80037a6 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80037ea:	2002      	movs	r0, #2
}
 80037ec:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f0:	690a      	ldr	r2, [r1, #16]
 80037f2:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f4:	f020 0010 	bic.w	r0, r0, #16
 80037f8:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fa:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003800:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8003804:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003806:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800380c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003810:	6222      	str	r2, [r4, #32]
 8003812:	e7cf      	b.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003814:	2d05      	cmp	r5, #5
 8003816:	d0c0      	beq.n	800379a <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8003818:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800381a:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800381c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800381e:	f020 0001 	bic.w	r0, r0, #1
 8003822:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003824:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003826:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800382a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800382e:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8003830:	6225      	str	r5, [r4, #32]
      break;
 8003832:	e7bf      	b.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003834:	6888      	ldr	r0, [r1, #8]
 8003836:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8003838:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800383a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800383e:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003840:	6a20      	ldr	r0, [r4, #32]
 8003842:	f020 0001 	bic.w	r0, r0, #1
 8003846:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003848:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003852:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003854:	6221      	str	r1, [r4, #32]
 8003856:	e7ad      	b.n	80037b4 <HAL_TIM_SlaveConfigSynchro+0x74>

08003858 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 800385a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385c:	4290      	cmp	r0, r2
{
 800385e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	d039      	beq.n	80038d6 <TIM_Base_SetConfig+0x7e>
 8003862:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003866:	d021      	beq.n	80038ac <TIM_Base_SetConfig+0x54>
 8003868:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800386c:	4290      	cmp	r0, r2
 800386e:	d01d      	beq.n	80038ac <TIM_Base_SetConfig+0x54>
 8003870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003874:	4290      	cmp	r0, r2
 8003876:	d019      	beq.n	80038ac <TIM_Base_SetConfig+0x54>
 8003878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800387c:	4290      	cmp	r0, r2
 800387e:	d015      	beq.n	80038ac <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003880:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003884:	4290      	cmp	r0, r2
 8003886:	d015      	beq.n	80038b4 <TIM_Base_SetConfig+0x5c>
 8003888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800388c:	4290      	cmp	r0, r2
 800388e:	d011      	beq.n	80038b4 <TIM_Base_SetConfig+0x5c>
 8003890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003894:	4290      	cmp	r0, r2
 8003896:	d00d      	beq.n	80038b4 <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800389c:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80038a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038a8:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038aa:	e010      	b.n	80038ce <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 80038ac:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038b2:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b4:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c2:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c4:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80038c6:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80038c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ca:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038cc:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80038d2:	6143      	str	r3, [r0, #20]
}
 80038d4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80038d6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038de:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e6:	694a      	ldr	r2, [r1, #20]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80038ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	688b      	ldr	r3, [r1, #8]
 80038f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038f4:	680b      	ldr	r3, [r1, #0]
 80038f6:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	690b      	ldr	r3, [r1, #16]
 80038fa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003900:	6143      	str	r3, [r0, #20]
}
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000

08003908 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	6a03      	ldr	r3, [r0, #32]
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003910:	6a03      	ldr	r3, [r0, #32]
{
 8003912:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8003914:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003916:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800391a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800391e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003922:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003924:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003928:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800392c:	4d0c      	ldr	r5, [pc, #48]	; (8003960 <TIM_OC2_SetConfig+0x58>)
 800392e:	42a8      	cmp	r0, r5
 8003930:	d006      	beq.n	8003940 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8003932:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003934:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003936:	6182      	str	r2, [r0, #24]
}
 8003938:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800393a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800393c:	6203      	str	r3, [r0, #32]
}
 800393e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003940:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003946:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800394a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800394e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003952:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003958:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800395c:	e7e9      	b.n	8003932 <TIM_OC2_SetConfig+0x2a>
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000

08003964 <TIM_TI1_SetConfig>:
{
 8003964:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003968:	4e17      	ldr	r6, [pc, #92]	; (80039c8 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	f025 0501 	bic.w	r5, r5, #1
 800396e:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003970:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003972:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003974:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003976:	d015      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
 8003978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800397c:	d012      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
 800397e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003982:	42b0      	cmp	r0, r6
 8003984:	d00e      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
 8003986:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800398a:	42b0      	cmp	r0, r6
 800398c:	d00a      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
 800398e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003992:	42b0      	cmp	r0, r6
 8003994:	d006      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
 8003996:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800399a:	42b0      	cmp	r0, r6
 800399c:	d002      	beq.n	80039a4 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800399e:	f044 0201 	orr.w	r2, r4, #1
 80039a2:	e002      	b.n	80039aa <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039a4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80039a8:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039aa:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ac:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039b4:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039b6:	f001 010a 	and.w	r1, r1, #10
 80039ba:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039bc:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80039be:	6183      	str	r3, [r0, #24]
}
 80039c0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80039c2:	6201      	str	r1, [r0, #32]
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000

080039cc <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d05f      	beq.n	8003a94 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 80039d4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80039da:	b088      	sub	sp, #32
 80039dc:	460d      	mov	r5, r1
 80039de:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80039e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d050      	beq.n	8003a8a <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80039ea:	2302      	movs	r3, #2
 80039ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80039f4:	f7ff ff30 	bl	8003858 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80039f8:	68ab      	ldr	r3, [r5, #8]
 80039fa:	6829      	ldr	r1, [r5, #0]
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f7ff ffb0 	bl	8003964 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a04:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003a06:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a08:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003a0a:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a0c:	f022 020c 	bic.w	r2, r2, #12
 8003a10:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003a12:	6983      	ldr	r3, [r0, #24]
 8003a14:	4333      	orrs	r3, r6
 8003a16:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003a18:	6843      	ldr	r3, [r0, #4]
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003a20:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003a22:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a28:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003a2a:	6883      	ldr	r3, [r0, #8]
 8003a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a30:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003a32:	6883      	ldr	r3, [r0, #8]
 8003a34:	f023 0307 	bic.w	r3, r3, #7
 8003a38:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003a3a:	6883      	ldr	r3, [r0, #8]
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003a42:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003a44:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003a46:	2370      	movs	r3, #112	; 0x70
 8003a48:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a4a:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a4e:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a52:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003a54:	f7ff ff58 	bl	8003908 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	6851      	ldr	r1, [r2, #4]
 8003a5c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003a60:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003a62:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a64:	2301      	movs	r3, #1
  return HAL_OK;
 8003a66:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003a68:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8003a6c:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003a86:	b008      	add	sp, #32
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003a8e:	f7ff ff9d 	bl	80039cc <HAL_TIMEx_HallSensor_MspInit>
 8003a92:	e7a9      	b.n	80039e8 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8003a94:	2001      	movs	r0, #1
}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d02f      	beq.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa2:	2202      	movs	r2, #2
{
 8003aa4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003aaa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aac:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003aae:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d012      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d00f      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ac4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003acc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ad4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003adc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d104      	bne.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae4:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aea:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aec:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003aee:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	2201      	movs	r2, #1
 8003af2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003af6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003afa:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003afc:	4618      	mov	r0, r3
}
 8003afe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003b00:	2002      	movs	r0, #2
}
 8003b02:	4770      	bx	lr
 8003b04:	40010000 	.word	0x40010000

08003b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d023      	beq.n	8003b58 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8003b10:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b12:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8003b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b1e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b20:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b26:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b2c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b2e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b34:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b36:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b38:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b44:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8003b46:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b48:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8003b4a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003b4c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8003b50:	4608      	mov	r0, r1
}
 8003b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003b58:	2002      	movs	r0, #2
}
 8003b5a:	4770      	bx	lr

08003b5c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8003b5c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8003b5e:	8840      	ldrh	r0, [r0, #2]
 8003b60:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8003b64:	0c00      	lsrs	r0, r0, #16
 8003b66:	4770      	bx	lr

08003b68 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8003b6a:	8803      	ldrh	r3, [r0, #0]
 8003b6c:	140d      	asrs	r5, r1, #16
{
 8003b6e:	b084      	sub	sp, #16
 8003b70:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8003b72:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8003b76:	fb03 f303 	mul.w	r3, r3, r3
{
 8003b7a:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8003b7c:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	da10      	bge.n	8003ba6 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8003b84:	8846      	ldrh	r6, [r0, #2]
 8003b86:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8003b8a:	4282      	cmp	r2, r0
 8003b8c:	dd14      	ble.n	8003bb8 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8003b8e:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8003b90:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8003b94:	bfb8      	it	lt
 8003b96:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8003b98:	f7fd fc22 	bl	80013e0 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8003b9c:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 8003b9e:	bfb8      	it	lt
 8003ba0:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8003ba2:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8003ba4:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8003ba6:	b2a4      	uxth	r4, r4
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f364 000f 	bfi	r0, r4, #0, #16
 8003bae:	b2ad      	uxth	r5, r5
 8003bb0:	f365 401f 	bfi	r0, r5, #16, #16
}
 8003bb4:	b004      	add	sp, #16
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8003bb8:	1a98      	subs	r0, r3, r2
 8003bba:	f7fd fc11 	bl	80013e0 <MCM_Sqrt>
        if (Vqd.q < 0)
 8003bbe:	2c00      	cmp	r4, #0
 8003bc0:	daf0      	bge.n	8003ba4 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8003bc2:	4240      	negs	r0, r0
 8003bc4:	e7ee      	b.n	8003ba4 <Circle_Limitation+0x3c>
 8003bc6:	bf00      	nop

08003bc8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init(HALL_Handle_t *pHandle)
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8003bca:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 8003bce:	7843      	ldrb	r3, [r0, #1]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8003bd0:	8a84      	ldrh	r4, [r0, #20]

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8003bd2:	6a82      	ldr	r2, [r0, #40]	; 0x28
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8003bd4:	fb1c fc03 	smulbb	ip, ip, r3
    hMaxReliableElSpeedUnit *= 2U;
 8003bd8:	fb14 f403 	smulbb	r4, r4, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8003bdc:	fa1f fc8c 	uxth.w	ip, ip
    hMaxReliableElSpeedUnit *= 2U;
 8003be0:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8003be2:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8003be4:	f1bc 0f03 	cmp.w	ip, #3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8003be8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8003bea:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
    hMaxReliableElSpeedUnit *= 2U;
 8003bee:	b2a4      	uxth	r4, r4
    if (0U == hMinReliableElSpeedUnit)
 8003bf0:	d96e      	bls.n	8003cd0 <HALL_Init+0x108>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8003bf2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8003bf6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8003bfa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003bfe:	f242 7e10 	movw	lr, #10000	; 0x2710
 8003c02:	fbbe fcfc 	udiv	ip, lr, ip
 8003c06:	fa1f f58c 	uxth.w	r5, ip
 8003c0a:	f8a0 50c0 	strh.w	r5, [r0, #192]	; 0xc0
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8003c0e:	4d32      	ldr	r5, [pc, #200]	; (8003cd8 <HALL_Init+0x110>)

    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8003c10:	f8a0 40b0 	strh.w	r4, [r0, #176]	; 0xb0
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8003c14:	fb0c f101 	mul.w	r1, ip, r1
 8003c18:	fba5 5101 	umull	r5, r1, r5, r1

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8003c1c:	4d2f      	ldr	r5, [pc, #188]	; (8003cdc <HALL_Init+0x114>)
 8003c1e:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8003c22:	fba5 5202 	umull	r5, r2, r5, r2
                              * pHandle->_Super.DPPConvFactor;
 8003c26:	69c5      	ldr	r5, [r0, #28]
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8003c28:	0989      	lsrs	r1, r1, #6
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8003c2a:	0892      	lsrs	r2, r2, #2
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8003c2c:	040e      	lsls	r6, r1, #16
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8003c2e:	fbb2 fefc 	udiv	lr, r2, ip

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8003c32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                              * pHandle->_Super.DPPConvFactor;
 8003c36:	fb05 f50e 	mul.w	r5, r5, lr
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8003c3a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8003c3e:	f8c0 60b8 	str.w	r6, [r0, #184]	; 0xb8
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8003c42:	b289      	uxth	r1, r1
 8003c44:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8003c48:	0052      	lsls	r2, r2, #1
    if (0U == hMaxReliableElSpeedUnit)
 8003c4a:	b10c      	cbz	r4, 8003c50 <HALL_Init+0x88>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8003c4c:	fbb2 f2f4 	udiv	r2, r2, r4
 8003c50:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8003c54:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8003c58:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8003c5a:	fb0c f202 	mul.w	r2, ip, r2
 8003c5e:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003c62:	699c      	ldr	r4, [r3, #24]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8003c64:	3a01      	subs	r2, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8003c66:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;

    /* Set IC filter for Channel 1 (ICF1) */
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, (uint32_t)(pHandle->ICx_Filter) << 20U);
 8003c6a:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8003c6e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
    pHandle->SensorIsReliable = true;
 8003c72:	2501      	movs	r5, #1
 8003c74:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 8003c78:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8003c7c:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c7e:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003c80:	695a      	ldr	r2, [r3, #20]
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);


    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 8003c82:	2100      	movs	r1, #0
 8003c84:	432a      	orrs	r2, r5
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
 8003c90:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	f042 0202 	orr.w	r2, r2, #2
 8003c98:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	432a      	orrs	r2, r5
 8003c9e:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8003ca0:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	432a      	orrs	r2, r5
 8003ca6:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	432a      	orrs	r2, r5
 8003cac:	601a      	str	r2, [r3, #0]
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);


    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8003cae:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8003cb2:	b163      	cbz	r3, 8003cce <HALL_Init+0x106>
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b2d9      	uxtb	r1, r3
 8003cb8:	f100 0350 	add.w	r3, r0, #80	; 0x50
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8003cbc:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8003cc0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003cc4:	304c      	adds	r0, #76	; 0x4c
 8003cc6:	f840 2f04 	str.w	r2, [r0, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	d1fb      	bne.n	8003cc6 <HALL_Init+0xfe>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	f04f 0c96 	mov.w	ip, #150	; 0x96
      pHandle->HallTimeout = 150U;
 8003cd4:	4665      	mov	r5, ip
 8003cd6:	e798      	b.n	8003c0a <HALL_Init+0x42>
 8003cd8:	10624dd3 	.word	0x10624dd3
 8003cdc:	aaaaaaab 	.word	0xaaaaaaab

08003ce0 <HALL_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8003ce0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8003ce2:	68d1      	ldr	r1, [r2, #12]
 8003ce4:	f021 0102 	bic.w	r1, r1, #2

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 8003ce8:	2300      	movs	r3, #0
{
 8003cea:	b430      	push	{r4, r5}

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8003cec:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 8003cf0:	60d1      	str	r1, [r2, #12]
    pHandle->SensorIsReliable = true;
 8003cf2:	2101      	movs	r1, #1
    pHandle->RatioDec = false;
 8003cf4:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
    pHandle->Direction = POSITIVE;
 8003cf8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    pHandle->RatioInc = false;
 8003cfc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    pHandle->SpeedFIFOIdx = 0U;
 8003d00:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    pHandle->FirstCapt = 0U;
 8003d04:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    pHandle->_Super.bSpeedErrorNumber = 0;
 8003d08:	7003      	strb	r3, [r0, #0]
    pHandle->BufferFilled = 0U;
 8003d0a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    pHandle->_Super.hMecAccelUnitP = 0;
 8003d0e:	8243      	strh	r3, [r0, #18]
    pHandle->OVFCounter = 0U;
 8003d10:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
    pHandle->CompSpeed = 0;
 8003d14:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
    pHandle->SensorIsReliable = true;
 8003d18:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8003d1c:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8003d1e:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003d20:	6813      	ldr	r3, [r2, #0]
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8003d26:	68d3      	ldr	r3, [r2, #12]
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	60d3      	str	r3, [r2, #12]
    /* Nothing to do */
  }
  else
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
 8003d2e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003d32:	bb0b      	cbnz	r3, 8003d78 <HALL_Clear+0x98>
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8003d34:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8003d36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d38:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8003d3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d3c:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8003d3e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003d40:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003d42:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8003d46:	bf0c      	ite	eq
 8003d48:	2401      	moveq	r4, #1
 8003d4a:	2400      	movne	r4, #0
 8003d4c:	43ab      	bics	r3, r5
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8003d5c:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8003d5e:	bf08      	it	eq
 8003d60:	f043 0301 	orreq.w	r3, r3, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8003d6a:	2a05      	cmp	r2, #5
 8003d6c:	d85c      	bhi.n	8003e28 <HALL_Clear+0x148>
 8003d6e:	e8df f002 	tbb	[pc, r2]
 8003d72:	3329      	.short	0x3329
 8003d74:	1f51473d 	.word	0x1f51473d
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8003d78:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8003d7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003d7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d7e:	6914      	ldr	r4, [r2, #16]
 8003d80:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8003d82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d84:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003d86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d88:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8003d8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2101      	moveq	r1, #1
 8003d90:	2100      	movne	r1, #0
 8003d92:	43ab      	bics	r3, r5
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	43a2      	bics	r2, r4
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2201      	moveq	r2, #1
 8003da0:	2200      	movne	r2, #0
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003da8:	f082 0204 	eor.w	r2, r2, #4
 8003dac:	4313      	orrs	r3, r2
 8003dae:	e7d9      	b.n	8003d64 <HALL_Clear+0x84>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8003db0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003db2:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8003db6:	3b3f      	subs	r3, #63	; 0x3f
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	8083      	strh	r3, [r0, #4]
}
 8003dbc:	bc30      	pop	{r4, r5}
        break;
      }
    }

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003dbe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003dc2:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8003dc4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003dc6:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8003dca:	333f      	adds	r3, #63	; 0x3f
 8003dcc:	b21b      	sxth	r3, r3
}
 8003dce:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8003dd0:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003dd2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003dd6:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8003dd8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003dda:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8003dde:	3b2a      	subs	r3, #42	; 0x2a
 8003de0:	b21b      	sxth	r3, r3
}
 8003de2:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8003de4:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003de6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003dea:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8003dec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003dee:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8003df2:	332a      	adds	r3, #42	; 0x2a
 8003df4:	b21b      	sxth	r3, r3
}
 8003df6:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8003df8:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003dfa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003dfe:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8003e00:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003e02:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8003e06:	3b15      	subs	r3, #21
 8003e08:	b21b      	sxth	r3, r3
}
 8003e0a:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8003e0c:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003e0e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003e12:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8003e14:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003e16:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8003e1a:	3315      	adds	r3, #21
 8003e1c:	b21b      	sxth	r3, r3
}
 8003e1e:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8003e20:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003e22:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8003e26:	4770      	bx	lr
        pHandle->SensorIsReliable = false;
 8003e28:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8003e2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8003e2e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 8003e32:	e7c3      	b.n	8003dbc <HALL_Clear+0xdc>

08003e34 <HALL_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8003e34:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8003e38:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003e3c:	429a      	cmp	r2, r3
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8003e3e:	8883      	ldrh	r3, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8003e40:	d00f      	beq.n	8003e62 <HALL_CalcElAngle+0x2e>
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8003e42:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8003e46:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8003e4a:	b291      	uxth	r1, r2
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8003e4c:	440b      	add	r3, r1
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8003e4e:	4461      	add	r1, ip
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8003e50:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8003e54:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8003e58:	4463      	add	r3, ip
 8003e5a:	b21b      	sxth	r3, r3
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8003e5c:	8083      	strh	r3, [r0, #4]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8003e62:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8003e66:	4413      	add	r3, r2
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	8083      	strh	r3, [r0, #4]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4770      	bx	lr

08003e70 <HALL_CalcAvrgMecSpeedUnit>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4604      	mov	r4, r0
    if (pHandle->SensorIsReliable)
 8003e74:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8003e78:	460d      	mov	r5, r1
    if (pHandle->SensorIsReliable)
 8003e7a:	b180      	cbz	r0, 8003e9e <HALL_CalcAvrgMecSpeedUnit+0x2e>
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8003e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8003e7e:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d811      	bhi.n	8003eac <HALL_CalcAvrgMecSpeedUnit+0x3c>
        pHandle->_Super.hElSpeedDpp = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	81e3      	strh	r3, [r4, #14]
        *hMecSpeedUnit = 0;
 8003e8c:	800b      	strh	r3, [r1, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4620      	mov	r0, r4
 8003e92:	f001 f943 	bl	800511c <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8003e96:	f9b5 3000 	ldrsh.w	r3, [r5]
 8003e9a:	81a3      	strh	r3, [r4, #12]
}
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8003e9e:	78e3      	ldrb	r3, [r4, #3]
 8003ea0:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8003ea2:	4603      	mov	r3, r0
      pHandle->_Super.hElSpeedDpp = 0;
 8003ea4:	81e0      	strh	r0, [r4, #14]
      *hMecSpeedUnit = 0;
 8003ea6:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8003ea8:	81a3      	strh	r3, [r4, #12]
}
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8003eac:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8003eb0:	81e3      	strh	r3, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8003eb2:	b31b      	cbz	r3, 8003efc <HALL_CalcAvrgMecSpeedUnit+0x8c>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8003eb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <HALL_CalcAvrgMecSpeedUnit+0x88>
            if (true == pHandle->HallMtpa)
 8003ebc:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8003ec0:	b9f2      	cbnz	r2, 8003f00 <HALL_CalcAvrgMecSpeedUnit+0x90>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8003ec2:	88a2      	ldrh	r2, [r4, #4]
 8003ec4:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8003ec8:	1a89      	subs	r1, r1, r2
 8003eca:	b209      	sxth	r1, r1
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8003ecc:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8003ed0:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8003ed4:	fb91 f1f2 	sdiv	r1, r1, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8003ed8:	8b62      	ldrh	r2, [r4, #26]
 8003eda:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8003ee2:	69e1      	ldr	r1, [r4, #28]
 8003ee4:	7862      	ldrb	r2, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 8003ee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eea:	005b      	lsls	r3, r3, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8003eec:	fb01 f202 	mul.w	r2, r1, r2
 8003ef0:	fb93 f3f2 	sdiv	r3, r3, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8003ef4:	802b      	strh	r3, [r5, #0]
 8003ef6:	e7ca      	b.n	8003e8e <HALL_CalcAvrgMecSpeedUnit+0x1e>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8003ef8:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8003efc:	802b      	strh	r3, [r5, #0]
 8003efe:	e7c6      	b.n	8003e8e <HALL_CalcAvrgMecSpeedUnit+0x1e>
              pHandle->CompSpeed = 0;
 8003f00:	2100      	movs	r1, #0
 8003f02:	e7e9      	b.n	8003ed8 <HALL_CalcAvrgMecSpeedUnit+0x68>

08003f04 <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8003f04:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d047      	beq.n	8003f9c <HALL_TIMx_CC_IRQHandler+0x98>
{
 8003f0c:	b570      	push	{r4, r5, r6, lr}
    if (DEGREES_120 == pHandle->SensorPlacement)
 8003f0e:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8003f12:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8003f16:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if (DEGREES_120 == pHandle->SensorPlacement)
 8003f1a:	b333      	cbz	r3, 8003f6a <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8003f1c:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 8003f20:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8003f22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f24:	691a      	ldr	r2, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f28:	691e      	ldr	r6, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8003f2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f2c:	4393      	bics	r3, r2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003f2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f30:	bf0c      	ite	eq
 8003f32:	2201      	moveq	r2, #1
 8003f34:	2200      	movne	r2, #0
 8003f36:	43b3      	bics	r3, r6
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8003f40:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8003f44:	bf0c      	ite	eq
 8003f46:	2201      	moveq	r2, #1
 8003f48:	2200      	movne	r2, #0
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	f082 0204 	eor.w	r2, r2, #4
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch (pHandle->HallState)
 8003f56:	3b01      	subs	r3, #1
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8003f58:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch (pHandle->HallState)
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	f200 8176 	bhi.w	800424c <HALL_TIMx_CC_IRQHandler+0x348>
 8003f60:	e8df f003 	tbb	[pc, r3]
 8003f64:	4d5c6e80 	.word	0x4d5c6e80
 8003f68:	1e3b      	.short	0x1e3b
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8003f6a:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8003f6e:	6912      	ldr	r2, [r2, #16]
 8003f70:	4393      	bics	r3, r2
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8003f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f74:	691c      	ldr	r4, [r3, #16]
 8003f76:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003f78:	bf0c      	ite	eq
 8003f7a:	2201      	moveq	r2, #1
 8003f7c:	2200      	movne	r2, #0
 8003f7e:	43a3      	bics	r3, r4
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8003f8c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003f8e:	6914      	ldr	r4, [r2, #16]
 8003f90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003f92:	43a2      	bics	r2, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8003f94:	bf08      	it	eq
 8003f96:	f043 0301 	orreq.w	r3, r3, #1
 8003f9a:	e7da      	b.n	8003f52 <HALL_TIMx_CC_IRQHandler+0x4e>
}
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	4770      	bx	lr
        if (STATE_2 == bPrevHallState)
 8003fa0:	f1bc 0f02 	cmp.w	ip, #2
 8003fa4:	f000 808b 	beq.w	80040be <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if (STATE_4 == bPrevHallState)
 8003fa8:	f1bc 0f04 	cmp.w	ip, #4
 8003fac:	f000 80ac 	beq.w	8004108 <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 8003fb0:	460b      	mov	r3, r1
    if (true == pHandle->HallMtpa)
 8003fb2:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8003fb6:	b112      	cbz	r2, 8003fbe <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8003fb8:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 8003fbc:	8082      	strh	r2, [r0, #4]
    if (0U == pHandle->FirstCapt)
 8003fbe:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	f040 80ac 	bne.w	8004120 <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 8003fc8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8003fcc:	3301      	adds	r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8003fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
        if (STATE_4 == bPrevHallState)
 8003fda:	f1bc 0f04 	cmp.w	ip, #4
 8003fde:	d078      	beq.n	80040d2 <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if (STATE_1 == bPrevHallState)
 8003fe0:	f1bc 0f01 	cmp.w	ip, #1
 8003fe4:	d1e4      	bne.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8003fe6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8003fe8:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8003fec:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8003fee:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8003ff0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8003ff4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e04d      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
        if (STATE_6 == bPrevHallState)
 8003ffe:	f1bc 0f06 	cmp.w	ip, #6
 8004002:	d077      	beq.n	80040f4 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if (STATE_5 == bPrevHallState)
 8004004:	f1bc 0f05 	cmp.w	ip, #5
 8004008:	d1d2      	bne.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 800400a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800400c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004010:	22ff      	movs	r2, #255	; 0xff
 8004012:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	e03e      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
        if (STATE_1 == bPrevHallState)
 800401c:	f1bc 0f01 	cmp.w	ip, #1
 8004020:	d05e      	beq.n	80040e0 <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if (STATE_2 == bPrevHallState)
 8004022:	f1bc 0f02 	cmp.w	ip, #2
 8004026:	d1c3      	bne.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8004028:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800402a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800402e:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8004030:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8004032:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004036:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	e02c      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
        if (STATE_3 == bPrevHallState)
 8004040:	f1bc 0f03 	cmp.w	ip, #3
 8004044:	d031      	beq.n	80040aa <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if (STATE_6 == bPrevHallState)
 8004046:	f1bc 0f06 	cmp.w	ip, #6
 800404a:	d1b1      	bne.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 800404c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800404e:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8004052:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8004054:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8004056:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800405a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	e01a      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
        if (STATE_5 == bPrevHallState)
 8004064:	f1bc 0f05 	cmp.w	ip, #5
 8004068:	d00e      	beq.n	8004088 <HALL_TIMx_CC_IRQHandler+0x184>
        else if (STATE_3 == bPrevHallState)
 800406a:	f1bc 0f03 	cmp.w	ip, #3
 800406e:	d19f      	bne.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8004070:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004072:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8004076:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8004078:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 800407a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800407e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	e008      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004088:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800408a:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800408e:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004090:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8004092:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004096:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 800409a:	428b      	cmp	r3, r1
 800409c:	d089      	beq.n	8003fb2 <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0U ;
 800409e:	2200      	movs	r2, #0
 80040a0:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 80040a4:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80040a8:	e783      	b.n	8003fb2 <HALL_TIMx_CC_IRQHandler+0xae>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80040aa:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80040ac:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 80040b0:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80040b2:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 80040b4:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80040b8:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80040bc:	e7ed      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80040be:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80040c0:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 80040c4:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80040c6:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80040c8:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80040cc:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80040d0:	e7e3      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80040d2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80040d4:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80040d8:	2301      	movs	r3, #1
 80040da:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80040de:	e7dc      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80040e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80040e2:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80040e6:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80040ea:	3355      	adds	r3, #85	; 0x55
 80040ec:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80040f0:	4663      	mov	r3, ip
 80040f2:	e7d2      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 80040f4:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80040f6:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80040fa:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 80040fc:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80040fe:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8004102:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8004106:	e7c8      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8004108:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800410a:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800410e:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8004110:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8004112:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004116:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	e7bc      	b.n	800409a <HALL_TIMx_CC_IRQHandler+0x196>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8004120:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8004124:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8004128:	4562      	cmp	r2, ip
 800412a:	d205      	bcs.n	8004138 <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 800412c:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8004130:	3201      	adds	r2, #1
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 8004138:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 800413a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 800413c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if (pHandle->OVFCounter != 0U)
 8004140:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8004144:	0412      	lsls	r2, r2, #16
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 8004146:	b289      	uxth	r1, r1
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8004148:	fa12 f286 	uxtah	r2, r2, r6
      if (pHandle->OVFCounter != 0U)
 800414c:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 8004150:	2d00      	cmp	r5, #0
 8004152:	d045      	beq.n	80041e0 <HALL_TIMx_CC_IRQHandler+0x2dc>
        hAux = hPrscBuf + 1U;
 8004154:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 8004156:	b289      	uxth	r1, r1
 8004158:	fb01 f202 	mul.w	r2, r1, r2
        if (pHandle->RatioInc)
 800415c:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8004160:	2900      	cmp	r1, #0
 8004162:	d047      	beq.n	80041f4 <HALL_TIMx_CC_IRQHandler+0x2f0>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004164:	2100      	movs	r1, #0
 8004166:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
      if (wCaptBuf < pHandle->MinPeriod)
 800416a:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 800416e:	4291      	cmp	r1, r2
 8004170:	d831      	bhi.n	80041d6 <HALL_TIMx_CC_IRQHandler+0x2d2>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004172:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
        if (wCaptBuf >= pHandle->MaxPeriod)
 8004176:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800417a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800417e:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
        if (wCaptBuf >= pHandle->MaxPeriod)
 8004182:	4295      	cmp	r5, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004184:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004188:	bf88      	it	hi
 800418a:	fb03 f502 	mulhi.w	r5, r3, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800418e:	eba4 0406 	sub.w	r4, r4, r6
        pHandle->SpeedFIFOIdx++;
 8004192:	f101 0101 	add.w	r1, r1, #1
 8004196:	b2c9      	uxtb	r1, r1
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004198:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800419c:	bf8a      	itet	hi
 800419e:	1964      	addhi	r4, r4, r5
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 80041a0:	435d      	mulls	r5, r3
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80041a2:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 80041a6:	458c      	cmp	ip, r1
 80041a8:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
          pHandle->SpeedFIFOIdx = 0U;
 80041ac:	bf08      	it	eq
 80041ae:	2100      	moveq	r1, #0
 80041b0:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
        if (pHandle->SensorIsReliable)
 80041b4:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 80041b8:	b341      	cbz	r1, 800420c <HALL_TIMx_CC_IRQHandler+0x308>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 80041ba:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 80041be:	458c      	cmp	ip, r1
 80041c0:	d939      	bls.n	8004236 <HALL_TIMx_CC_IRQHandler+0x332>
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	d037      	beq.n	8004236 <HALL_TIMx_CC_IRQHandler+0x332>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80041c6:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 80041ca:	fbb1 f2f2 	udiv	r2, r1, r2
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 80041d2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80041dc:	2000      	movs	r0, #0
 80041de:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->RatioDec) /* and don't decrease it again */
 80041e0:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80041e4:	b1ad      	cbz	r5, 8004212 <HALL_TIMx_CC_IRQHandler+0x30e>
          hAux = hPrscBuf + 2U;
 80041e6:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 80041e8:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 80041ea:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 80041ee:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 80041f2:	e7ba      	b.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
 80041f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 80041f6:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 80041fa:	428d      	cmp	r5, r1
 80041fc:	d9b5      	bls.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
 80041fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8004200:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004202:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004204:	2101      	movs	r1, #1
 8004206:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 800420a:	e7ae      	b.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
          pHandle->AvrElSpeedDpp = 0;
 800420c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8004210:	e7e1      	b.n	80041d6 <HALL_TIMx_CC_IRQHandler+0x2d2>
          uint16_t hAux = hPrscBuf + 1U;
 8004212:	3101      	adds	r1, #1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8004214:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 8004216:	b289      	uxth	r1, r1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8004218:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 800421c:	fb01 f202 	mul.w	r2, r1, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8004220:	d2a3      	bcs.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004222:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 8004224:	2900      	cmp	r1, #0
 8004226:	d0a0      	beq.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
 8004228:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 800422a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800422c:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800422e:	2101      	movs	r1, #1
 8004230:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 8004234:	e799      	b.n	800416a <HALL_TIMx_CC_IRQHandler+0x266>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 8004236:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 800423a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 800423e:	fb92 fcfc 	sdiv	ip, r2, ip
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 8004242:	fb93 f3fc 	sdiv	r3, r3, ip
 8004246:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800424a:	e7c4      	b.n	80041d6 <HALL_TIMx_CC_IRQHandler+0x2d2>
        pHandle->SensorIsReliable = false;
 800424c:	2300      	movs	r3, #0
 800424e:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8004252:	e6ad      	b.n	8003fb0 <HALL_TIMx_CC_IRQHandler+0xac>

08004254 <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8004254:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8004258:	b1e3      	cbz	r3, 8004294 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800425a:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 800425c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8004260:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8004262:	3301      	adds	r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800426a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 800426c:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8004270:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8004274:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8004278:	fb02 f303 	mul.w	r3, r2, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 800427c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004280:	fb04 2202 	mla	r2, r4, r2, r2
 8004284:	fbb3 f3f2 	udiv	r3, r3, r2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8004288:	b29b      	uxth	r3, r3
 800428a:	4299      	cmp	r1, r3
 800428c:	d204      	bcs.n	8004298 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800428e:	2000      	movs	r0, #0
 8004290:	bc30      	pop	{r4, r5}
 8004292:	4770      	bx	lr
 8004294:	2000      	movs	r0, #0
 8004296:	4770      	bx	lr
    if (DEGREES_120 == pHandle->SensorPlacement)
 8004298:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 800429c:	2200      	movs	r2, #0
 800429e:	81c2      	strh	r2, [r0, #14]
    if (DEGREES_120 == pHandle->SensorPlacement)
 80042a0:	bb0b      	cbnz	r3, 80042e6 <HALL_TIMx_UP_IRQHandler+0x92>
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80042a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80042a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042a6:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80042a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042aa:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80042ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80042ae:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80042b0:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80042b4:	bf0c      	ite	eq
 80042b6:	2401      	moveq	r4, #1
 80042b8:	2400      	movne	r4, #0
 80042ba:	43ab      	bics	r3, r5
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80042ca:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80042cc:	bf08      	it	eq
 80042ce:	f043 0301 	orreq.w	r3, r3, #1
    switch (pHandle->HallState)
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80042d8:	2a05      	cmp	r2, #5
 80042da:	d86f      	bhi.n	80043bc <HALL_TIMx_UP_IRQHandler+0x168>
 80042dc:	e8df f002 	tbb	[pc, r2]
 80042e0:	52596067 	.word	0x52596067
 80042e4:	1f4b      	.short	0x1f4b
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80042e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80042e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80042ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042ec:	6914      	ldr	r4, [r2, #16]
 80042ee:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80042f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042f2:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80042f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042f6:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80042f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80042fa:	bf0c      	ite	eq
 80042fc:	2101      	moveq	r1, #1
 80042fe:	2100      	movne	r1, #0
 8004300:	43ab      	bics	r3, r5
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	43a2      	bics	r2, r4
 800430a:	bf0c      	ite	eq
 800430c:	2201      	moveq	r2, #1
 800430e:	2200      	movne	r2, #0
 8004310:	0092      	lsls	r2, r2, #2
 8004312:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004316:	f082 0204 	eor.w	r2, r2, #4
 800431a:	4313      	orrs	r3, r2
 800431c:	e7d9      	b.n	80042d2 <HALL_TIMx_UP_IRQHandler+0x7e>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 800431e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004320:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004324:	3b3f      	subs	r3, #63	; 0x3f
 8004326:	b21b      	sxth	r3, r3
 8004328:	8083      	strh	r3, [r0, #4]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 800432a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800432e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0U;
 8004332:	2200      	movs	r2, #0
 8004334:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0U;
 8004338:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 800433c:	b17c      	cbz	r4, 800435e <HALL_TIMx_UP_IRQHandler+0x10a>
 800433e:	1e62      	subs	r2, r4, #1
 8004340:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8004342:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8004346:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800434a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800434e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8004352:	f843 1f04 	str.w	r1, [r3, #4]!
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8004356:	429a      	cmp	r2, r3
 8004358:	d1fb      	bne.n	8004352 <HALL_TIMx_UP_IRQHandler+0xfe>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800435a:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0U ;
 800435e:	2300      	movs	r3, #0
 8004360:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 8004364:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum = (int32_t)tempReg;
 8004368:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 800436c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8004370:	bc30      	pop	{r4, r5}
 8004372:	2000      	movs	r0, #0
 8004374:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8004376:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004378:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800437c:	3315      	adds	r3, #21
 800437e:	b21b      	sxth	r3, r3
 8004380:	8083      	strh	r3, [r0, #4]
        break;
 8004382:	e7d2      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8004384:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004386:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800438a:	3b15      	subs	r3, #21
 800438c:	b21b      	sxth	r3, r3
 800438e:	8083      	strh	r3, [r0, #4]
        break;
 8004390:	e7cb      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8004392:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004394:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004398:	332a      	adds	r3, #42	; 0x2a
 800439a:	b21b      	sxth	r3, r3
 800439c:	8083      	strh	r3, [r0, #4]
        break;
 800439e:	e7c4      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 80043a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80043a2:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80043a6:	3b2a      	subs	r3, #42	; 0x2a
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	8083      	strh	r3, [r0, #4]
        break;
 80043ac:	e7bd      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 80043ae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80043b0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80043b4:	333f      	adds	r3, #63	; 0x3f
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	8083      	strh	r3, [r0, #4]
        break;
 80043ba:	e7b6      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->SensorIsReliable = false;
 80043bc:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80043be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 80043c2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 80043c6:	e7b0      	b.n	800432a <HALL_TIMx_UP_IRQHandler+0xd6>

080043c8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear(MotorPowMeas_Handle_t *pHandle)
{
 80043c8:	b510      	push	{r4, lr}
  {
#endif
    uint16_t i;
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      pHandle->hMeasBuffer[i] = 0;
 80043ca:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80043ce:	4604      	mov	r4, r0
      pHandle->hMeasBuffer[i] = 0;
 80043d0:	2100      	movs	r1, #0
 80043d2:	f000 ffab 	bl	800532c <memset>
    }
    pHandle->hNextMeasBufferIndex = 0u;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = 0u;
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	bf00      	nop

080043e0 <MPM_CalcElMotorPower>:
#endif
    uint16_t i;
    int32_t wAux = 0;

    /* Store the measured values in the buffer.*/
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80043e0:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
    pHandle->hNextMeasBufferIndex++;
 80043e4:	1c53      	adds	r3, r2, #1
 80043e6:	b29b      	uxth	r3, r3
    if (pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT)
 80043e8:	2b7f      	cmp	r3, #127	; 0x7f
    {
      pHandle->hNextMeasBufferIndex = 0u;
 80043ea:	bf88      	it	hi
 80043ec:	2300      	movhi	r3, #0
{
 80043ee:	b500      	push	{lr}
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80043f0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80043f4:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80043f8:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
      pHandle->hNextMeasBufferIndex = 0u;
 80043fc:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
    int32_t wAux = 0;
 8004400:	2200      	movs	r2, #0
 8004402:	1e83      	subs	r3, r0, #2
    }
    /* Compute the average measured motor power */
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 8004404:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 8004408:	4573      	cmp	r3, lr
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 800440a:	4462      	add	r2, ip
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 800440c:	d1fa      	bne.n	8004404 <MPM_CalcElMotorPower+0x24>
    }
    wAux /= ((int32_t)MPM_BUFFER_LENGHT);
 800440e:	2a00      	cmp	r2, #0
 8004410:	bfb8      	it	lt
 8004412:	327f      	addlt	r2, #127	; 0x7f
 8004414:	11d2      	asrs	r2, r2, #7
    pHandle->hAvrgElMotorPowerW = (int16_t)wAux;
 8004416:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  }
#endif

  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800441a:	4608      	mov	r0, r1
 800441c:	f85d fb04 	ldr.w	pc, [sp], #4

08004420 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8004420:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004422:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004424:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004426:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004428:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800442a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800442c:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800442e:	4770      	bx	lr

08004430 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004430:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8004432:	4770      	bx	lr

08004434 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004434:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8004438:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800443c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8004440:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004442:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004446:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 800444a:	b162      	cbz	r2, 8004466 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800444c:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004450:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8004452:	188c      	adds	r4, r1, r2
 8004454:	d420      	bmi.n	8004498 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8004456:	2900      	cmp	r1, #0
 8004458:	db2a      	blt.n	80044b0 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800445a:	68c2      	ldr	r2, [r0, #12]
 800445c:	42a2      	cmp	r2, r4
 800445e:	db02      	blt.n	8004466 <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8004460:	6902      	ldr	r2, [r0, #16]
 8004462:	42a2      	cmp	r2, r4
 8004464:	dd22      	ble.n	80044ac <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004466:	8b81      	ldrh	r1, [r0, #28]
 8004468:	410b      	asrs	r3, r1
 800446a:	8bc1      	ldrh	r1, [r0, #30]
 800446c:	fa42 f101 	asr.w	r1, r2, r1
 8004470:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004472:	459c      	cmp	ip, r3
 8004474:	da05      	bge.n	8004482 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004476:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800447a:	441a      	add	r2, r3
 800447c:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800447e:	4660      	mov	r0, ip
 8004480:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8004482:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8004484:	bfc9      	itett	gt
 8004486:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 800448a:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 800448e:	18d2      	addgt	r2, r2, r3
 8004490:	46f4      	movgt	ip, lr
 8004492:	6082      	str	r2, [r0, #8]
}
 8004494:	4660      	mov	r0, ip
 8004496:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8004498:	2900      	cmp	r1, #0
 800449a:	ddde      	ble.n	800445a <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 800449c:	2a00      	cmp	r2, #0
 800449e:	dddc      	ble.n	800445a <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80044a0:	68c2      	ldr	r2, [r0, #12]
 80044a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044a6:	428a      	cmp	r2, r1
 80044a8:	d1dd      	bne.n	8004466 <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 80044aa:	4614      	mov	r4, r2
 80044ac:	4622      	mov	r2, r4
 80044ae:	e7da      	b.n	8004466 <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 80044b0:	4902      	ldr	r1, [pc, #8]	; (80044bc <PI_Controller+0x88>)
 80044b2:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 80044b6:	bf28      	it	cs
 80044b8:	460c      	movcs	r4, r1
 80044ba:	e7ce      	b.n	800445a <PI_Controller+0x26>
 80044bc:	80000001 	.word	0x80000001

080044c0 <PQD_CalcElMotorPower>:
  {
#endif
    int32_t wAux;
    int32_t wAux2;
    int32_t wAux3;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80044c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 80044c4:	b570      	push	{r4, r5, r6, lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80044c6:	8b11      	ldrh	r1, [r2, #24]
 80044c8:	89d4      	ldrh	r4, [r2, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80044ca:	8993      	ldrh	r3, [r2, #12]
 80044cc:	8ad2      	ldrh	r2, [r2, #22]
    wAux /= 65536;

    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 80044ce:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 80044d2:	4605      	mov	r5, r0
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80044d4:	fb14 f401 	smulbb	r4, r4, r1
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 80044d8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80044dc:	fb13 4402 	smlabb	r4, r3, r2, r4
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 80044e0:	f7ff fb3c 	bl	8003b5c <VBS_GetAvBusVoltage_V>
    wAux /= 65536;
 80044e4:	1e23      	subs	r3, r4, #0
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80044e6:	490f      	ldr	r1, [pc, #60]	; (8004524 <PQD_CalcElMotorPower+0x64>)
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 80044e8:	fb06 f000 	mul.w	r0, r6, r0
    wAux /= 65536;
 80044ec:	bfb8      	it	lt
 80044ee:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80044f2:	ea4f 72e0 	mov.w	r2, r0, asr #31
    wAux /= 65536;
 80044f6:	bfb8      	it	lt
 80044f8:	33ff      	addlt	r3, #255	; 0xff
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80044fa:	fb81 1000 	smull	r1, r0, r1, r0
 80044fe:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
    wAux /= 65536;
 8004502:	141b      	asrs	r3, r3, #16

    wAux3 = wAux * wAux2;
 8004504:	fb00 f303 	mul.w	r3, r0, r3
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
    wAux3 /= 10;
    wAux3 /= 65536;
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <PQD_CalcElMotorPower+0x68>)
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800450a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800450e:	005b      	lsls	r3, r3, #1
    wAux3 /= 65536;
 8004510:	fb81 2103 	smull	r2, r1, r1, r3
 8004514:	17db      	asrs	r3, r3, #31

    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 8004516:	4628      	mov	r0, r5
 8004518:	ebc3 41a1 	rsb	r1, r3, r1, asr #18
#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 800451c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 8004520:	f7ff bf5e 	b.w	80043e0 <MPM_CalcElMotorPower>
 8004524:	1b4e81b5 	.word	0x1b4e81b5
 8004528:	66666667 	.word	0x66666667

0800452c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <startTimers+0x60>)
 800452e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8004530:	07d2      	lsls	r2, r2, #31
 8004532:	d415      	bmi.n	8004560 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8004534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800453c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800453e:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004540:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004544:	f002 0201 	and.w	r2, r2, #1
 8004548:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800454a:	9a01      	ldr	r2, [sp, #4]
 800454c:	694a      	ldr	r2, [r1, #20]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800455c:	b002      	add	sp, #8
 800455e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8004560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004564:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800456c:	f041 0120 	orr.w	r1, r1, #32
 8004570:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004572:	6959      	ldr	r1, [r3, #20]
 8004574:	f041 0101 	orr.w	r1, r1, #1
 8004578:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004580:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004590:	3201      	adds	r2, #1
{
 8004592:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004594:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004596:	f06f 0602 	mvn.w	r6, #2
 800459a:	0155      	lsls	r5, r2, #5
 800459c:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800459e:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80045a0:	f893 c000 	ldrb.w	ip, [r3]
 80045a4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80045a8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80045ac:	d80c      	bhi.n	80045c8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80045ae:	6904      	ldr	r4, [r0, #16]
 80045b0:	07a4      	lsls	r4, r4, #30
 80045b2:	d5f5      	bpl.n	80045a0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80045b4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80045b8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80045ba:	6106      	str	r6, [r0, #16]
 80045bc:	d8f0      	bhi.n	80045a0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80045be:	781c      	ldrb	r4, [r3, #0]
 80045c0:	2c0f      	cmp	r4, #15
 80045c2:	d8ed      	bhi.n	80045a0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80045c4:	2301      	movs	r3, #1
 80045c6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
}
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	bf00      	nop

080045cc <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80045cc:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 80045d0:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80045d2:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80045d4:	6a22      	ldr	r2, [r4, #32]
 80045d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045da:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 80045dc:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 80045e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 80045e4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 80045e6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80045e8:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 80045ea:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 80045ec:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 80045ee:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 80045f2:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 80045f4:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 80045f8:	2a05      	cmp	r2, #5
 80045fa:	f200 80a8 	bhi.w	800474e <R3_1_GetPhaseCurrents+0x182>
 80045fe:	e8df f002 	tbb	[pc, r2]
 8004602:	1c37      	.short	0x1c37
 8004604:	3703031c 	.word	0x3703031c
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004608:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800460a:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800460c:	4a53      	ldr	r2, [pc, #332]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
 800460e:	4293      	cmp	r3, r2
 8004610:	db5c      	blt.n	80046cc <R3_1_GetPhaseCurrents+0x100>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004612:	6fc2      	ldr	r2, [r0, #124]	; 0x7c

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8004614:	4d51      	ldr	r5, [pc, #324]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
      else  if ( wAux > INT16_MAX )
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800461a:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 800461e:	bfa8      	it	ge
 8004620:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8004624:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 8004626:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 8004628:	da57      	bge.n	80046da <R3_1_GetPhaseCurrents+0x10e>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 800462a:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 800462e:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004630:	fa1f f38e 	uxth.w	r3, lr
 8004634:	f248 0201 	movw	r2, #32769	; 0x8001
 8004638:	e033      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800463a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800463c:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
 8004640:	429c      	cmp	r4, r3
 8004642:	db3d      	blt.n	80046c0 <R3_1_GetPhaseCurrents+0xf4>
      else  if ( wAux > INT16_MAX )
 8004644:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8004648:	db71      	blt.n	800472e <R3_1_GetPhaseCurrents+0x162>
        pStator_Currents->a = INT16_MAX;
 800464a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800464e:	4613      	mov	r3, r2
 8004650:	800a      	strh	r2, [r1, #0]
 8004652:	4614      	mov	r4, r2
 8004654:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8004656:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800465a:	ebac 0202 	sub.w	r2, ip, r2
 800465e:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8004660:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004664:	db4e      	blt.n	8004704 <R3_1_GetPhaseCurrents+0x138>
        pStator_Currents->b = INT16_MAX;
 8004666:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800466a:	804a      	strh	r2, [r1, #2]
 800466c:	4615      	mov	r5, r2
 800466e:	e018      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8004670:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8004674:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8004676:	4293      	cmp	r3, r2
 8004678:	db1c      	blt.n	80046b4 <R3_1_GetPhaseCurrents+0xe8>
      else  if ( wAux > INT16_MAX )
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	db48      	blt.n	8004712 <R3_1_GetPhaseCurrents+0x146>
        pStator_Currents->b = INT16_MAX;
 8004680:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004684:	461a      	mov	r2, r3
 8004686:	804b      	strh	r3, [r1, #2]
 8004688:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800468a:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 800468e:	ebac 0404 	sub.w	r4, ip, r4
 8004692:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004698:	db2c      	blt.n	80046f4 <R3_1_GetPhaseCurrents+0x128>
        pStator_Currents->a = INT16_MAX;
 800469a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800469e:	800b      	strh	r3, [r1, #0]
 80046a0:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80046a2:	4413      	add	r3, r2
 80046a4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80046a6:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
  pHandle->_Super.Ib = pStator_Currents->b;
 80046aa:	f8a0 5056 	strh.w	r5, [r0, #86]	; 0x56
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80046ae:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
}
 80046b2:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 80046b4:	4613      	mov	r3, r2
 80046b6:	804a      	strh	r2, [r1, #2]
 80046b8:	461d      	mov	r5, r3
 80046ba:	f248 0201 	movw	r2, #32769	; 0x8001
 80046be:	e7e4      	b.n	800468a <R3_1_GetPhaseCurrents+0xbe>
        pStator_Currents->a = -INT16_MAX;
 80046c0:	461c      	mov	r4, r3
 80046c2:	800b      	strh	r3, [r1, #0]
 80046c4:	46a6      	mov	lr, r4
 80046c6:	f248 0301 	movw	r3, #32769	; 0x8001
 80046ca:	e7c4      	b.n	8004656 <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = -INT16_MAX;
 80046cc:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80046ce:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 80046d0:	4d22      	ldr	r5, [pc, #136]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80046d2:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 80046d6:	45ac      	cmp	ip, r5
 80046d8:	dba7      	blt.n	800462a <R3_1_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 80046da:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 80046de:	db1c      	blt.n	800471a <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->b = INT16_MAX;
 80046e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 80046e4:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 80046e8:	804b      	strh	r3, [r1, #2]
 80046ea:	461a      	mov	r2, r3
 80046ec:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80046ee:	fa1f f38e 	uxth.w	r3, lr
 80046f2:	e7d6      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 80046f4:	4c19      	ldr	r4, [pc, #100]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
 80046f6:	42a3      	cmp	r3, r4
 80046f8:	da1f      	bge.n	800473a <R3_1_GetPhaseCurrents+0x16e>
        pStator_Currents->a = -INT16_MAX;
 80046fa:	800c      	strh	r4, [r1, #0]
 80046fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8004700:	46a6      	mov	lr, r4
 8004702:	e7ce      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 8004704:	4d15      	ldr	r5, [pc, #84]	; (800475c <R3_1_GetPhaseCurrents+0x190>)
 8004706:	42aa      	cmp	r2, r5
 8004708:	da1d      	bge.n	8004746 <R3_1_GetPhaseCurrents+0x17a>
        pStator_Currents->b = -INT16_MAX;
 800470a:	804d      	strh	r5, [r1, #2]
 800470c:	f248 0201 	movw	r2, #32769	; 0x8001
 8004710:	e7c7      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 8004712:	b21d      	sxth	r5, r3
 8004714:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004716:	b29a      	uxth	r2, r3
 8004718:	e7b7      	b.n	800468a <R3_1_GetPhaseCurrents+0xbe>
  pHandle->_Super.Ia = pStator_Currents->a;
 800471a:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 800471e:	fa0f f58c 	sxth.w	r5, ip
 8004722:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004724:	fa1f f38e 	uxth.w	r3, lr
 8004728:	fa1f f28c 	uxth.w	r2, ip
 800472c:	e7b9      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->a = ( int16_t )wAux;
 800472e:	fa0f fe84 	sxth.w	lr, r4
 8004732:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004736:	b2a3      	uxth	r3, r4
 8004738:	e78d      	b.n	8004656 <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 800473a:	fa0f fe83 	sxth.w	lr, r3
 800473e:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004742:	b29b      	uxth	r3, r3
 8004744:	e7ad      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 8004746:	b215      	sxth	r5, r2
 8004748:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800474a:	b292      	uxth	r2, r2
 800474c:	e7a9      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
  pHandle->_Super.Ia = pStator_Currents->a;
 800474e:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 8004752:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004756:	880b      	ldrh	r3, [r1, #0]
 8004758:	884a      	ldrh	r2, [r1, #2]
 800475a:	e7a2      	b.n	80046a2 <R3_1_GetPhaseCurrents+0xd6>
 800475c:	ffff8001 	.word	0xffff8001

08004760 <R3_1_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004760:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 8004764:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004766:	685c      	ldr	r4, [r3, #4]
 8004768:	6a22      	ldr	r2, [r4, #32]
 800476a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476e:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004770:	f890 208f 	ldrb.w	r2, [r0, #143]	; 0x8f
 8004774:	2a0f      	cmp	r2, #15
 8004776:	d813      	bhi.n	80047a0 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8004778:	f890 408e 	ldrb.w	r4, [r0, #142]	; 0x8e
 800477c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800477e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004782:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8004786:	6824      	ldr	r4, [r4, #0]
 8004788:	4422      	add	r2, r4
 800478a:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800478c:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 800478e:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8004792:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 8004794:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8004796:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8004798:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800479a:	67c2      	str	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 800479c:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80047a0:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80047a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80047a6:	600b      	str	r3, [r1, #0]
}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 80047ac:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80047ae:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 80047b2:	6862      	ldr	r2, [r4, #4]
 80047b4:	6a13      	ldr	r3, [r2, #32]
 80047b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ba:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80047bc:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d810      	bhi.n	80047e6 <R3_1_HFCurrentsCalibrationC+0x3a>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80047c4:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 80047c8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80047cc:	3214      	adds	r2, #20
 80047ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 80047d6:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80047da:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pHandle->PolarizationCounter++;
 80047de:	3301      	adds	r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80047e6:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80047ec:	600b      	str	r3, [r1, #0]
}
 80047ee:	4770      	bx	lr

080047f0 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80047f0:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = true;
 80047f4:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80047f8:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80047fa:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  WRITE_REG(TIMx->CCR1, CompareValue);
 80047fe:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004800:	f06f 0001 	mvn.w	r0, #1
 8004804:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004806:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004808:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800480a:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800480c:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800480e:	07db      	lsls	r3, r3, #31
 8004810:	d5fc      	bpl.n	800480c <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004812:	f06f 0301 	mvn.w	r3, #1
 8004816:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004818:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8004820:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8004824:	2b02      	cmp	r3, #2
 8004826:	d000      	beq.n	800482a <R3_1_TurnOnLowSides+0x3a>
 8004828:	4770      	bx	lr
{
 800482a:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800482c:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8004830:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004834:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8004836:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800483a:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 800483c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004840:	619a      	str	r2, [r3, #24]
 8004842:	4770      	bx	lr

08004844 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004844:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8004848:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800484c:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800484e:	f04f 0c00 	mov.w	ip, #0
{  
 8004852:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004854:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8004858:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800485a:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800485c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 800485e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004860:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004862:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004868:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800486a:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800486c:	07d2      	lsls	r2, r2, #31
 800486e:	d5fc      	bpl.n	800486a <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8004876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800487e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004886:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 800488a:	2a02      	cmp	r2, #2
 800488c:	d008      	beq.n	80048a0 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800488e:	f06f 0201 	mvn.w	r2, #1
 8004892:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800489a:	bc30      	pop	{r4, r5}
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80048a0:	6a18      	ldr	r0, [r3, #32]
 80048a2:	f240 5255 	movw	r2, #1365	; 0x555
 80048a6:	4210      	tst	r0, r2
 80048a8:	d009      	beq.n	80048be <R3_1_SwitchOnPWM+0x7a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80048aa:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80048ae:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 80048b2:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80048b4:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 80048b8:	6184      	str	r4, [r0, #24]
 80048ba:	6191      	str	r1, [r2, #24]
}
 80048bc:	e7e7      	b.n	800488e <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80048be:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80048c2:	688d      	ldr	r5, [r1, #8]
 80048c4:	69ca      	ldr	r2, [r1, #28]
 80048c6:	0424      	lsls	r4, r4, #16
 80048c8:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80048ca:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80048ce:	0400      	lsls	r0, r0, #16
 80048d0:	0412      	lsls	r2, r2, #16
 80048d2:	61a8      	str	r0, [r5, #24]
 80048d4:	61a2      	str	r2, [r4, #24]
}
 80048d6:	e7da      	b.n	800488e <R3_1_SwitchOnPWM+0x4a>

080048d8 <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80048d8:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80048dc:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80048de:	68d3      	ldr	r3, [r2, #12]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80048e6:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80048e8:	f04f 0c00 	mov.w	ip, #0
 80048ec:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 80048f0:	f890 0092 	ldrb.w	r0, [r0, #146]	; 0x92
 80048f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	b918      	cbnz	r0, 8004904 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80048fc:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8004900:	2b02      	cmp	r3, #2
 8004902:	d009      	beq.n	8004918 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004904:	f06f 0301 	mvn.w	r3, #1
 8004908:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800490a:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d5fc      	bpl.n	800490a <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004910:	f06f 0301 	mvn.w	r3, #1
 8004914:	6113      	str	r3, [r2, #16]
 8004916:	4770      	bx	lr
{
 8004918:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800491a:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800491e:	688d      	ldr	r5, [r1, #8]
 8004920:	69cb      	ldr	r3, [r1, #28]
 8004922:	0424      	lsls	r4, r4, #16
 8004924:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8004926:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	0400      	lsls	r0, r0, #16
 800492e:	61a8      	str	r0, [r5, #24]
 8004930:	61a3      	str	r3, [r4, #24]
 8004932:	f06f 0301 	mvn.w	r3, #1
 8004936:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004938:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d5fc      	bpl.n	8004938 <R3_1_SwitchOffPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800493e:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8004942:	bc30      	pop	{r4, r5}
 8004944:	6113      	str	r3, [r2, #16]
 8004946:	4770      	bx	lr

08004948 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 8004948:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800494a:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 800494e:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004950:	6a13      	ldr	r3, [r2, #32]
 8004952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004956:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8004958:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 800495c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800495e:	480e      	ldr	r0, [pc, #56]	; (8004998 <R3_1_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8004960:	3214      	adds	r2, #20
 8004962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 800496c:	4283      	cmp	r3, r0
 800496e:	db05      	blt.n	800497c <R3_1_RLGetPhaseCurrents+0x34>
  {
    if (wAux < INT16_MAX)
 8004970:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004974:	4293      	cmp	r3, r2
 8004976:	dc0b      	bgt.n	8004990 <R3_1_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 8004978:	b21b      	sxth	r3, r3
 800497a:	e000      	b.n	800497e <R3_1_RLGetPhaseCurrents+0x36>
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <R3_1_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 800497e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 8004982:	2200      	movs	r2, #0
 8004984:	f363 020f 	bfi	r2, r3, #0, #16
 8004988:	f363 421f 	bfi	r2, r3, #16, #16
 800498c:	600a      	str	r2, [r1, #0]
}
 800498e:	4770      	bx	lr
 8004990:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004994:	e7f3      	b.n	800497e <R3_1_RLGetPhaseCurrents+0x36>
 8004996:	bf00      	nop
 8004998:	ffff8002 	.word	0xffff8002
 800499c:	ffff8001 	.word	0xffff8001

080049a0 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80049a0:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80049a4:	684a      	ldr	r2, [r1, #4]
{  
 80049a6:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049a8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80049ac:	2400      	movs	r4, #0
 80049ae:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049b0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80049b2:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80049b4:	07db      	lsls	r3, r3, #31
 80049b6:	d5fc      	bpl.n	80049b2 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049b8:	f06f 0301 	mvn.w	r3, #1
 80049bc:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80049be:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c4:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80049c6:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d10a      	bne.n	80049e4 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80049ce:	6888      	ldr	r0, [r1, #8]
 80049d0:	694c      	ldr	r4, [r1, #20]
 80049d2:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80049d6:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80049d8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80049dc:	0412      	lsls	r2, r2, #16
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	6182      	str	r2, [r0, #24]
 80049e2:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 80049e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop

080049ec <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80049ec:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80049f0:	2200      	movs	r2, #0
{
 80049f2:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80049f4:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80049f8:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	06d2      	lsls	r2, r2, #27
 8004a00:	d4fc      	bmi.n	80049fc <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	06d5      	lsls	r5, r2, #27
 8004a06:	d5fc      	bpl.n	8004a02 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8004a08:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	3a05      	subs	r2, #5
 8004a10:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004a14:	f06f 0201 	mvn.w	r2, #1
 8004a18:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004a1a:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8004a1c:	07d2      	lsls	r2, r2, #31
 8004a1e:	d5fc      	bpl.n	8004a1a <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8004a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004a36:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8004a3a:	2a02      	cmp	r2, #2
 8004a3c:	d00b      	beq.n	8004a56 <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004a3e:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004a42:	f06f 0104 	mvn.w	r1, #4
 8004a46:	6021      	str	r1, [r4, #0]
 8004a48:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8004a50:	bc30      	pop	{r4, r5}
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8004a56:	6a18      	ldr	r0, [r3, #32]
 8004a58:	f240 5255 	movw	r2, #1365	; 0x555
 8004a5c:	4210      	tst	r0, r2
 8004a5e:	d00a      	beq.n	8004a76 <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004a64:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8004a66:	68ca      	ldr	r2, [r1, #12]
 8004a68:	6988      	ldr	r0, [r1, #24]
 8004a6a:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004a6c:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8004a6e:	6909      	ldr	r1, [r1, #16]
 8004a70:	0412      	lsls	r2, r2, #16
 8004a72:	618a      	str	r2, [r1, #24]
}
 8004a74:	e7e3      	b.n	8004a3e <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004a76:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 8004a7a:	688d      	ldr	r5, [r1, #8]
 8004a7c:	0400      	lsls	r0, r0, #16
 8004a7e:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8004a80:	68c8      	ldr	r0, [r1, #12]
 8004a82:	0412      	lsls	r2, r2, #16
 8004a84:	6182      	str	r2, [r0, #24]
 8004a86:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8004a88:	6909      	ldr	r1, [r1, #16]
 8004a8a:	0412      	lsls	r2, r2, #16
 8004a8c:	618a      	str	r2, [r1, #24]
}
 8004a8e:	e7d6      	b.n	8004a3e <R3_1_RLSwitchOnPWM+0x52>

08004a90 <R3_1_Init>:
{
 8004a90:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004a92:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8004a96:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004a98:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004a9a:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8004a9c:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004aa0:	f021 0120 	bic.w	r1, r1, #32
 8004aa4:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8004aa6:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004aae:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004ab0:	f06f 0104 	mvn.w	r1, #4
 8004ab4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004ab6:	6811      	ldr	r1, [r2, #0]
 8004ab8:	f021 0101 	bic.w	r1, r1, #1
 8004abc:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8004abe:	491b      	ldr	r1, [pc, #108]	; (8004b2c <R3_1_Init+0x9c>)
 8004ac0:	428a      	cmp	r2, r1
 8004ac2:	d02d      	beq.n	8004b20 <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004ac4:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8004ac8:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8004aca:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
 8004ace:	b119      	cbz	r1, 8004ad8 <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004ad0:	68d1      	ldr	r1, [r2, #12]
 8004ad2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004ad6:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8004ad8:	6a11      	ldr	r1, [r2, #32]
 8004ada:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8004ade:	f041 0105 	orr.w	r1, r1, #5
 8004ae2:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004aee:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004af8:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b00:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8004b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 8004b04:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8004b06:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8004b0a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004b0e:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004b14:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 8004b16:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    pHandle->_Super.DTTest = 0u;
 8004b1a:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
}
 8004b1e:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004b20:	4d03      	ldr	r5, [pc, #12]	; (8004b30 <R3_1_Init+0xa0>)
 8004b22:	68e9      	ldr	r1, [r5, #12]
 8004b24:	f041 0101 	orr.w	r1, r1, #1
 8004b28:	60e9      	str	r1, [r5, #12]
}
 8004b2a:	e7cb      	b.n	8004ac4 <R3_1_Init+0x34>
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	e0042000 	.word	0xe0042000

08004b34 <R3_1_SetOffsetCalib>:
{
 8004b34:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8004b36:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8004b3a:	680b      	ldr	r3, [r1, #0]
 8004b3c:	6783      	str	r3, [r0, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 8004b3e:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8004b40:	e9c0 421f 	strd	r4, r2, [r0, #124]	; 0x7c
  pHdl->offsetCalibStatus = true;
 8004b44:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 8004b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop

08004b50 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8004b50:	e9d0 231f 	ldrd	r2, r3, [r0, #124]	; 0x7c
 8004b54:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004b56:	608b      	str	r3, [r1, #8]
 8004b58:	e9c1 0200 	strd	r0, r2, [r1]
}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <R3_1_CurrentReadingCalibration>:
{
 8004b60:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004b62:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  if (false == pHandle->_Super.offsetCalibStatus)
 8004b66:	f890 6074 	ldrb.w	r6, [r0, #116]	; 0x74
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004b6a:	685c      	ldr	r4, [r3, #4]
{
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8004b70:	b356      	cbz	r6, 8004bc8 <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004b72:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8004b74:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004b78:	f022 0208 	bic.w	r2, r2, #8
 8004b7c:	61a2      	str	r2, [r4, #24]
 8004b7e:	69a2      	ldr	r2, [r4, #24]
 8004b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b84:	61a2      	str	r2, [r4, #24]
 8004b86:	69e2      	ldr	r2, [r4, #28]
 8004b88:	f022 0208 	bic.w	r2, r2, #8
 8004b8c:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004b8e:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004b90:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004b92:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004b94:	69a3      	ldr	r3, [r4, #24]
 8004b96:	f043 0308 	orr.w	r3, r3, #8
 8004b9a:	61a3      	str	r3, [r4, #24]
 8004b9c:	69a3      	ldr	r3, [r4, #24]
 8004b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ba2:	61a3      	str	r3, [r4, #24]
 8004ba4:	69e3      	ldr	r3, [r4, #28]
 8004ba6:	f043 0308 	orr.w	r3, r3, #8
 8004baa:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8004bac:	6a23      	ldr	r3, [r4, #32]
 8004bae:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector = SECTOR_5;
 8004bb2:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f043 0305 	orr.w	r3, r3, #5
 8004bba:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8004bbc:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
  pHandle->BrakeActionLock = false;
 8004bc0:	f885 2092 	strb.w	r2, [r5, #146]	; 0x92
}
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8004bc8:	6843      	ldr	r3, [r0, #4]
 8004bca:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8004bcc:	6983      	ldr	r3, [r0, #24]
 8004bce:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 8004bd0:	f880 608f 	strb.w	r6, [r0, #143]	; 0x8f
  CLEAR_BIT(TIMx->CCER, Channels);
 8004bd4:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseAOffset = 0u;
 8004bd6:	6786      	str	r6, [r0, #120]	; 0x78
 8004bd8:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8004bdc:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 8004be0:	e9c0 661f 	strd	r6, r6, [r0, #124]	; 0x7c
 8004be4:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <R3_1_CurrentReadingCalibration+0x110>)
 8004be8:	6043      	str	r3, [r0, #4]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <R3_1_CurrentReadingCalibration+0x114>)
 8004bec:	6183      	str	r3, [r0, #24]
    pHandle->CalibSector = SECTOR_5;
 8004bee:	2304      	movs	r3, #4
 8004bf0:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_5;
 8004bf4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004bf8:	f7ff fe24 	bl	8004844 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8004bfc:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8004c00:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8004c04:	f105 038f 	add.w	r3, r5, #143	; 0x8f
 8004c08:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	e9cd 1300 	strd	r1, r3, [sp]
 8004c12:	f7ff fcbd 	bl	8004590 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7ff fe5e 	bl	80048d8 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <R3_1_CurrentReadingCalibration+0x118>)
 8004c1e:	606a      	str	r2, [r5, #4]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004c20:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8004c22:	f885 608f 	strb.w	r6, [r5, #143]	; 0x8f
    pHandle->CalibSector = SECTOR_1;
 8004c26:	f885 608e 	strb.w	r6, [r5, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_1;
 8004c2a:	f885 6070 	strb.w	r6, [r5, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004c2e:	f7ff fe09 	bl	8004844 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8004c32:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8004c36:	9b01      	ldr	r3, [sp, #4]
 8004c38:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8004c3c:	9900      	ldr	r1, [sp, #0]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff fca6 	bl	8004590 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7ff fe47 	bl	80048d8 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 8004c4a:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 8004c4e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    pHandle->PhaseAOffset >>= 3;
 8004c52:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 8004c54:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseCOffset >>= 3;
 8004c56:	08db      	lsrs	r3, r3, #3
    pHandle->PhaseBOffset >>= 3;
 8004c58:	e9c5 121e 	strd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 8004c5c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8004c60:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8004c62:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8004c64:	606a      	str	r2, [r5, #4]
    pHandle->_Super.offsetCalibStatus = true;
 8004c66:	2101      	movs	r1, #1
 8004c68:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8004c6c:	61ab      	str	r3, [r5, #24]
 8004c6e:	e780      	b.n	8004b72 <R3_1_CurrentReadingCalibration+0x12>
 8004c70:	08004761 	.word	0x08004761
 8004c74:	08004cb5 	.word	0x08004cb5
 8004c78:	080047ad 	.word	0x080047ad

08004c7c <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004c7c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8004c80:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004c84:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8004c86:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
{
 8004c8a:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 8004c8c:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c90:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 8004c94:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c98:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
}
 8004c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8004ca0:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 8004ca2:	bf12      	itee	ne
 8004ca4:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	f8a0 3048 	strheq.w	r3, [r0, #72]	; 0x48
}
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop

08004cb4 <R3_1_SetADCSampPointCalibration>:
{
 8004cb4:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8004cb6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8004cba:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 8004cbe:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8004cc2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8004cc6:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8004cc8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8004ccc:	b289      	uxth	r1, r1
 8004cce:	f7ff ffd5 	bl	8004c7c <R3_1_WriteTIMRegisters>
}
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <R3_1_SetADCSampPointSectX>:
{
 8004cd4:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8004cd6:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004cda:	f8b0 e08c 	ldrh.w	lr, [r0, #140]	; 0x8c
 8004cde:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8004ce2:	ebae 0201 	sub.w	r2, lr, r1
 8004ce6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8004cea:	b292      	uxth	r2, r2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d908      	bls.n	8004d02 <R3_1_SetADCSampPointSectX+0x2e>
    pHandle->_Super.Sector = SECTOR_5;
 8004cf0:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004cf2:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8004cf6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004cfa:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8004cfc:	f7ff ffbe 	bl	8004c7c <R3_1_WriteTIMRegisters>
}
 8004d00:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8004d02:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
 8004d06:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8004d0a:	fa1f fc8c 	uxth.w	ip, ip
 8004d0e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8004d12:	d906      	bls.n	8004d22 <R3_1_SetADCSampPointSectX+0x4e>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8004d14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004d18:	1ac9      	subs	r1, r1, r3
 8004d1a:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8004d1c:	f7ff ffae 	bl	8004c7c <R3_1_WriteTIMRegisters>
}
 8004d20:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8004d22:	440b      	add	r3, r1
 8004d24:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8004d26:	458e      	cmp	lr, r1
 8004d28:	d8e8      	bhi.n	8004cfc <R3_1_SetADCSampPointSectX+0x28>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d2a:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8004d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d30:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8004d34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d38:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8004d3a:	f7ff ff9f 	bl	8004c7c <R3_1_WriteTIMRegisters>
}
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004d40:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
 8004d44:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004d46:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8004d4a:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8004d4c:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004d4e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8004d52:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8004d56:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8004d58:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
 8004d5c:	3008      	adds	r0, #8
 8004d5e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004d62:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8004d64:	6a20      	ldr	r0, [r4, #32]
 8004d66:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004d6a:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004d6c:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8004d6e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8004d72:	4329      	orrs	r1, r5
 8004d74:	6091      	str	r1, [r2, #8]
}
 8004d76:	f103 006e 	add.w	r0, r3, #110	; 0x6e
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8004d7a:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
}
 8004d7e:	bc30      	pop	{r4, r5}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop

08004d84 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8004d84:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
 8004d88:	b92b      	cbnz	r3, 8004d96 <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004d8a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004d8e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8004d92:	2a02      	cmp	r2, #2
 8004d94:	d004      	beq.n	8004da0 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
}
 8004d9c:	306e      	adds	r0, #110	; 0x6e
 8004d9e:	4770      	bx	lr
{
 8004da0:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004da2:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004da6:	689d      	ldr	r5, [r3, #8]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	0424      	lsls	r4, r4, #16
 8004dac:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004dae:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 8004db2:	0409      	lsls	r1, r1, #16
 8004db4:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8004db6:	2301      	movs	r3, #1
 8004db8:	61a9      	str	r1, [r5, #24]
}
 8004dba:	306e      	adds	r0, #110	; 0x6e
 8004dbc:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8004dbe:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8004dc2:	bc30      	pop	{r4, r5}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop

08004dc8 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8004dc8:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004dcc:	b90b      	cbnz	r3, 8004dd2 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8004dce:	4618      	mov	r0, r3
}
 8004dd0:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
    retVal |= MC_BREAK_IN;
 8004dd8:	2040      	movs	r0, #64	; 0x40
 8004dda:	4770      	bx	lr

08004ddc <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8004ddc:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
{
 8004de0:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d135      	bne.n	8004e52 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004de6:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
 8004dea:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004df2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004df6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e08:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 8004e0a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 8004e0e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004e10:	f103 0418 	add.w	r4, r3, #24
 8004e14:	d02a      	beq.n	8004e6c <R3_1_RLDetectionModeEnable+0x90>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8004e16:	2a02      	cmp	r2, #2
 8004e18:	d10d      	bne.n	8004e36 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8004e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e24:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	f042 0210 	orr.w	r2, r2, #16
 8004e2c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e34:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004e3c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004e40:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e48:	621a      	str	r2, [r3, #32]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e50:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8004e56:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8004e58:	4c0f      	ldr	r4, [pc, #60]	; (8004e98 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8004e5a:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8004e5c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8004e5e:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8004e60:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8004e64:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8004e66:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 8004e6a:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8004e72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e76:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	f022 0210 	bic.w	r2, r2, #16
 8004e7e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	e7d5      	b.n	8004e36 <R3_1_RLDetectionModeEnable+0x5a>
 8004e8a:	bf00      	nop
 8004e8c:	080049a1 	.word	0x080049a1
 8004e90:	080049ed 	.word	0x080049ed
 8004e94:	080048d9 	.word	0x080048d9
 8004e98:	08004949 	.word	0x08004949

08004e9c <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8004e9c:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d049      	beq.n	8004f38 <R3_1_RLDetectionModeDisable+0x9c>
{
 8004ea4:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8004ea6:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8004eaa:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	06d4      	lsls	r4, r2, #27
 8004eb0:	d5fc      	bpl.n	8004eac <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	06d2      	lsls	r2, r2, #27
 8004eb6:	d4fc      	bmi.n	8004eb2 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8004eb8:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004ec4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004ec8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8004ed2:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	d02f      	beq.n	8004f3a <R3_1_RLDetectionModeDisable+0x9e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8004eda:	2a02      	cmp	r2, #2
 8004edc:	d053      	beq.n	8004f86 <R3_1_RLDetectionModeDisable+0xea>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8004ede:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8004ee2:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004ee6:	699c      	ldr	r4, [r3, #24]
 8004ee8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004eec:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8004ef0:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004ef2:	6a1c      	ldr	r4, [r3, #32]
 8004ef4:	f044 0410 	orr.w	r4, r4, #16
 8004ef8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004efc:	69dc      	ldr	r4, [r3, #28]
 8004efe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004f02:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8004f06:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8004f08:	6a1c      	ldr	r4, [r3, #32]
 8004f0a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004f0e:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8004f10:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004f12:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8004f14:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8004f16:	4a2f      	ldr	r2, [pc, #188]	; (8004fd4 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8004f18:	4c2f      	ldr	r4, [pc, #188]	; (8004fd8 <R3_1_RLDetectionModeDisable+0x13c>)
 8004f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1e:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8004f20:	492e      	ldr	r1, [pc, #184]	; (8004fdc <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8004f22:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8004f24:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8004f26:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8004f28:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8004f2a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8004f32:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 8004f36:	4770      	bx	lr
 8004f38:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8004f3a:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8004f3c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8004f40:	f044 0404 	orr.w	r4, r4, #4
 8004f44:	0852      	lsrs	r2, r2, #1
 8004f46:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004f4a:	699c      	ldr	r4, [r3, #24]
 8004f4c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004f50:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8004f54:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004f56:	6a1c      	ldr	r4, [r3, #32]
 8004f58:	f044 0410 	orr.w	r4, r4, #16
 8004f5c:	621c      	str	r4, [r3, #32]
 8004f5e:	6a1c      	ldr	r4, [r3, #32]
 8004f60:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8004f64:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004f68:	69dc      	ldr	r4, [r3, #28]
 8004f6a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004f6e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8004f72:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8004f74:	6a1c      	ldr	r4, [r3, #32]
 8004f76:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004f7a:	621c      	str	r4, [r3, #32]
 8004f7c:	6a1c      	ldr	r4, [r3, #32]
 8004f7e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8004f82:	621c      	str	r4, [r3, #32]
}
 8004f84:	e7c4      	b.n	8004f10 <R3_1_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8004f86:	6a1c      	ldr	r4, [r3, #32]
 8004f88:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8004f8c:	f024 0404 	bic.w	r4, r4, #4
 8004f90:	0852      	lsrs	r2, r2, #1
 8004f92:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004f94:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004f96:	699c      	ldr	r4, [r3, #24]
 8004f98:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004f9c:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8004fa0:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8004fa2:	6a1c      	ldr	r4, [r3, #32]
 8004fa4:	f044 0410 	orr.w	r4, r4, #16
 8004fa8:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004faa:	6a1c      	ldr	r4, [r3, #32]
 8004fac:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8004fb0:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004fb4:	69dc      	ldr	r4, [r3, #28]
 8004fb6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004fba:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8004fbe:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8004fc0:	6a1c      	ldr	r4, [r3, #32]
 8004fc2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004fc6:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004fc8:	6a1c      	ldr	r4, [r3, #32]
 8004fca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8004fce:	621c      	str	r4, [r3, #32]
}
 8004fd0:	e79e      	b.n	8004f10 <R3_1_RLDetectionModeDisable+0x74>
 8004fd2:	bf00      	nop
 8004fd4:	080045cd 	.word	0x080045cd
 8004fd8:	080047f1 	.word	0x080047f1
 8004fdc:	08004845 	.word	0x08004845
 8004fe0:	080048d9 	.word	0x080048d9

08004fe4 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8004fe4:	f8b0 308c 	ldrh.w	r3, [r0, #140]	; 0x8c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004fe8:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8004fec:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004ff0:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8004ff2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8004ff6:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8004ff8:	f04f 0c03 	mov.w	ip, #3
 8004ffc:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8005000:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005004:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005006:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8005008:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 800500a:	bf12      	itee	ne
 800500c:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005010:	2200      	moveq	r2, #0
 8005012:	f8a0 2048 	strheq.w	r2, [r0, #72]	; 0x48
}
 8005016:	4618      	mov	r0, r3
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800501c:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8005020:	8b82      	ldrh	r2, [r0, #28]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005022:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005024:	4494      	add	ip, r2
{
 8005026:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005028:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800502c:	b14b      	cbz	r3, 8005042 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 800502e:	6a04      	ldr	r4, [r0, #32]
 8005030:	2300      	movs	r3, #0
 8005032:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005034:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8005036:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800503a:	8b01      	ldrh	r1, [r0, #24]
 800503c:	b29a      	uxth	r2, r3
 800503e:	4291      	cmp	r1, r2
 8005040:	d8f7      	bhi.n	8005032 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8005042:	2300      	movs	r3, #0
 8005044:	f36c 030f 	bfi	r3, ip, #0, #16
 8005048:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800504c:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800504e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8005052:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8005054:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <RVBS_Init>:
{
 800505c:	b510      	push	{r4, lr}
 800505e:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005060:	300c      	adds	r0, #12
 8005062:	f7fc fefb 	bl	8001e5c <RCM_RegisterRegConv>
 8005066:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    RVBS_Clear(pHandle);
 800506a:	4620      	mov	r0, r4
 800506c:	f7ff ffd6 	bl	800501c <RVBS_Clear>
}
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop

08005074 <RVBS_CheckFaultState>:
    fault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005074:	88c3      	ldrh	r3, [r0, #6]
 8005076:	8b42      	ldrh	r2, [r0, #26]
 8005078:	429a      	cmp	r2, r3
 800507a:	d305      	bcc.n	8005088 <RVBS_CheckFaultState+0x14>
    {
      fault = MC_OVER_VOLT;
    }
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800507c:	8b80      	ldrh	r0, [r0, #28]
    {
      fault = MC_UNDER_VOLT;
    }
    else
    {
      fault = MC_NO_ERROR;
 800507e:	4298      	cmp	r0, r3
 8005080:	bf8c      	ite	hi
 8005082:	2004      	movhi	r0, #4
 8005084:	2000      	movls	r0, #0
 8005086:	4770      	bx	lr
      fault = MC_OVER_VOLT;
 8005088:	2002      	movs	r0, #2
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800508a:	4770      	bx	lr

0800508c <RVBS_CalcAvVbus>:
{
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005090:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005094:	f7fc ffbe 	bl	8002014 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8005098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800509c:	4298      	cmp	r0, r3
 800509e:	d024      	beq.n	80050ea <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 80050a0:	6a23      	ldr	r3, [r4, #32]
 80050a2:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 80050a6:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80050aa:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 80050ae:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 80050b2:	d00d      	beq.n	80050d0 <RVBS_CalcAvVbus+0x44>
 80050b4:	3a01      	subs	r2, #1
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 80050bc:	3b02      	subs	r3, #2
      wtemp = 0u;
 80050be:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 80050c0:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80050c4:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 80050c6:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80050c8:	d1fa      	bne.n	80050c0 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 80050ca:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80050ce:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80050d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80050d4:	4575      	cmp	r5, lr
        pHandle->index++;
 80050d6:	bf34      	ite	cc
 80050d8:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80050da:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80050dc:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80050de:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 80050e0:	bf34      	ite	cc
 80050e2:	f884 5025 	strbcc.w	r5, [r4, #37]	; 0x25
        pHandle->index = 0U;
 80050e6:	f884 3025 	strbcs.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7ff ffc2 	bl	8005074 <RVBS_CheckFaultState>
 80050f0:	8120      	strh	r0, [r4, #8]
}
 80050f2:	bd38      	pop	{r3, r4, r5, pc}

080050f4 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80050f4:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 80050f6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 80050f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 80050fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8005100:	6142      	str	r2, [r0, #20]
    FD_Init(& (pHandle->fd));
#endif
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8005102:	4770      	bx	lr

08005104 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8005104:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800510c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8005114:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800511c:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005120:	8a81      	ldrh	r1, [r0, #20]
{
 8005122:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8005124:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8005126:	bfb8      	it	lt
 8005128:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800512a:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800512e:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005132:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8005134:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005136:	459e      	cmp	lr, r3
 8005138:	d819      	bhi.n	800516e <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800513a:	4299      	cmp	r1, r3
 800513c:	bf2c      	ite	cs
 800513e:	2300      	movcs	r3, #0
 8005140:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005142:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005146:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 800514a:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800514c:	bfb8      	it	lt
 800514e:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8005150:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005152:	458e      	cmp	lr, r1
 8005154:	d300      	bcc.n	8005158 <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8005156:	b163      	cbz	r3, 8005172 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005158:	4594      	cmp	ip, r2
 800515a:	d901      	bls.n	8005160 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 800515c:	3201      	adds	r2, #1
 800515e:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005160:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8005162:	ebb2 000c 	subs.w	r0, r2, ip
 8005166:	bf18      	it	ne
 8005168:	2001      	movne	r0, #1
 800516a:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 800516e:	2301      	movs	r3, #1
 8005170:	e7e7      	b.n	8005142 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8005172:	4594      	cmp	ip, r2
 8005174:	bf88      	it	hi
 8005176:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005178:	7002      	strb	r2, [r0, #0]
}
 800517a:	ebb2 000c 	subs.w	r0, r2, ip
 800517e:	bf18      	it	ne
 8005180:	2001      	movne	r0, #1
 8005182:	f85d fb04 	ldr.w	pc, [sp], #4
 8005186:	bf00      	nop

08005188 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005188:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 800518c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800518e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8005192:	6142      	str	r2, [r0, #20]
{
 8005194:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8005196:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800519a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800519c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800519e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80051a2:	0409      	lsls	r1, r1, #16
 80051a4:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 80051a8:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80051aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 80051ae:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80051b0:	6183      	str	r3, [r0, #24]
}
 80051b2:	4770      	bx	lr

080051b4 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 80051b4:	6940      	ldr	r0, [r0, #20]
 80051b6:	4770      	bx	lr

080051b8 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (STC_SPEED_MODE == pHandle->Mode)
 80051b8:	7803      	ldrb	r3, [r0, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d000      	beq.n	80051c0 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80051be:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80051c0:	6900      	ldr	r0, [r0, #16]
 80051c2:	2100      	movs	r1, #0
 80051c4:	f7ff b934 	b.w	8004430 <PID_SetIntegralTerm>

080051c8 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80051c8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop

080051d0 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80051d0:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80051d2:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80051d4:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80051d6:	4770      	bx	lr

080051d8 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80051d8:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (STC_TORQUE_MODE == pHandle->Mode)
 80051da:	7803      	ldrb	r3, [r0, #0]
{
 80051dc:	4604      	mov	r4, r0
 80051de:	460d      	mov	r5, r1
 80051e0:	4616      	mov	r6, r2
    if (STC_TORQUE_MODE == pHandle->Mode)
 80051e2:	b1f3      	cbz	r3, 8005222 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80051e4:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80051e6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80051ea:	4299      	cmp	r1, r3
 80051ec:	dd01      	ble.n	80051f2 <STC_ExecRamp+0x1a>
        allowedRange = false;
 80051ee:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80051f2:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80051f6:	428b      	cmp	r3, r1
 80051f8:	dcf9      	bgt.n	80051ee <STC_ExecRamp+0x16>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80051fa:	8c23      	ldrh	r3, [r4, #32]
 80051fc:	4299      	cmp	r1, r3
 80051fe:	da03      	bge.n	8005208 <STC_ExecRamp+0x30>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005200:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005204:	428b      	cmp	r3, r1
 8005206:	dbf2      	blt.n	80051ee <STC_ExecRamp+0x16>
      if (0U == hDurationms)
 8005208:	b9ae      	cbnz	r6, 8005236 <STC_ExecRamp+0x5e>
        if (STC_SPEED_MODE == pHandle->Mode)
 800520a:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800520c:	042d      	lsls	r5, r5, #16
        if (STC_SPEED_MODE == pHandle->Mode)
 800520e:	2b01      	cmp	r3, #1
        pHandle->RampRemainingStep = 0U;
 8005210:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005214:	bf0c      	ite	eq
 8005216:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005218:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800521a:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800521c:	61a3      	str	r3, [r4, #24]
 800521e:	2001      	movs	r0, #1
}
 8005220:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005222:	f7ff ffd1 	bl	80051c8 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005226:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005228:	429d      	cmp	r5, r3
 800522a:	dce0      	bgt.n	80051ee <STC_ExecRamp+0x16>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800522c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005230:	42ab      	cmp	r3, r5
 8005232:	dcdc      	bgt.n	80051ee <STC_ExecRamp+0x16>
 8005234:	e7e8      	b.n	8005208 <STC_ExecRamp+0x30>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005236:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005238:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800523a:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800523e:	4e06      	ldr	r6, [pc, #24]	; (8005258 <STC_ExecRamp+0x80>)
 8005240:	fba6 2303 	umull	r2, r3, r6, r3
 8005244:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8005246:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005248:	1a28      	subs	r0, r5, r0
 800524a:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800524c:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800524e:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8005252:	61a0      	str	r0, [r4, #24]
 8005254:	2001      	movs	r0, #1
}
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	10624dd3 	.word	0x10624dd3

0800525c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800525c:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (STC_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 800525e:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (STC_TORQUE_MODE == pHandle->Mode)
 8005262:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8005264:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8005266:	2a00      	cmp	r2, #0
 8005268:	bf08      	it	eq
 800526a:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 800526c:	2b01      	cmp	r3, #1
{
 800526e:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8005270:	d908      	bls.n	8005284 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8005272:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005274:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005276:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8005278:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (STC_SPEED_MODE == pHandle->Mode)
 800527a:	2a01      	cmp	r2, #1
 800527c:	d00b      	beq.n	8005296 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 800527e:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005280:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005282:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005284:	d1f9      	bne.n	800527a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005286:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800528a:	2300      	movs	r3, #0
    if (STC_SPEED_MODE == pHandle->Mode)
 800528c:	2a01      	cmp	r2, #1
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800528e:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8005292:	60c3      	str	r3, [r0, #12]
    if (STC_SPEED_MODE == pHandle->Mode)
 8005294:	d1f3      	bne.n	800527e <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005296:	6960      	ldr	r0, [r4, #20]
 8005298:	f7ff ff38 	bl	800510c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800529c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80052a0:	b209      	sxth	r1, r1
 80052a2:	6920      	ldr	r0, [r4, #16]
 80052a4:	f7ff f8c6 	bl	8004434 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80052a8:	0403      	lsls	r3, r0, #16
 80052aa:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80052ae:	bd38      	pop	{r3, r4, r5, pc}

080052b0 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 80052b0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80052b8:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80052bc:	2200      	movs	r2, #0
 80052be:	b299      	uxth	r1, r3
 80052c0:	f361 020f 	bfi	r2, r1, #0, #16
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f363 421f 	bfi	r2, r3, #16, #16
{
 80052ca:	b082      	sub	sp, #8
}
 80052cc:	4610      	mov	r0, r2
 80052ce:	b002      	add	sp, #8
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80052d8:	6940      	ldr	r0, [r0, #20]
 80052da:	f7ff ff17 	bl	800510c <SPD_GetAvrgMecSpeedUnit>
 80052de:	0400      	lsls	r0, r0, #16
 80052e0:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 f820 	bl	800533c <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	080055e4 	.word	0x080055e4
 8005320:	080055e4 	.word	0x080055e4
 8005324:	080055e4 	.word	0x080055e4
 8005328:	080055e8 	.word	0x080055e8

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
